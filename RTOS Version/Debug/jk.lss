
jk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000246  00800060  00006148  000061dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000049f  008002a6  008002a6  00006422  2**0
                  ALLOC
  3 .stab         00007dd0  00000000  00000000  00006424  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003d4c  00000000  00000000  0000e1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00011f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  000120e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  000122d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  000144eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  000157a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000168dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  00016a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  00016d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000176c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 49 2d 	jmp	0x5a92	; 0x5a92 <__vector_1>
       8:	0c 94 78 2d 	jmp	0x5af0	; 0x5af0 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f1 e6       	ldi	r31, 0x61	; 97
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3a       	cpi	r26, 0xA6	; 166
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	17 e0       	ldi	r17, 0x07	; 7
      78:	a6 ea       	ldi	r26, 0xA6	; 166
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 34       	cpi	r26, 0x45	; 69
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 73 24 	call	0x48e6	; 0x48e6 <main>
      8a:	0c 94 a2 30 	jmp	0x6144	; 0x6144 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fe 2f 	jmp	0x5ffc	; 0x5ffc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e1       	ldi	r26, 0x13	; 19
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1a 30 	jmp	0x6034	; 0x6034 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 26 30 	jmp	0x604c	; 0x604c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 26 30 	jmp	0x604c	; 0x604c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fe 2f 	jmp	0x5ffc	; 0x5ffc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e1       	ldi	r24, 0x13	; 19
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1a 30 	jmp	0x6034	; 0x6034 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 26 30 	jmp	0x604c	; 0x604c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 26 30 	jmp	0x604c	; 0x604c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0a 30 	jmp	0x6014	; 0x6014 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 26 30 	jmp	0x604c	; 0x604c <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 07 30 	jmp	0x600e	; 0x600e <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 0e 30 	jmp	0x601c	; 0x601c <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 2a 30 	jmp	0x6054	; 0x6054 <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 06 30 	jmp	0x600c	; 0x600c <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 22 30 	jmp	0x6044	; 0x6044 <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e5 5e       	subi	r30, 0xE5	; 229
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	cd b7       	in	r28, 0x3d	; 61
     d98:	de b7       	in	r29, 0x3e	; 62
     d9a:	27 97       	sbiw	r28, 0x07	; 7
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	9d 83       	std	Y+5, r25	; 0x05
     da8:	8c 83       	std	Y+4, r24	; 0x04
     daa:	6e 83       	std	Y+6, r22	; 0x06
     dac:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
     dae:	8a e1       	ldi	r24, 0x1A	; 26
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	0e 94 a1 09 	call	0x1342	; 0x1342 <pvPortMalloc>
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <xCoRoutineCreate+0x32>
     dc2:	6f c0       	rjmp	.+222    	; 0xea2 <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
     dc4:	80 91 a6 02 	lds	r24, 0x02A6
     dc8:	90 91 a7 02 	lds	r25, 0x02A7
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	41 f4       	brne	.+16     	; 0xde0 <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	9a 81       	ldd	r25, Y+2	; 0x02
     dd4:	90 93 a7 02 	sts	0x02A7, r25
     dd8:	80 93 a6 02 	sts	0x02A6, r24
			prvInitialiseCoRoutineLists();
     ddc:	0e 94 30 09 	call	0x1260	; 0x1260 <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	82 30       	cpi	r24, 0x02	; 2
     de4:	10 f0       	brcs	.+4      	; 0xdea <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
     dea:	e9 81       	ldd	r30, Y+1	; 0x01
     dec:	fa 81       	ldd	r31, Y+2	; 0x02
     dee:	11 8e       	std	Z+25, r1	; 0x19
     df0:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
     df2:	e9 81       	ldd	r30, Y+1	; 0x01
     df4:	fa 81       	ldd	r31, Y+2	; 0x02
     df6:	8e 81       	ldd	r24, Y+6	; 0x06
     df8:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
     dfa:	e9 81       	ldd	r30, Y+1	; 0x01
     dfc:	fa 81       	ldd	r31, Y+2	; 0x02
     dfe:	8f 81       	ldd	r24, Y+7	; 0x07
     e00:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
     e02:	e9 81       	ldd	r30, Y+1	; 0x01
     e04:	fa 81       	ldd	r31, Y+2	; 0x02
     e06:	8c 81       	ldd	r24, Y+4	; 0x04
     e08:	9d 81       	ldd	r25, Y+5	; 0x05
     e0a:	91 83       	std	Z+1, r25	; 0x01
     e0c:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
     e0e:	89 81       	ldd	r24, Y+1	; 0x01
     e10:	9a 81       	ldd	r25, Y+2	; 0x02
     e12:	02 96       	adiw	r24, 0x02	; 2
     e14:	0e 94 37 0a 	call	0x146e	; 0x146e <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	9a 81       	ldd	r25, Y+2	; 0x02
     e1c:	0c 96       	adiw	r24, 0x0c	; 12
     e1e:	0e 94 37 0a 	call	0x146e	; 0x146e <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
     e22:	e9 81       	ldd	r30, Y+1	; 0x01
     e24:	fa 81       	ldd	r31, Y+2	; 0x02
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	91 87       	std	Z+9, r25	; 0x09
     e2c:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	93 8b       	std	Z+19, r25	; 0x13
     e38:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
     e3a:	8e 81       	ldd	r24, Y+6	; 0x06
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
     e48:	e9 81       	ldd	r30, Y+1	; 0x01
     e4a:	fa 81       	ldd	r31, Y+2	; 0x02
     e4c:	95 87       	std	Z+13, r25	; 0x0d
     e4e:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
     e50:	e9 81       	ldd	r30, Y+1	; 0x01
     e52:	fa 81       	ldd	r31, Y+2	; 0x02
     e54:	96 89       	ldd	r25, Z+22	; 0x16
     e56:	80 91 a8 02 	lds	r24, 0x02A8
     e5a:	89 17       	cp	r24, r25
     e5c:	28 f4       	brcc	.+10     	; 0xe68 <xCoRoutineCreate+0xd6>
     e5e:	e9 81       	ldd	r30, Y+1	; 0x01
     e60:	fa 81       	ldd	r31, Y+2	; 0x02
     e62:	86 89       	ldd	r24, Z+22	; 0x16
     e64:	80 93 a8 02 	sts	0x02A8, r24
     e68:	e9 81       	ldd	r30, Y+1	; 0x01
     e6a:	fa 81       	ldd	r31, Y+2	; 0x02
     e6c:	86 89       	ldd	r24, Z+22	; 0x16
     e6e:	28 2f       	mov	r18, r24
     e70:	30 e0       	ldi	r19, 0x00	; 0
     e72:	c9 01       	movw	r24, r18
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	82 0f       	add	r24, r18
     e82:	93 1f       	adc	r25, r19
     e84:	ac 01       	movw	r20, r24
     e86:	41 55       	subi	r20, 0x51	; 81
     e88:	5d 4f       	sbci	r21, 0xFD	; 253
     e8a:	89 81       	ldd	r24, Y+1	; 0x01
     e8c:	9a 81       	ldd	r25, Y+2	; 0x02
     e8e:	9c 01       	movw	r18, r24
     e90:	2e 5f       	subi	r18, 0xFE	; 254
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	ca 01       	movw	r24, r20
     e96:	b9 01       	movw	r22, r18
     e98:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>

		xReturn = pdPASS;
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	8b 83       	std	Y+3, r24	; 0x03
     ea0:	02 c0       	rjmp	.+4      	; 0xea6 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
     ea2:	8f ef       	ldi	r24, 0xFF	; 255
     ea4:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
}
     ea8:	27 96       	adiw	r28, 0x07	; 7
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <vCoRoutineAddToDelayedList+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <vCoRoutineAddToDelayedList+0x8>
     ec2:	00 d0       	rcall	.+0      	; 0xec4 <vCoRoutineAddToDelayedList+0xa>
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	9c 83       	std	Y+4, r25	; 0x04
     eca:	8b 83       	std	Y+3, r24	; 0x03
     ecc:	7e 83       	std	Y+6, r23	; 0x06
     ece:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
     ed0:	20 91 a9 02 	lds	r18, 0x02A9
     ed4:	30 91 aa 02 	lds	r19, 0x02AA
     ed8:	8b 81       	ldd	r24, Y+3	; 0x03
     eda:	9c 81       	ldd	r25, Y+4	; 0x04
     edc:	82 0f       	add	r24, r18
     ede:	93 1f       	adc	r25, r19
     ee0:	9a 83       	std	Y+2, r25	; 0x02
     ee2:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     ee4:	80 91 a6 02 	lds	r24, 0x02A6
     ee8:	90 91 a7 02 	lds	r25, 0x02A7
     eec:	02 96       	adiw	r24, 0x02	; 2
     eee:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
     ef2:	e0 91 a6 02 	lds	r30, 0x02A6
     ef6:	f0 91 a7 02 	lds	r31, 0x02A7
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	93 83       	std	Z+3, r25	; 0x03
     f00:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
     f02:	20 91 a9 02 	lds	r18, 0x02A9
     f06:	30 91 aa 02 	lds	r19, 0x02AA
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	82 17       	cp	r24, r18
     f10:	93 07       	cpc	r25, r19
     f12:	70 f4       	brcc	.+28     	; 0xf30 <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f14:	80 91 d5 02 	lds	r24, 0x02D5
     f18:	90 91 d6 02 	lds	r25, 0x02D6
     f1c:	20 91 a6 02 	lds	r18, 0x02A6
     f20:	30 91 a7 02 	lds	r19, 0x02A7
     f24:	2e 5f       	subi	r18, 0xFE	; 254
     f26:	3f 4f       	sbci	r19, 0xFF	; 255
     f28:	b9 01       	movw	r22, r18
     f2a:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
     f2e:	0d c0       	rjmp	.+26     	; 0xf4a <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
     f30:	80 91 d3 02 	lds	r24, 0x02D3
     f34:	90 91 d4 02 	lds	r25, 0x02D4
     f38:	20 91 a6 02 	lds	r18, 0x02A6
     f3c:	30 91 a7 02 	lds	r19, 0x02A7
     f40:	2e 5f       	subi	r18, 0xFE	; 254
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	b9 01       	movw	r22, r18
     f46:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
	}

	if( pxEventList )
     f4a:	8d 81       	ldd	r24, Y+5	; 0x05
     f4c:	9e 81       	ldd	r25, Y+6	; 0x06
     f4e:	00 97       	sbiw	r24, 0x00	; 0
     f50:	61 f0       	breq	.+24     	; 0xf6a <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
     f52:	80 91 a6 02 	lds	r24, 0x02A6
     f56:	90 91 a7 02 	lds	r25, 0x02A7
     f5a:	9c 01       	movw	r18, r24
     f5c:	24 5f       	subi	r18, 0xF4	; 244
     f5e:	3f 4f       	sbci	r19, 0xFF	; 255
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	b9 01       	movw	r22, r18
     f66:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
	}
}
     f6a:	26 96       	adiw	r28, 0x06	; 6
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	de bf       	out	0x3e, r29	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	cd bf       	out	0x3d, r28	; 61
     f76:	cf 91       	pop	r28
     f78:	df 91       	pop	r29
     f7a:	08 95       	ret

00000f7c <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
     f7c:	df 93       	push	r29
     f7e:	cf 93       	push	r28
     f80:	00 d0       	rcall	.+0      	; 0xf82 <prvCheckPendingReadyList+0x6>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	3a c0       	rjmp	.+116    	; 0xffc <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
     f88:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
     f8a:	e0 91 dc 02 	lds	r30, 0x02DC
     f8e:	f0 91 dd 02 	lds	r31, 0x02DD
     f92:	86 81       	ldd	r24, Z+6	; 0x06
     f94:	97 81       	ldd	r25, Z+7	; 0x07
     f96:	9a 83       	std	Y+2, r25	; 0x02
     f98:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	9a 81       	ldd	r25, Y+2	; 0x02
     f9e:	0c 96       	adiw	r24, 0x0c	; 12
     fa0:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
		}
		portENABLE_INTERRUPTS();
     fa4:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	02 96       	adiw	r24, 0x02	; 2
     fac:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
     fb0:	e9 81       	ldd	r30, Y+1	; 0x01
     fb2:	fa 81       	ldd	r31, Y+2	; 0x02
     fb4:	96 89       	ldd	r25, Z+22	; 0x16
     fb6:	80 91 a8 02 	lds	r24, 0x02A8
     fba:	89 17       	cp	r24, r25
     fbc:	28 f4       	brcc	.+10     	; 0xfc8 <prvCheckPendingReadyList+0x4c>
     fbe:	e9 81       	ldd	r30, Y+1	; 0x01
     fc0:	fa 81       	ldd	r31, Y+2	; 0x02
     fc2:	86 89       	ldd	r24, Z+22	; 0x16
     fc4:	80 93 a8 02 	sts	0x02A8, r24
     fc8:	e9 81       	ldd	r30, Y+1	; 0x01
     fca:	fa 81       	ldd	r31, Y+2	; 0x02
     fcc:	86 89       	ldd	r24, Z+22	; 0x16
     fce:	28 2f       	mov	r18, r24
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	c9 01       	movw	r24, r18
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	82 0f       	add	r24, r18
     fe2:	93 1f       	adc	r25, r19
     fe4:	ac 01       	movw	r20, r24
     fe6:	41 55       	subi	r20, 0x51	; 81
     fe8:	5d 4f       	sbci	r21, 0xFD	; 253
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	9c 01       	movw	r18, r24
     ff0:	2e 5f       	subi	r18, 0xFE	; 254
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	ca 01       	movw	r24, r20
     ff6:	b9 01       	movw	r22, r18
     ff8:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
     ffc:	80 91 d7 02 	lds	r24, 0x02D7
    1000:	88 23       	and	r24, r24
    1002:	09 f0       	breq	.+2      	; 0x1006 <prvCheckPendingReadyList+0x8a>
    1004:	c1 cf       	rjmp	.-126    	; 0xf88 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    1006:	0f 90       	pop	r0
    1008:	0f 90       	pop	r0
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	08 95       	ret

00001010 <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	00 d0       	rcall	.+0      	; 0x1016 <prvCheckDelayedList+0x6>
    1016:	00 d0       	rcall	.+0      	; 0x1018 <prvCheckDelayedList+0x8>
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    101c:	0e 94 6d 15 	call	0x2ada	; 0x2ada <xTaskGetTickCount>
    1020:	20 91 ab 02 	lds	r18, 0x02AB
    1024:	30 91 ac 02 	lds	r19, 0x02AC
    1028:	82 1b       	sub	r24, r18
    102a:	93 0b       	sbc	r25, r19
    102c:	90 93 ae 02 	sts	0x02AE, r25
    1030:	80 93 ad 02 	sts	0x02AD, r24
    1034:	85 c0       	rjmp	.+266    	; 0x1140 <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    1036:	80 91 a9 02 	lds	r24, 0x02A9
    103a:	90 91 aa 02 	lds	r25, 0x02AA
    103e:	01 96       	adiw	r24, 0x01	; 1
    1040:	90 93 aa 02 	sts	0x02AA, r25
    1044:	80 93 a9 02 	sts	0x02A9, r24
		xPassedTicks--;
    1048:	80 91 ad 02 	lds	r24, 0x02AD
    104c:	90 91 ae 02 	lds	r25, 0x02AE
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	90 93 ae 02 	sts	0x02AE, r25
    1056:	80 93 ad 02 	sts	0x02AD, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    105a:	80 91 a9 02 	lds	r24, 0x02A9
    105e:	90 91 aa 02 	lds	r25, 0x02AA
    1062:	00 97       	sbiw	r24, 0x00	; 0
    1064:	09 f0       	breq	.+2      	; 0x1068 <prvCheckDelayedList+0x58>
    1066:	64 c0       	rjmp	.+200    	; 0x1130 <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    1068:	80 91 d3 02 	lds	r24, 0x02D3
    106c:	90 91 d4 02 	lds	r25, 0x02D4
    1070:	9a 83       	std	Y+2, r25	; 0x02
    1072:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    1074:	80 91 d5 02 	lds	r24, 0x02D5
    1078:	90 91 d6 02 	lds	r25, 0x02D6
    107c:	90 93 d4 02 	sts	0x02D4, r25
    1080:	80 93 d3 02 	sts	0x02D3, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	9a 81       	ldd	r25, Y+2	; 0x02
    1088:	90 93 d6 02 	sts	0x02D6, r25
    108c:	80 93 d5 02 	sts	0x02D5, r24
    1090:	4f c0       	rjmp	.+158    	; 0x1130 <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    1092:	e0 91 d3 02 	lds	r30, 0x02D3
    1096:	f0 91 d4 02 	lds	r31, 0x02D4
    109a:	05 80       	ldd	r0, Z+5	; 0x05
    109c:	f6 81       	ldd	r31, Z+6	; 0x06
    109e:	e0 2d       	mov	r30, r0
    10a0:	86 81       	ldd	r24, Z+6	; 0x06
    10a2:	97 81       	ldd	r25, Z+7	; 0x07
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    10a8:	eb 81       	ldd	r30, Y+3	; 0x03
    10aa:	fc 81       	ldd	r31, Y+4	; 0x04
    10ac:	22 81       	ldd	r18, Z+2	; 0x02
    10ae:	33 81       	ldd	r19, Z+3	; 0x03
    10b0:	80 91 a9 02 	lds	r24, 0x02A9
    10b4:	90 91 aa 02 	lds	r25, 0x02AA
    10b8:	82 17       	cp	r24, r18
    10ba:	93 07       	cpc	r25, r19
    10bc:	08 f4       	brcc	.+2      	; 0x10c0 <prvCheckDelayedList+0xb0>
    10be:	40 c0       	rjmp	.+128    	; 0x1140 <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    10c0:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	9c 81       	ldd	r25, Y+4	; 0x04
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    10cc:	eb 81       	ldd	r30, Y+3	; 0x03
    10ce:	fc 81       	ldd	r31, Y+4	; 0x04
    10d0:	84 89       	ldd	r24, Z+20	; 0x14
    10d2:	95 89       	ldd	r25, Z+21	; 0x15
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	29 f0       	breq	.+10     	; 0x10e2 <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	0c 96       	adiw	r24, 0x0c	; 12
    10de:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    10e2:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    10e4:	eb 81       	ldd	r30, Y+3	; 0x03
    10e6:	fc 81       	ldd	r31, Y+4	; 0x04
    10e8:	96 89       	ldd	r25, Z+22	; 0x16
    10ea:	80 91 a8 02 	lds	r24, 0x02A8
    10ee:	89 17       	cp	r24, r25
    10f0:	28 f4       	brcc	.+10     	; 0x10fc <prvCheckDelayedList+0xec>
    10f2:	eb 81       	ldd	r30, Y+3	; 0x03
    10f4:	fc 81       	ldd	r31, Y+4	; 0x04
    10f6:	86 89       	ldd	r24, Z+22	; 0x16
    10f8:	80 93 a8 02 	sts	0x02A8, r24
    10fc:	eb 81       	ldd	r30, Y+3	; 0x03
    10fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1100:	86 89       	ldd	r24, Z+22	; 0x16
    1102:	28 2f       	mov	r18, r24
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	c9 01       	movw	r24, r18
    1108:	88 0f       	add	r24, r24
    110a:	99 1f       	adc	r25, r25
    110c:	88 0f       	add	r24, r24
    110e:	99 1f       	adc	r25, r25
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	82 0f       	add	r24, r18
    1116:	93 1f       	adc	r25, r19
    1118:	ac 01       	movw	r20, r24
    111a:	41 55       	subi	r20, 0x51	; 81
    111c:	5d 4f       	sbci	r21, 0xFD	; 253
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	9c 01       	movw	r18, r24
    1124:	2e 5f       	subi	r18, 0xFE	; 254
    1126:	3f 4f       	sbci	r19, 0xFF	; 255
    1128:	ca 01       	movw	r24, r20
    112a:	b9 01       	movw	r22, r18
    112c:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    1130:	e0 91 d3 02 	lds	r30, 0x02D3
    1134:	f0 91 d4 02 	lds	r31, 0x02D4
    1138:	80 81       	ld	r24, Z
    113a:	88 23       	and	r24, r24
    113c:	09 f0       	breq	.+2      	; 0x1140 <prvCheckDelayedList+0x130>
    113e:	a9 cf       	rjmp	.-174    	; 0x1092 <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    1140:	80 91 ad 02 	lds	r24, 0x02AD
    1144:	90 91 ae 02 	lds	r25, 0x02AE
    1148:	00 97       	sbiw	r24, 0x00	; 0
    114a:	09 f0       	breq	.+2      	; 0x114e <prvCheckDelayedList+0x13e>
    114c:	74 cf       	rjmp	.-280    	; 0x1036 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    114e:	80 91 a9 02 	lds	r24, 0x02A9
    1152:	90 91 aa 02 	lds	r25, 0x02AA
    1156:	90 93 ac 02 	sts	0x02AC, r25
    115a:	80 93 ab 02 	sts	0x02AB, r24
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	00 d0       	rcall	.+0      	; 0x1172 <vCoRoutineSchedule+0x6>
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    1176:	0e 94 be 07 	call	0xf7c	; 0xf7c <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    117a:	0e 94 08 08 	call	0x1010	; 0x1010 <prvCheckDelayedList>
    117e:	0a c0       	rjmp	.+20     	; 0x1194 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    1180:	80 91 a8 02 	lds	r24, 0x02A8
    1184:	88 23       	and	r24, r24
    1186:	09 f4       	brne	.+2      	; 0x118a <vCoRoutineSchedule+0x1e>
    1188:	66 c0       	rjmp	.+204    	; 0x1256 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    118a:	80 91 a8 02 	lds	r24, 0x02A8
    118e:	81 50       	subi	r24, 0x01	; 1
    1190:	80 93 a8 02 	sts	0x02A8, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    1194:	80 91 a8 02 	lds	r24, 0x02A8
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	c9 01       	movw	r24, r18
    119e:	88 0f       	add	r24, r24
    11a0:	99 1f       	adc	r25, r25
    11a2:	88 0f       	add	r24, r24
    11a4:	99 1f       	adc	r25, r25
    11a6:	88 0f       	add	r24, r24
    11a8:	99 1f       	adc	r25, r25
    11aa:	82 0f       	add	r24, r18
    11ac:	93 1f       	adc	r25, r19
    11ae:	fc 01       	movw	r30, r24
    11b0:	e1 55       	subi	r30, 0x51	; 81
    11b2:	fd 4f       	sbci	r31, 0xFD	; 253
    11b4:	80 81       	ld	r24, Z
    11b6:	88 23       	and	r24, r24
    11b8:	19 f3       	breq	.-58     	; 0x1180 <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    11ba:	80 91 a8 02 	lds	r24, 0x02A8
    11be:	28 2f       	mov	r18, r24
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	c9 01       	movw	r24, r18
    11c4:	88 0f       	add	r24, r24
    11c6:	99 1f       	adc	r25, r25
    11c8:	88 0f       	add	r24, r24
    11ca:	99 1f       	adc	r25, r25
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	82 0f       	add	r24, r18
    11d2:	93 1f       	adc	r25, r19
    11d4:	81 55       	subi	r24, 0x51	; 81
    11d6:	9d 4f       	sbci	r25, 0xFD	; 253
    11d8:	9a 83       	std	Y+2, r25	; 0x02
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	01 80       	ldd	r0, Z+1	; 0x01
    11e2:	f2 81       	ldd	r31, Z+2	; 0x02
    11e4:	e0 2d       	mov	r30, r0
    11e6:	82 81       	ldd	r24, Z+2	; 0x02
    11e8:	93 81       	ldd	r25, Z+3	; 0x03
    11ea:	e9 81       	ldd	r30, Y+1	; 0x01
    11ec:	fa 81       	ldd	r31, Y+2	; 0x02
    11ee:	92 83       	std	Z+2, r25	; 0x02
    11f0:	81 83       	std	Z+1, r24	; 0x01
    11f2:	e9 81       	ldd	r30, Y+1	; 0x01
    11f4:	fa 81       	ldd	r31, Y+2	; 0x02
    11f6:	21 81       	ldd	r18, Z+1	; 0x01
    11f8:	32 81       	ldd	r19, Z+2	; 0x02
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	03 96       	adiw	r24, 0x03	; 3
    1200:	28 17       	cp	r18, r24
    1202:	39 07       	cpc	r19, r25
    1204:	59 f4       	brne	.+22     	; 0x121c <vCoRoutineSchedule+0xb0>
    1206:	e9 81       	ldd	r30, Y+1	; 0x01
    1208:	fa 81       	ldd	r31, Y+2	; 0x02
    120a:	01 80       	ldd	r0, Z+1	; 0x01
    120c:	f2 81       	ldd	r31, Z+2	; 0x02
    120e:	e0 2d       	mov	r30, r0
    1210:	82 81       	ldd	r24, Z+2	; 0x02
    1212:	93 81       	ldd	r25, Z+3	; 0x03
    1214:	e9 81       	ldd	r30, Y+1	; 0x01
    1216:	fa 81       	ldd	r31, Y+2	; 0x02
    1218:	92 83       	std	Z+2, r25	; 0x02
    121a:	81 83       	std	Z+1, r24	; 0x01
    121c:	e9 81       	ldd	r30, Y+1	; 0x01
    121e:	fa 81       	ldd	r31, Y+2	; 0x02
    1220:	01 80       	ldd	r0, Z+1	; 0x01
    1222:	f2 81       	ldd	r31, Z+2	; 0x02
    1224:	e0 2d       	mov	r30, r0
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	97 81       	ldd	r25, Z+7	; 0x07
    122a:	90 93 a7 02 	sts	0x02A7, r25
    122e:	80 93 a6 02 	sts	0x02A6, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    1232:	e0 91 a6 02 	lds	r30, 0x02A6
    1236:	f0 91 a7 02 	lds	r31, 0x02A7
    123a:	40 81       	ld	r20, Z
    123c:	51 81       	ldd	r21, Z+1	; 0x01
    123e:	80 91 a6 02 	lds	r24, 0x02A6
    1242:	90 91 a7 02 	lds	r25, 0x02A7
    1246:	e0 91 a6 02 	lds	r30, 0x02A6
    124a:	f0 91 a7 02 	lds	r31, 0x02A7
    124e:	27 89       	ldd	r18, Z+23	; 0x17
    1250:	62 2f       	mov	r22, r18
    1252:	fa 01       	movw	r30, r20
    1254:	09 95       	icall

	return;
}
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	0f 92       	push	r0
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    126a:	19 82       	std	Y+1, r1	; 0x01
    126c:	13 c0       	rjmp	.+38     	; 0x1294 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	28 2f       	mov	r18, r24
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	c9 01       	movw	r24, r18
    1276:	88 0f       	add	r24, r24
    1278:	99 1f       	adc	r25, r25
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	88 0f       	add	r24, r24
    1280:	99 1f       	adc	r25, r25
    1282:	82 0f       	add	r24, r18
    1284:	93 1f       	adc	r25, r19
    1286:	81 55       	subi	r24, 0x51	; 81
    1288:	9d 4f       	sbci	r25, 0xFD	; 253
    128a:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    128e:	89 81       	ldd	r24, Y+1	; 0x01
    1290:	8f 5f       	subi	r24, 0xFF	; 255
    1292:	89 83       	std	Y+1, r24	; 0x01
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	82 30       	cpi	r24, 0x02	; 2
    1298:	50 f3       	brcs	.-44     	; 0x126e <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    129a:	81 ec       	ldi	r24, 0xC1	; 193
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    12a2:	8a ec       	ldi	r24, 0xCA	; 202
    12a4:	92 e0       	ldi	r25, 0x02	; 2
    12a6:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    12aa:	87 ed       	ldi	r24, 0xD7	; 215
    12ac:	92 e0       	ldi	r25, 0x02	; 2
    12ae:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    12b2:	81 ec       	ldi	r24, 0xC1	; 193
    12b4:	92 e0       	ldi	r25, 0x02	; 2
    12b6:	90 93 d4 02 	sts	0x02D4, r25
    12ba:	80 93 d3 02 	sts	0x02D3, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    12be:	8a ec       	ldi	r24, 0xCA	; 202
    12c0:	92 e0       	ldi	r25, 0x02	; 2
    12c2:	90 93 d6 02 	sts	0x02D6, r25
    12c6:	80 93 d5 02 	sts	0x02D5, r24
}
    12ca:	0f 90       	pop	r0
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	00 d0       	rcall	.+0      	; 0x12d8 <xCoRoutineRemoveFromEventList+0x6>
    12d8:	00 d0       	rcall	.+0      	; 0x12da <xCoRoutineRemoveFromEventList+0x8>
    12da:	0f 92       	push	r0
    12dc:	cd b7       	in	r28, 0x3d	; 61
    12de:	de b7       	in	r29, 0x3e	; 62
    12e0:	9d 83       	std	Y+5, r25	; 0x05
    12e2:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    12e4:	ec 81       	ldd	r30, Y+4	; 0x04
    12e6:	fd 81       	ldd	r31, Y+5	; 0x05
    12e8:	05 80       	ldd	r0, Z+5	; 0x05
    12ea:	f6 81       	ldd	r31, Z+6	; 0x06
    12ec:	e0 2d       	mov	r30, r0
    12ee:	86 81       	ldd	r24, Z+6	; 0x06
    12f0:	97 81       	ldd	r25, Z+7	; 0x07
    12f2:	9b 83       	std	Y+3, r25	; 0x03
    12f4:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	0c 96       	adiw	r24, 0x0c	; 12
    12fc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	9b 81       	ldd	r25, Y+3	; 0x03
    1304:	9c 01       	movw	r18, r24
    1306:	24 5f       	subi	r18, 0xF4	; 244
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	87 ed       	ldi	r24, 0xD7	; 215
    130c:	92 e0       	ldi	r25, 0x02	; 2
    130e:	b9 01       	movw	r22, r18
    1310:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    1314:	ea 81       	ldd	r30, Y+2	; 0x02
    1316:	fb 81       	ldd	r31, Y+3	; 0x03
    1318:	96 89       	ldd	r25, Z+22	; 0x16
    131a:	e0 91 a6 02 	lds	r30, 0x02A6
    131e:	f0 91 a7 02 	lds	r31, 0x02A7
    1322:	86 89       	ldd	r24, Z+22	; 0x16
    1324:	98 17       	cp	r25, r24
    1326:	18 f0       	brcs	.+6      	; 0x132e <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	89 83       	std	Y+1, r24	; 0x01
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    132e:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    1330:	89 81       	ldd	r24, Y+1	; 0x01
}
    1332:	0f 90       	pop	r0
    1334:	0f 90       	pop	r0
    1336:	0f 90       	pop	r0
    1338:	0f 90       	pop	r0
    133a:	0f 90       	pop	r0
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	00 d0       	rcall	.+0      	; 0x1348 <pvPortMalloc+0x6>
    1348:	00 d0       	rcall	.+0      	; 0x134a <pvPortMalloc+0x8>
    134a:	cd b7       	in	r28, 0x3d	; 61
    134c:	de b7       	in	r29, 0x3e	; 62
    134e:	9c 83       	std	Y+4, r25	; 0x04
    1350:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    1352:	1a 82       	std	Y+2, r1	; 0x02
    1354:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    1356:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    135a:	80 91 e0 02 	lds	r24, 0x02E0
    135e:	90 91 e1 02 	lds	r25, 0x02E1
    1362:	2b 81       	ldd	r18, Y+3	; 0x03
    1364:	3c 81       	ldd	r19, Y+4	; 0x04
    1366:	82 0f       	add	r24, r18
    1368:	93 1f       	adc	r25, r19
    136a:	23 e0       	ldi	r18, 0x03	; 3
    136c:	88 3e       	cpi	r24, 0xE8	; 232
    136e:	92 07       	cpc	r25, r18
    1370:	18 f5       	brcc	.+70     	; 0x13b8 <pvPortMalloc+0x76>
    1372:	20 91 e0 02 	lds	r18, 0x02E0
    1376:	30 91 e1 02 	lds	r19, 0x02E1
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	28 0f       	add	r18, r24
    1380:	39 1f       	adc	r19, r25
    1382:	80 91 e0 02 	lds	r24, 0x02E0
    1386:	90 91 e1 02 	lds	r25, 0x02E1
    138a:	82 17       	cp	r24, r18
    138c:	93 07       	cpc	r25, r19
    138e:	a0 f4       	brcc	.+40     	; 0x13b8 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    1390:	80 91 e0 02 	lds	r24, 0x02E0
    1394:	90 91 e1 02 	lds	r25, 0x02E1
    1398:	8e 51       	subi	r24, 0x1E	; 30
    139a:	9d 4f       	sbci	r25, 0xFD	; 253
    139c:	9a 83       	std	Y+2, r25	; 0x02
    139e:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    13a0:	20 91 e0 02 	lds	r18, 0x02E0
    13a4:	30 91 e1 02 	lds	r19, 0x02E1
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	82 0f       	add	r24, r18
    13ae:	93 1f       	adc	r25, r19
    13b0:	90 93 e1 02 	sts	0x02E1, r25
    13b4:	80 93 e0 02 	sts	0x02E0, r24
		}	
	}
	xTaskResumeAll();
    13b8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    13bc:	89 81       	ldd	r24, Y+1	; 0x01
    13be:	9a 81       	ldd	r25, Y+2	; 0x02
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	cf 91       	pop	r28
    13ca:	df 91       	pop	r29
    13cc:	08 95       	ret

000013ce <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    13ce:	df 93       	push	r29
    13d0:	cf 93       	push	r28
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <vPortFree+0x6>
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	9a 83       	std	Y+2, r25	; 0x02
    13da:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    13ee:	10 92 e1 02 	sts	0x02E1, r1
    13f2:	10 92 e0 02 	sts	0x02E0, r1
}
    13f6:	cf 91       	pop	r28
    13f8:	df 91       	pop	r29
    13fa:	08 95       	ret

000013fc <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    13fc:	df 93       	push	r29
    13fe:	cf 93       	push	r28
    1400:	cd b7       	in	r28, 0x3d	; 61
    1402:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    1404:	20 91 e0 02 	lds	r18, 0x02E0
    1408:	30 91 e1 02 	lds	r19, 0x02E1
    140c:	88 ee       	ldi	r24, 0xE8	; 232
    140e:	93 e0       	ldi	r25, 0x03	; 3
    1410:	82 1b       	sub	r24, r18
    1412:	93 0b       	sbc	r25, r19
}
    1414:	cf 91       	pop	r28
    1416:	df 91       	pop	r29
    1418:	08 95       	ret

0000141a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    141a:	df 93       	push	r29
    141c:	cf 93       	push	r28
    141e:	00 d0       	rcall	.+0      	; 0x1420 <vListInitialise+0x6>
    1420:	cd b7       	in	r28, 0x3d	; 61
    1422:	de b7       	in	r29, 0x3e	; 62
    1424:	9a 83       	std	Y+2, r25	; 0x02
    1426:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    1428:	89 81       	ldd	r24, Y+1	; 0x01
    142a:	9a 81       	ldd	r25, Y+2	; 0x02
    142c:	03 96       	adiw	r24, 0x03	; 3
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	92 83       	std	Z+2, r25	; 0x02
    1434:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1436:	e9 81       	ldd	r30, Y+1	; 0x01
    1438:	fa 81       	ldd	r31, Y+2	; 0x02
    143a:	8f ef       	ldi	r24, 0xFF	; 255
    143c:	9f ef       	ldi	r25, 0xFF	; 255
    143e:	94 83       	std	Z+4, r25	; 0x04
    1440:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    1442:	89 81       	ldd	r24, Y+1	; 0x01
    1444:	9a 81       	ldd	r25, Y+2	; 0x02
    1446:	03 96       	adiw	r24, 0x03	; 3
    1448:	e9 81       	ldd	r30, Y+1	; 0x01
    144a:	fa 81       	ldd	r31, Y+2	; 0x02
    144c:	96 83       	std	Z+6, r25	; 0x06
    144e:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    1450:	89 81       	ldd	r24, Y+1	; 0x01
    1452:	9a 81       	ldd	r25, Y+2	; 0x02
    1454:	03 96       	adiw	r24, 0x03	; 3
    1456:	e9 81       	ldd	r30, Y+1	; 0x01
    1458:	fa 81       	ldd	r31, Y+2	; 0x02
    145a:	90 87       	std	Z+8, r25	; 0x08
    145c:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    145e:	e9 81       	ldd	r30, Y+1	; 0x01
    1460:	fa 81       	ldd	r31, Y+2	; 0x02
    1462:	10 82       	st	Z, r1
}
    1464:	0f 90       	pop	r0
    1466:	0f 90       	pop	r0
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	00 d0       	rcall	.+0      	; 0x1474 <vListInitialiseItem+0x6>
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9a 83       	std	Y+2, r25	; 0x02
    147a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    147c:	e9 81       	ldd	r30, Y+1	; 0x01
    147e:	fa 81       	ldd	r31, Y+2	; 0x02
    1480:	11 86       	std	Z+9, r1	; 0x09
    1482:	10 86       	std	Z+8, r1	; 0x08
}
    1484:	0f 90       	pop	r0
    1486:	0f 90       	pop	r0
    1488:	cf 91       	pop	r28
    148a:	df 91       	pop	r29
    148c:	08 95       	ret

0000148e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    148e:	df 93       	push	r29
    1490:	cf 93       	push	r28
    1492:	00 d0       	rcall	.+0      	; 0x1494 <vListInsertEnd+0x6>
    1494:	00 d0       	rcall	.+0      	; 0x1496 <vListInsertEnd+0x8>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <vListInsertEnd+0xa>
    1498:	cd b7       	in	r28, 0x3d	; 61
    149a:	de b7       	in	r29, 0x3e	; 62
    149c:	9c 83       	std	Y+4, r25	; 0x04
    149e:	8b 83       	std	Y+3, r24	; 0x03
    14a0:	7e 83       	std	Y+6, r23	; 0x06
    14a2:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    14a4:	eb 81       	ldd	r30, Y+3	; 0x03
    14a6:	fc 81       	ldd	r31, Y+4	; 0x04
    14a8:	81 81       	ldd	r24, Z+1	; 0x01
    14aa:	92 81       	ldd	r25, Z+2	; 0x02
    14ac:	9a 83       	std	Y+2, r25	; 0x02
    14ae:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    14b0:	e9 81       	ldd	r30, Y+1	; 0x01
    14b2:	fa 81       	ldd	r31, Y+2	; 0x02
    14b4:	82 81       	ldd	r24, Z+2	; 0x02
    14b6:	93 81       	ldd	r25, Z+3	; 0x03
    14b8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ba:	fe 81       	ldd	r31, Y+6	; 0x06
    14bc:	93 83       	std	Z+3, r25	; 0x03
    14be:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    14c0:	eb 81       	ldd	r30, Y+3	; 0x03
    14c2:	fc 81       	ldd	r31, Y+4	; 0x04
    14c4:	81 81       	ldd	r24, Z+1	; 0x01
    14c6:	92 81       	ldd	r25, Z+2	; 0x02
    14c8:	ed 81       	ldd	r30, Y+5	; 0x05
    14ca:	fe 81       	ldd	r31, Y+6	; 0x06
    14cc:	95 83       	std	Z+5, r25	; 0x05
    14ce:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    14d0:	e9 81       	ldd	r30, Y+1	; 0x01
    14d2:	fa 81       	ldd	r31, Y+2	; 0x02
    14d4:	02 80       	ldd	r0, Z+2	; 0x02
    14d6:	f3 81       	ldd	r31, Z+3	; 0x03
    14d8:	e0 2d       	mov	r30, r0
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	9e 81       	ldd	r25, Y+6	; 0x06
    14de:	95 83       	std	Z+5, r25	; 0x05
    14e0:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	e9 81       	ldd	r30, Y+1	; 0x01
    14e8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ea:	93 83       	std	Z+3, r25	; 0x03
    14ec:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    14ee:	8d 81       	ldd	r24, Y+5	; 0x05
    14f0:	9e 81       	ldd	r25, Y+6	; 0x06
    14f2:	eb 81       	ldd	r30, Y+3	; 0x03
    14f4:	fc 81       	ldd	r31, Y+4	; 0x04
    14f6:	92 83       	std	Z+2, r25	; 0x02
    14f8:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    14fa:	ed 81       	ldd	r30, Y+5	; 0x05
    14fc:	fe 81       	ldd	r31, Y+6	; 0x06
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	91 87       	std	Z+9, r25	; 0x09
    1504:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	80 81       	ld	r24, Z
    150c:	8f 5f       	subi	r24, 0xFF	; 255
    150e:	eb 81       	ldd	r30, Y+3	; 0x03
    1510:	fc 81       	ldd	r31, Y+4	; 0x04
    1512:	80 83       	st	Z, r24
}
    1514:	26 96       	adiw	r28, 0x06	; 6
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	cf 91       	pop	r28
    1522:	df 91       	pop	r29
    1524:	08 95       	ret

00001526 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	28 97       	sbiw	r28, 0x08	; 8
    1530:	0f b6       	in	r0, 0x3f	; 63
    1532:	f8 94       	cli
    1534:	de bf       	out	0x3e, r29	; 62
    1536:	0f be       	out	0x3f, r0	; 63
    1538:	cd bf       	out	0x3d, r28	; 61
    153a:	9e 83       	std	Y+6, r25	; 0x06
    153c:	8d 83       	std	Y+5, r24	; 0x05
    153e:	78 87       	std	Y+8, r23	; 0x08
    1540:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    1542:	ef 81       	ldd	r30, Y+7	; 0x07
    1544:	f8 85       	ldd	r31, Y+8	; 0x08
    1546:	80 81       	ld	r24, Z
    1548:	91 81       	ldd	r25, Z+1	; 0x01
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	9a 81       	ldd	r25, Y+2	; 0x02
    1552:	2f ef       	ldi	r18, 0xFF	; 255
    1554:	8f 3f       	cpi	r24, 0xFF	; 255
    1556:	92 07       	cpc	r25, r18
    1558:	39 f4       	brne	.+14     	; 0x1568 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    155a:	ed 81       	ldd	r30, Y+5	; 0x05
    155c:	fe 81       	ldd	r31, Y+6	; 0x06
    155e:	87 81       	ldd	r24, Z+7	; 0x07
    1560:	90 85       	ldd	r25, Z+8	; 0x08
    1562:	9c 83       	std	Y+4, r25	; 0x04
    1564:	8b 83       	std	Y+3, r24	; 0x03
    1566:	18 c0       	rjmp	.+48     	; 0x1598 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    1568:	8d 81       	ldd	r24, Y+5	; 0x05
    156a:	9e 81       	ldd	r25, Y+6	; 0x06
    156c:	03 96       	adiw	r24, 0x03	; 3
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	06 c0       	rjmp	.+12     	; 0x1580 <vListInsert+0x5a>
    1574:	eb 81       	ldd	r30, Y+3	; 0x03
    1576:	fc 81       	ldd	r31, Y+4	; 0x04
    1578:	82 81       	ldd	r24, Z+2	; 0x02
    157a:	93 81       	ldd	r25, Z+3	; 0x03
    157c:	9c 83       	std	Y+4, r25	; 0x04
    157e:	8b 83       	std	Y+3, r24	; 0x03
    1580:	eb 81       	ldd	r30, Y+3	; 0x03
    1582:	fc 81       	ldd	r31, Y+4	; 0x04
    1584:	02 80       	ldd	r0, Z+2	; 0x02
    1586:	f3 81       	ldd	r31, Z+3	; 0x03
    1588:	e0 2d       	mov	r30, r0
    158a:	20 81       	ld	r18, Z
    158c:	31 81       	ldd	r19, Z+1	; 0x01
    158e:	89 81       	ldd	r24, Y+1	; 0x01
    1590:	9a 81       	ldd	r25, Y+2	; 0x02
    1592:	82 17       	cp	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	70 f7       	brcc	.-36     	; 0x1574 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1598:	eb 81       	ldd	r30, Y+3	; 0x03
    159a:	fc 81       	ldd	r31, Y+4	; 0x04
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	93 81       	ldd	r25, Z+3	; 0x03
    15a0:	ef 81       	ldd	r30, Y+7	; 0x07
    15a2:	f8 85       	ldd	r31, Y+8	; 0x08
    15a4:	93 83       	std	Z+3, r25	; 0x03
    15a6:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    15a8:	ef 81       	ldd	r30, Y+7	; 0x07
    15aa:	f8 85       	ldd	r31, Y+8	; 0x08
    15ac:	02 80       	ldd	r0, Z+2	; 0x02
    15ae:	f3 81       	ldd	r31, Z+3	; 0x03
    15b0:	e0 2d       	mov	r30, r0
    15b2:	8f 81       	ldd	r24, Y+7	; 0x07
    15b4:	98 85       	ldd	r25, Y+8	; 0x08
    15b6:	95 83       	std	Z+5, r25	; 0x05
    15b8:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    15ba:	ef 81       	ldd	r30, Y+7	; 0x07
    15bc:	f8 85       	ldd	r31, Y+8	; 0x08
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	95 83       	std	Z+5, r25	; 0x05
    15c4:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    15c6:	8f 81       	ldd	r24, Y+7	; 0x07
    15c8:	98 85       	ldd	r25, Y+8	; 0x08
    15ca:	eb 81       	ldd	r30, Y+3	; 0x03
    15cc:	fc 81       	ldd	r31, Y+4	; 0x04
    15ce:	93 83       	std	Z+3, r25	; 0x03
    15d0:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    15d2:	ef 81       	ldd	r30, Y+7	; 0x07
    15d4:	f8 85       	ldd	r31, Y+8	; 0x08
    15d6:	8d 81       	ldd	r24, Y+5	; 0x05
    15d8:	9e 81       	ldd	r25, Y+6	; 0x06
    15da:	91 87       	std	Z+9, r25	; 0x09
    15dc:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    15de:	ed 81       	ldd	r30, Y+5	; 0x05
    15e0:	fe 81       	ldd	r31, Y+6	; 0x06
    15e2:	80 81       	ld	r24, Z
    15e4:	8f 5f       	subi	r24, 0xFF	; 255
    15e6:	ed 81       	ldd	r30, Y+5	; 0x05
    15e8:	fe 81       	ldd	r31, Y+6	; 0x06
    15ea:	80 83       	st	Z, r24
}
    15ec:	28 96       	adiw	r28, 0x08	; 8
    15ee:	0f b6       	in	r0, 0x3f	; 63
    15f0:	f8 94       	cli
    15f2:	de bf       	out	0x3e, r29	; 62
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	cd bf       	out	0x3d, r28	; 61
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	00 d0       	rcall	.+0      	; 0x1604 <vListRemove+0x6>
    1604:	00 d0       	rcall	.+0      	; 0x1606 <vListRemove+0x8>
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    160e:	eb 81       	ldd	r30, Y+3	; 0x03
    1610:	fc 81       	ldd	r31, Y+4	; 0x04
    1612:	a2 81       	ldd	r26, Z+2	; 0x02
    1614:	b3 81       	ldd	r27, Z+3	; 0x03
    1616:	eb 81       	ldd	r30, Y+3	; 0x03
    1618:	fc 81       	ldd	r31, Y+4	; 0x04
    161a:	84 81       	ldd	r24, Z+4	; 0x04
    161c:	95 81       	ldd	r25, Z+5	; 0x05
    161e:	15 96       	adiw	r26, 0x05	; 5
    1620:	9c 93       	st	X, r25
    1622:	8e 93       	st	-X, r24
    1624:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1626:	eb 81       	ldd	r30, Y+3	; 0x03
    1628:	fc 81       	ldd	r31, Y+4	; 0x04
    162a:	a4 81       	ldd	r26, Z+4	; 0x04
    162c:	b5 81       	ldd	r27, Z+5	; 0x05
    162e:	eb 81       	ldd	r30, Y+3	; 0x03
    1630:	fc 81       	ldd	r31, Y+4	; 0x04
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	13 96       	adiw	r26, 0x03	; 3
    1638:	9c 93       	st	X, r25
    163a:	8e 93       	st	-X, r24
    163c:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    163e:	eb 81       	ldd	r30, Y+3	; 0x03
    1640:	fc 81       	ldd	r31, Y+4	; 0x04
    1642:	80 85       	ldd	r24, Z+8	; 0x08
    1644:	91 85       	ldd	r25, Z+9	; 0x09
    1646:	9a 83       	std	Y+2, r25	; 0x02
    1648:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    164a:	e9 81       	ldd	r30, Y+1	; 0x01
    164c:	fa 81       	ldd	r31, Y+2	; 0x02
    164e:	21 81       	ldd	r18, Z+1	; 0x01
    1650:	32 81       	ldd	r19, Z+2	; 0x02
    1652:	8b 81       	ldd	r24, Y+3	; 0x03
    1654:	9c 81       	ldd	r25, Y+4	; 0x04
    1656:	28 17       	cp	r18, r24
    1658:	39 07       	cpc	r19, r25
    165a:	41 f4       	brne	.+16     	; 0x166c <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    165c:	eb 81       	ldd	r30, Y+3	; 0x03
    165e:	fc 81       	ldd	r31, Y+4	; 0x04
    1660:	84 81       	ldd	r24, Z+4	; 0x04
    1662:	95 81       	ldd	r25, Z+5	; 0x05
    1664:	e9 81       	ldd	r30, Y+1	; 0x01
    1666:	fa 81       	ldd	r31, Y+2	; 0x02
    1668:	92 83       	std	Z+2, r25	; 0x02
    166a:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    166c:	eb 81       	ldd	r30, Y+3	; 0x03
    166e:	fc 81       	ldd	r31, Y+4	; 0x04
    1670:	11 86       	std	Z+9, r1	; 0x09
    1672:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1674:	e9 81       	ldd	r30, Y+1	; 0x01
    1676:	fa 81       	ldd	r31, Y+2	; 0x02
    1678:	80 81       	ld	r24, Z
    167a:	81 50       	subi	r24, 0x01	; 1
    167c:	e9 81       	ldd	r30, Y+1	; 0x01
    167e:	fa 81       	ldd	r31, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	28 97       	sbiw	r28, 0x08	; 8
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	8b 83       	std	Y+3, r24	; 0x03
    16a8:	7e 83       	std	Y+6, r23	; 0x06
    16aa:	6d 83       	std	Y+5, r22	; 0x05
    16ac:	58 87       	std	Y+8, r21	; 0x08
    16ae:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    16b0:	eb 81       	ldd	r30, Y+3	; 0x03
    16b2:	fc 81       	ldd	r31, Y+4	; 0x04
    16b4:	81 e1       	ldi	r24, 0x11	; 17
    16b6:	80 83       	st	Z, r24
	pxTopOfStack--;
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    16c2:	eb 81       	ldd	r30, Y+3	; 0x03
    16c4:	fc 81       	ldd	r31, Y+4	; 0x04
    16c6:	82 e2       	ldi	r24, 0x22	; 34
    16c8:	80 83       	st	Z, r24
	pxTopOfStack--;
    16ca:	8b 81       	ldd	r24, Y+3	; 0x03
    16cc:	9c 81       	ldd	r25, Y+4	; 0x04
    16ce:	01 97       	sbiw	r24, 0x01	; 1
    16d0:	9c 83       	std	Y+4, r25	; 0x04
    16d2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    16d4:	eb 81       	ldd	r30, Y+3	; 0x03
    16d6:	fc 81       	ldd	r31, Y+4	; 0x04
    16d8:	83 e3       	ldi	r24, 0x33	; 51
    16da:	80 83       	st	Z, r24
	pxTopOfStack--;
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	9c 83       	std	Y+4, r25	; 0x04
    16e4:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    16e6:	8d 81       	ldd	r24, Y+5	; 0x05
    16e8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ea:	9a 83       	std	Y+2, r25	; 0x02
    16ec:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	eb 81       	ldd	r30, Y+3	; 0x03
    16f2:	fc 81       	ldd	r31, Y+4	; 0x04
    16f4:	80 83       	st	Z, r24
	pxTopOfStack--;
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9c 83       	std	Y+4, r25	; 0x04
    16fe:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	9a 81       	ldd	r25, Y+2	; 0x02
    1704:	89 2f       	mov	r24, r25
    1706:	99 27       	eor	r25, r25
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	eb 81       	ldd	r30, Y+3	; 0x03
    1710:	fc 81       	ldd	r31, Y+4	; 0x04
    1712:	80 83       	st	Z, r24
	pxTopOfStack--;
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9c 83       	std	Y+4, r25	; 0x04
    171c:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    171e:	eb 81       	ldd	r30, Y+3	; 0x03
    1720:	fc 81       	ldd	r31, Y+4	; 0x04
    1722:	10 82       	st	Z, r1
	pxTopOfStack--;
    1724:	8b 81       	ldd	r24, Y+3	; 0x03
    1726:	9c 81       	ldd	r25, Y+4	; 0x04
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	9c 83       	std	Y+4, r25	; 0x04
    172c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    172e:	eb 81       	ldd	r30, Y+3	; 0x03
    1730:	fc 81       	ldd	r31, Y+4	; 0x04
    1732:	80 e8       	ldi	r24, 0x80	; 128
    1734:	80 83       	st	Z, r24
	pxTopOfStack--;
    1736:	8b 81       	ldd	r24, Y+3	; 0x03
    1738:	9c 81       	ldd	r25, Y+4	; 0x04
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	9c 83       	std	Y+4, r25	; 0x04
    173e:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    1740:	eb 81       	ldd	r30, Y+3	; 0x03
    1742:	fc 81       	ldd	r31, Y+4	; 0x04
    1744:	10 82       	st	Z, r1
	pxTopOfStack--;
    1746:	8b 81       	ldd	r24, Y+3	; 0x03
    1748:	9c 81       	ldd	r25, Y+4	; 0x04
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9c 83       	std	Y+4, r25	; 0x04
    174e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    1750:	eb 81       	ldd	r30, Y+3	; 0x03
    1752:	fc 81       	ldd	r31, Y+4	; 0x04
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	80 83       	st	Z, r24
	pxTopOfStack--;
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    1762:	eb 81       	ldd	r30, Y+3	; 0x03
    1764:	fc 81       	ldd	r31, Y+4	; 0x04
    1766:	83 e0       	ldi	r24, 0x03	; 3
    1768:	80 83       	st	Z, r24
	pxTopOfStack--;
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	9c 81       	ldd	r25, Y+4	; 0x04
    176e:	01 97       	sbiw	r24, 0x01	; 1
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    1774:	eb 81       	ldd	r30, Y+3	; 0x03
    1776:	fc 81       	ldd	r31, Y+4	; 0x04
    1778:	84 e0       	ldi	r24, 0x04	; 4
    177a:	80 83       	st	Z, r24
	pxTopOfStack--;
    177c:	8b 81       	ldd	r24, Y+3	; 0x03
    177e:	9c 81       	ldd	r25, Y+4	; 0x04
    1780:	01 97       	sbiw	r24, 0x01	; 1
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    1786:	eb 81       	ldd	r30, Y+3	; 0x03
    1788:	fc 81       	ldd	r31, Y+4	; 0x04
    178a:	85 e0       	ldi	r24, 0x05	; 5
    178c:	80 83       	st	Z, r24
	pxTopOfStack--;
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	01 97       	sbiw	r24, 0x01	; 1
    1794:	9c 83       	std	Y+4, r25	; 0x04
    1796:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    1798:	eb 81       	ldd	r30, Y+3	; 0x03
    179a:	fc 81       	ldd	r31, Y+4	; 0x04
    179c:	86 e0       	ldi	r24, 0x06	; 6
    179e:	80 83       	st	Z, r24
	pxTopOfStack--;
    17a0:	8b 81       	ldd	r24, Y+3	; 0x03
    17a2:	9c 81       	ldd	r25, Y+4	; 0x04
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	9c 83       	std	Y+4, r25	; 0x04
    17a8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    17aa:	eb 81       	ldd	r30, Y+3	; 0x03
    17ac:	fc 81       	ldd	r31, Y+4	; 0x04
    17ae:	87 e0       	ldi	r24, 0x07	; 7
    17b0:	80 83       	st	Z, r24
	pxTopOfStack--;
    17b2:	8b 81       	ldd	r24, Y+3	; 0x03
    17b4:	9c 81       	ldd	r25, Y+4	; 0x04
    17b6:	01 97       	sbiw	r24, 0x01	; 1
    17b8:	9c 83       	std	Y+4, r25	; 0x04
    17ba:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    17bc:	eb 81       	ldd	r30, Y+3	; 0x03
    17be:	fc 81       	ldd	r31, Y+4	; 0x04
    17c0:	88 e0       	ldi	r24, 0x08	; 8
    17c2:	80 83       	st	Z, r24
	pxTopOfStack--;
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	9c 81       	ldd	r25, Y+4	; 0x04
    17c8:	01 97       	sbiw	r24, 0x01	; 1
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    17ce:	eb 81       	ldd	r30, Y+3	; 0x03
    17d0:	fc 81       	ldd	r31, Y+4	; 0x04
    17d2:	89 e0       	ldi	r24, 0x09	; 9
    17d4:	80 83       	st	Z, r24
	pxTopOfStack--;
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	9c 83       	std	Y+4, r25	; 0x04
    17de:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    17e0:	eb 81       	ldd	r30, Y+3	; 0x03
    17e2:	fc 81       	ldd	r31, Y+4	; 0x04
    17e4:	80 e1       	ldi	r24, 0x10	; 16
    17e6:	80 83       	st	Z, r24
	pxTopOfStack--;
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	9c 81       	ldd	r25, Y+4	; 0x04
    17ec:	01 97       	sbiw	r24, 0x01	; 1
    17ee:	9c 83       	std	Y+4, r25	; 0x04
    17f0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    17f2:	eb 81       	ldd	r30, Y+3	; 0x03
    17f4:	fc 81       	ldd	r31, Y+4	; 0x04
    17f6:	81 e1       	ldi	r24, 0x11	; 17
    17f8:	80 83       	st	Z, r24
	pxTopOfStack--;
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	9c 81       	ldd	r25, Y+4	; 0x04
    17fe:	01 97       	sbiw	r24, 0x01	; 1
    1800:	9c 83       	std	Y+4, r25	; 0x04
    1802:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    1804:	eb 81       	ldd	r30, Y+3	; 0x03
    1806:	fc 81       	ldd	r31, Y+4	; 0x04
    1808:	82 e1       	ldi	r24, 0x12	; 18
    180a:	80 83       	st	Z, r24
	pxTopOfStack--;
    180c:	8b 81       	ldd	r24, Y+3	; 0x03
    180e:	9c 81       	ldd	r25, Y+4	; 0x04
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	9c 83       	std	Y+4, r25	; 0x04
    1814:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    1816:	eb 81       	ldd	r30, Y+3	; 0x03
    1818:	fc 81       	ldd	r31, Y+4	; 0x04
    181a:	83 e1       	ldi	r24, 0x13	; 19
    181c:	80 83       	st	Z, r24
	pxTopOfStack--;
    181e:	8b 81       	ldd	r24, Y+3	; 0x03
    1820:	9c 81       	ldd	r25, Y+4	; 0x04
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9c 83       	std	Y+4, r25	; 0x04
    1826:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    1828:	eb 81       	ldd	r30, Y+3	; 0x03
    182a:	fc 81       	ldd	r31, Y+4	; 0x04
    182c:	84 e1       	ldi	r24, 0x14	; 20
    182e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1830:	8b 81       	ldd	r24, Y+3	; 0x03
    1832:	9c 81       	ldd	r25, Y+4	; 0x04
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	9c 83       	std	Y+4, r25	; 0x04
    1838:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    183a:	eb 81       	ldd	r30, Y+3	; 0x03
    183c:	fc 81       	ldd	r31, Y+4	; 0x04
    183e:	85 e1       	ldi	r24, 0x15	; 21
    1840:	80 83       	st	Z, r24
	pxTopOfStack--;
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	9c 81       	ldd	r25, Y+4	; 0x04
    1846:	01 97       	sbiw	r24, 0x01	; 1
    1848:	9c 83       	std	Y+4, r25	; 0x04
    184a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    184c:	eb 81       	ldd	r30, Y+3	; 0x03
    184e:	fc 81       	ldd	r31, Y+4	; 0x04
    1850:	86 e1       	ldi	r24, 0x16	; 22
    1852:	80 83       	st	Z, r24
	pxTopOfStack--;
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	9c 81       	ldd	r25, Y+4	; 0x04
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    185e:	eb 81       	ldd	r30, Y+3	; 0x03
    1860:	fc 81       	ldd	r31, Y+4	; 0x04
    1862:	87 e1       	ldi	r24, 0x17	; 23
    1864:	80 83       	st	Z, r24
	pxTopOfStack--;
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	01 97       	sbiw	r24, 0x01	; 1
    186c:	9c 83       	std	Y+4, r25	; 0x04
    186e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    1870:	eb 81       	ldd	r30, Y+3	; 0x03
    1872:	fc 81       	ldd	r31, Y+4	; 0x04
    1874:	88 e1       	ldi	r24, 0x18	; 24
    1876:	80 83       	st	Z, r24
	pxTopOfStack--;
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	9c 83       	std	Y+4, r25	; 0x04
    1880:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    1882:	eb 81       	ldd	r30, Y+3	; 0x03
    1884:	fc 81       	ldd	r31, Y+4	; 0x04
    1886:	89 e1       	ldi	r24, 0x19	; 25
    1888:	80 83       	st	Z, r24
	pxTopOfStack--;
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	9c 81       	ldd	r25, Y+4	; 0x04
    188e:	01 97       	sbiw	r24, 0x01	; 1
    1890:	9c 83       	std	Y+4, r25	; 0x04
    1892:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    1894:	eb 81       	ldd	r30, Y+3	; 0x03
    1896:	fc 81       	ldd	r31, Y+4	; 0x04
    1898:	80 e2       	ldi	r24, 0x20	; 32
    189a:	80 83       	st	Z, r24
	pxTopOfStack--;
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9c 83       	std	Y+4, r25	; 0x04
    18a4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    18a6:	eb 81       	ldd	r30, Y+3	; 0x03
    18a8:	fc 81       	ldd	r31, Y+4	; 0x04
    18aa:	81 e2       	ldi	r24, 0x21	; 33
    18ac:	80 83       	st	Z, r24
	pxTopOfStack--;
    18ae:	8b 81       	ldd	r24, Y+3	; 0x03
    18b0:	9c 81       	ldd	r25, Y+4	; 0x04
    18b2:	01 97       	sbiw	r24, 0x01	; 1
    18b4:	9c 83       	std	Y+4, r25	; 0x04
    18b6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    18b8:	eb 81       	ldd	r30, Y+3	; 0x03
    18ba:	fc 81       	ldd	r31, Y+4	; 0x04
    18bc:	82 e2       	ldi	r24, 0x22	; 34
    18be:	80 83       	st	Z, r24
	pxTopOfStack--;
    18c0:	8b 81       	ldd	r24, Y+3	; 0x03
    18c2:	9c 81       	ldd	r25, Y+4	; 0x04
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	9c 83       	std	Y+4, r25	; 0x04
    18c8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    18ca:	eb 81       	ldd	r30, Y+3	; 0x03
    18cc:	fc 81       	ldd	r31, Y+4	; 0x04
    18ce:	83 e2       	ldi	r24, 0x23	; 35
    18d0:	80 83       	st	Z, r24
	pxTopOfStack--;
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	01 97       	sbiw	r24, 0x01	; 1
    18d8:	9c 83       	std	Y+4, r25	; 0x04
    18da:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    18dc:	8f 81       	ldd	r24, Y+7	; 0x07
    18de:	98 85       	ldd	r25, Y+8	; 0x08
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	eb 81       	ldd	r30, Y+3	; 0x03
    18e8:	fc 81       	ldd	r31, Y+4	; 0x04
    18ea:	80 83       	st	Z, r24
	pxTopOfStack--;
    18ec:	8b 81       	ldd	r24, Y+3	; 0x03
    18ee:	9c 81       	ldd	r25, Y+4	; 0x04
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	9c 83       	std	Y+4, r25	; 0x04
    18f4:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	9a 81       	ldd	r25, Y+2	; 0x02
    18fa:	89 2f       	mov	r24, r25
    18fc:	99 27       	eor	r25, r25
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	eb 81       	ldd	r30, Y+3	; 0x03
    1906:	fc 81       	ldd	r31, Y+4	; 0x04
    1908:	80 83       	st	Z, r24
	pxTopOfStack--;
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	9c 83       	std	Y+4, r25	; 0x04
    1912:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    1914:	eb 81       	ldd	r30, Y+3	; 0x03
    1916:	fc 81       	ldd	r31, Y+4	; 0x04
    1918:	86 e2       	ldi	r24, 0x26	; 38
    191a:	80 83       	st	Z, r24
	pxTopOfStack--;
    191c:	8b 81       	ldd	r24, Y+3	; 0x03
    191e:	9c 81       	ldd	r25, Y+4	; 0x04
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    1926:	eb 81       	ldd	r30, Y+3	; 0x03
    1928:	fc 81       	ldd	r31, Y+4	; 0x04
    192a:	87 e2       	ldi	r24, 0x27	; 39
    192c:	80 83       	st	Z, r24
	pxTopOfStack--;
    192e:	8b 81       	ldd	r24, Y+3	; 0x03
    1930:	9c 81       	ldd	r25, Y+4	; 0x04
    1932:	01 97       	sbiw	r24, 0x01	; 1
    1934:	9c 83       	std	Y+4, r25	; 0x04
    1936:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    1938:	eb 81       	ldd	r30, Y+3	; 0x03
    193a:	fc 81       	ldd	r31, Y+4	; 0x04
    193c:	88 e2       	ldi	r24, 0x28	; 40
    193e:	80 83       	st	Z, r24
	pxTopOfStack--;
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	9c 83       	std	Y+4, r25	; 0x04
    1948:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    194a:	eb 81       	ldd	r30, Y+3	; 0x03
    194c:	fc 81       	ldd	r31, Y+4	; 0x04
    194e:	89 e2       	ldi	r24, 0x29	; 41
    1950:	80 83       	st	Z, r24
	pxTopOfStack--;
    1952:	8b 81       	ldd	r24, Y+3	; 0x03
    1954:	9c 81       	ldd	r25, Y+4	; 0x04
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	9c 83       	std	Y+4, r25	; 0x04
    195a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    195c:	eb 81       	ldd	r30, Y+3	; 0x03
    195e:	fc 81       	ldd	r31, Y+4	; 0x04
    1960:	80 e3       	ldi	r24, 0x30	; 48
    1962:	80 83       	st	Z, r24
	pxTopOfStack--;
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	01 97       	sbiw	r24, 0x01	; 1
    196a:	9c 83       	std	Y+4, r25	; 0x04
    196c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    196e:	eb 81       	ldd	r30, Y+3	; 0x03
    1970:	fc 81       	ldd	r31, Y+4	; 0x04
    1972:	81 e3       	ldi	r24, 0x31	; 49
    1974:	80 83       	st	Z, r24
	pxTopOfStack--;
    1976:	8b 81       	ldd	r24, Y+3	; 0x03
    1978:	9c 81       	ldd	r25, Y+4	; 0x04
    197a:	01 97       	sbiw	r24, 0x01	; 1
    197c:	9c 83       	std	Y+4, r25	; 0x04
    197e:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1984:	28 96       	adiw	r28, 0x08	; 8
    1986:	0f b6       	in	r0, 0x3f	; 63
    1988:	f8 94       	cli
    198a:	de bf       	out	0x3e, r29	; 62
    198c:	0f be       	out	0x3f, r0	; 63
    198e:	cd bf       	out	0x3d, r28	; 61
    1990:	cf 91       	pop	r28
    1992:	df 91       	pop	r29
    1994:	08 95       	ret

00001996 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    199e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    19a2:	a0 91 ca 06 	lds	r26, 0x06CA
    19a6:	b0 91 cb 06 	lds	r27, 0x06CB
    19aa:	cd 91       	ld	r28, X+
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	dd 91       	ld	r29, X+
    19b0:	de bf       	out	0x3e, r29	; 62
    19b2:	ff 91       	pop	r31
    19b4:	ef 91       	pop	r30
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	3f 90       	pop	r3
    19ec:	2f 90       	pop	r2
    19ee:	1f 90       	pop	r1
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    19f6:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    19f8:	81 e0       	ldi	r24, 0x01	; 1
}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1a0e:	0f 92       	push	r0
    1a10:	0f b6       	in	r0, 0x3f	; 63
    1a12:	f8 94       	cli
    1a14:	0f 92       	push	r0
    1a16:	1f 92       	push	r1
    1a18:	11 24       	eor	r1, r1
    1a1a:	2f 92       	push	r2
    1a1c:	3f 92       	push	r3
    1a1e:	4f 92       	push	r4
    1a20:	5f 92       	push	r5
    1a22:	6f 92       	push	r6
    1a24:	7f 92       	push	r7
    1a26:	8f 92       	push	r8
    1a28:	9f 92       	push	r9
    1a2a:	af 92       	push	r10
    1a2c:	bf 92       	push	r11
    1a2e:	cf 92       	push	r12
    1a30:	df 92       	push	r13
    1a32:	ef 92       	push	r14
    1a34:	ff 92       	push	r15
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	2f 93       	push	r18
    1a3c:	3f 93       	push	r19
    1a3e:	4f 93       	push	r20
    1a40:	5f 93       	push	r21
    1a42:	6f 93       	push	r22
    1a44:	7f 93       	push	r23
    1a46:	8f 93       	push	r24
    1a48:	9f 93       	push	r25
    1a4a:	af 93       	push	r26
    1a4c:	bf 93       	push	r27
    1a4e:	cf 93       	push	r28
    1a50:	df 93       	push	r29
    1a52:	ef 93       	push	r30
    1a54:	ff 93       	push	r31
    1a56:	a0 91 ca 06 	lds	r26, 0x06CA
    1a5a:	b0 91 cb 06 	lds	r27, 0x06CB
    1a5e:	0d b6       	in	r0, 0x3d	; 61
    1a60:	0d 92       	st	X+, r0
    1a62:	0e b6       	in	r0, 0x3e	; 62
    1a64:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1a66:	0e 94 77 16 	call	0x2cee	; 0x2cee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1a6a:	a0 91 ca 06 	lds	r26, 0x06CA
    1a6e:	b0 91 cb 06 	lds	r27, 0x06CB
    1a72:	cd 91       	ld	r28, X+
    1a74:	cd bf       	out	0x3d, r28	; 61
    1a76:	dd 91       	ld	r29, X+
    1a78:	de bf       	out	0x3e, r29	; 62
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	bf 91       	pop	r27
    1a84:	af 91       	pop	r26
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	7f 91       	pop	r23
    1a8c:	6f 91       	pop	r22
    1a8e:	5f 91       	pop	r21
    1a90:	4f 91       	pop	r20
    1a92:	3f 91       	pop	r19
    1a94:	2f 91       	pop	r18
    1a96:	1f 91       	pop	r17
    1a98:	0f 91       	pop	r16
    1a9a:	ff 90       	pop	r15
    1a9c:	ef 90       	pop	r14
    1a9e:	df 90       	pop	r13
    1aa0:	cf 90       	pop	r12
    1aa2:	bf 90       	pop	r11
    1aa4:	af 90       	pop	r10
    1aa6:	9f 90       	pop	r9
    1aa8:	8f 90       	pop	r8
    1aaa:	7f 90       	pop	r7
    1aac:	6f 90       	pop	r6
    1aae:	5f 90       	pop	r5
    1ab0:	4f 90       	pop	r4
    1ab2:	3f 90       	pop	r3
    1ab4:	2f 90       	pop	r2
    1ab6:	1f 90       	pop	r1
    1ab8:	0f 90       	pop	r0
    1aba:	0f be       	out	0x3f, r0	; 63
    1abc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1abe:	08 95       	ret

00001ac0 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	0f 92       	push	r0
    1ac8:	1f 92       	push	r1
    1aca:	11 24       	eor	r1, r1
    1acc:	2f 92       	push	r2
    1ace:	3f 92       	push	r3
    1ad0:	4f 92       	push	r4
    1ad2:	5f 92       	push	r5
    1ad4:	6f 92       	push	r6
    1ad6:	7f 92       	push	r7
    1ad8:	8f 92       	push	r8
    1ada:	9f 92       	push	r9
    1adc:	af 92       	push	r10
    1ade:	bf 92       	push	r11
    1ae0:	cf 92       	push	r12
    1ae2:	df 92       	push	r13
    1ae4:	ef 92       	push	r14
    1ae6:	ff 92       	push	r15
    1ae8:	0f 93       	push	r16
    1aea:	1f 93       	push	r17
    1aec:	2f 93       	push	r18
    1aee:	3f 93       	push	r19
    1af0:	4f 93       	push	r20
    1af2:	5f 93       	push	r21
    1af4:	6f 93       	push	r22
    1af6:	7f 93       	push	r23
    1af8:	8f 93       	push	r24
    1afa:	9f 93       	push	r25
    1afc:	af 93       	push	r26
    1afe:	bf 93       	push	r27
    1b00:	cf 93       	push	r28
    1b02:	df 93       	push	r29
    1b04:	ef 93       	push	r30
    1b06:	ff 93       	push	r31
    1b08:	a0 91 ca 06 	lds	r26, 0x06CA
    1b0c:	b0 91 cb 06 	lds	r27, 0x06CB
    1b10:	0d b6       	in	r0, 0x3d	; 61
    1b12:	0d 92       	st	X+, r0
    1b14:	0e b6       	in	r0, 0x3e	; 62
    1b16:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    1b18:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <vTaskIncrementTick>
	vTaskSwitchContext();
    1b1c:	0e 94 77 16 	call	0x2cee	; 0x2cee <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1b20:	a0 91 ca 06 	lds	r26, 0x06CA
    1b24:	b0 91 cb 06 	lds	r27, 0x06CB
    1b28:	cd 91       	ld	r28, X+
    1b2a:	cd bf       	out	0x3d, r28	; 61
    1b2c:	dd 91       	ld	r29, X+
    1b2e:	de bf       	out	0x3e, r29	; 62
    1b30:	ff 91       	pop	r31
    1b32:	ef 91       	pop	r30
    1b34:	df 91       	pop	r29
    1b36:	cf 91       	pop	r28
    1b38:	bf 91       	pop	r27
    1b3a:	af 91       	pop	r26
    1b3c:	9f 91       	pop	r25
    1b3e:	8f 91       	pop	r24
    1b40:	7f 91       	pop	r23
    1b42:	6f 91       	pop	r22
    1b44:	5f 91       	pop	r21
    1b46:	4f 91       	pop	r20
    1b48:	3f 91       	pop	r19
    1b4a:	2f 91       	pop	r18
    1b4c:	1f 91       	pop	r17
    1b4e:	0f 91       	pop	r16
    1b50:	ff 90       	pop	r15
    1b52:	ef 90       	pop	r14
    1b54:	df 90       	pop	r13
    1b56:	cf 90       	pop	r12
    1b58:	bf 90       	pop	r11
    1b5a:	af 90       	pop	r10
    1b5c:	9f 90       	pop	r9
    1b5e:	8f 90       	pop	r8
    1b60:	7f 90       	pop	r7
    1b62:	6f 90       	pop	r6
    1b64:	5f 90       	pop	r5
    1b66:	4f 90       	pop	r4
    1b68:	3f 90       	pop	r3
    1b6a:	2f 90       	pop	r2
    1b6c:	1f 90       	pop	r1
    1b6e:	0f 90       	pop	r0
    1b70:	0f be       	out	0x3f, r0	; 63
    1b72:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1b74:	08 95       	ret

00001b76 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1b76:	df 93       	push	r29
    1b78:	cf 93       	push	r28
    1b7a:	00 d0       	rcall	.+0      	; 0x1b7c <prvSetupTimerInterrupt+0x6>
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <prvSetupTimerInterrupt+0x8>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <prvSetupTimerInterrupt+0xa>
    1b80:	cd b7       	in	r28, 0x3d	; 61
    1b82:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1b84:	80 e4       	ldi	r24, 0x40	; 64
    1b86:	9f e1       	ldi	r25, 0x1F	; 31
    1b88:	a0 e0       	ldi	r26, 0x00	; 0
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	8b 83       	std	Y+3, r24	; 0x03
    1b8e:	9c 83       	std	Y+4, r25	; 0x04
    1b90:	ad 83       	std	Y+5, r26	; 0x05
    1b92:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	ad 81       	ldd	r26, Y+5	; 0x05
    1b9a:	be 81       	ldd	r27, Y+6	; 0x06
    1b9c:	68 94       	set
    1b9e:	15 f8       	bld	r1, 5
    1ba0:	b6 95       	lsr	r27
    1ba2:	a7 95       	ror	r26
    1ba4:	97 95       	ror	r25
    1ba6:	87 95       	ror	r24
    1ba8:	16 94       	lsr	r1
    1baa:	d1 f7       	brne	.-12     	; 0x1ba0 <prvSetupTimerInterrupt+0x2a>
    1bac:	8b 83       	std	Y+3, r24	; 0x03
    1bae:	9c 83       	std	Y+4, r25	; 0x04
    1bb0:	ad 83       	std	Y+5, r26	; 0x05
    1bb2:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    1bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb8:	ad 81       	ldd	r26, Y+5	; 0x05
    1bba:	be 81       	ldd	r27, Y+6	; 0x06
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	a1 09       	sbc	r26, r1
    1bc0:	b1 09       	sbc	r27, r1
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
    1bc4:	9c 83       	std	Y+4, r25	; 0x04
    1bc6:	ad 83       	std	Y+5, r26	; 0x05
    1bc8:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    1bce:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd2:	ad 81       	ldd	r26, Y+5	; 0x05
    1bd4:	be 81       	ldd	r27, Y+6	; 0x06
    1bd6:	89 2f       	mov	r24, r25
    1bd8:	9a 2f       	mov	r25, r26
    1bda:	ab 2f       	mov	r26, r27
    1bdc:	bb 27       	eor	r27, r27
    1bde:	8b 83       	std	Y+3, r24	; 0x03
    1be0:	9c 83       	std	Y+4, r25	; 0x04
    1be2:	ad 83       	std	Y+5, r26	; 0x05
    1be4:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    1bea:	eb e4       	ldi	r30, 0x4B	; 75
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    1bf2:	ea e4       	ldi	r30, 0x4A	; 74
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
    1bf8:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1bfa:	8b e0       	ldi	r24, 0x0B	; 11
    1bfc:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    1bfe:	ee e4       	ldi	r30, 0x4E	; 78
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    1c06:	e9 e5       	ldi	r30, 0x59	; 89
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	80 61       	ori	r24, 0x10	; 16
    1c12:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    1c14:	e9 e5       	ldi	r30, 0x59	; 89
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	80 83       	st	Z, r24
}
    1c1c:	26 96       	adiw	r28, 0x06	; 6
    1c1e:	0f b6       	in	r0, 0x3f	; 63
    1c20:	f8 94       	cli
    1c22:	de bf       	out	0x3e, r29	; 62
    1c24:	0f be       	out	0x3f, r0	; 63
    1c26:	cd bf       	out	0x3d, r28	; 61
    1c28:	cf 91       	pop	r28
    1c2a:	df 91       	pop	r29
    1c2c:	08 95       	ret

00001c2e <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    1c2e:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1c32:	18 95       	reti

00001c34 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    1c34:	df 93       	push	r29
    1c36:	cf 93       	push	r28
    1c38:	cd b7       	in	r28, 0x3d	; 61
    1c3a:	de b7       	in	r29, 0x3e	; 62
    1c3c:	28 97       	sbiw	r28, 0x08	; 8
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	de bf       	out	0x3e, r29	; 62
    1c44:	0f be       	out	0x3f, r0	; 63
    1c46:	cd bf       	out	0x3d, r28	; 61
    1c48:	8f 83       	std	Y+7, r24	; 0x07
    1c4a:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    1c4c:	1a 82       	std	Y+2, r1	; 0x02
    1c4e:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    1c50:	8f 81       	ldd	r24, Y+7	; 0x07
    1c52:	88 23       	and	r24, r24
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <xQueueCreate+0x24>
    1c56:	8c c0       	rjmp	.+280    	; 0x1d70 <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    1c58:	8f e1       	ldi	r24, 0x1F	; 31
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	0e 94 a1 09 	call	0x1342	; 0x1342 <pvPortMalloc>
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    1c64:	8d 81       	ldd	r24, Y+5	; 0x05
    1c66:	9e 81       	ldd	r25, Y+6	; 0x06
    1c68:	00 97       	sbiw	r24, 0x00	; 0
    1c6a:	09 f4       	brne	.+2      	; 0x1c6e <xQueueCreate+0x3a>
    1c6c:	81 c0       	rjmp	.+258    	; 0x1d70 <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	88 85       	ldd	r24, Y+8	; 0x08
    1c76:	88 2f       	mov	r24, r24
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	24 9f       	mul	r18, r20
    1c7e:	c0 01       	movw	r24, r0
    1c80:	25 9f       	mul	r18, r21
    1c82:	90 0d       	add	r25, r0
    1c84:	34 9f       	mul	r19, r20
    1c86:	90 0d       	add	r25, r0
    1c88:	11 24       	eor	r1, r1
    1c8a:	01 96       	adiw	r24, 0x01	; 1
    1c8c:	9c 83       	std	Y+4, r25	; 0x04
    1c8e:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	9c 81       	ldd	r25, Y+4	; 0x04
    1c94:	0e 94 a1 09 	call	0x1342	; 0x1342 <pvPortMalloc>
    1c98:	ed 81       	ldd	r30, Y+5	; 0x05
    1c9a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c9c:	91 83       	std	Z+1, r25	; 0x01
    1c9e:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    1ca0:	ed 81       	ldd	r30, Y+5	; 0x05
    1ca2:	fe 81       	ldd	r31, Y+6	; 0x06
    1ca4:	80 81       	ld	r24, Z
    1ca6:	91 81       	ldd	r25, Z+1	; 0x01
    1ca8:	00 97       	sbiw	r24, 0x00	; 0
    1caa:	09 f4       	brne	.+2      	; 0x1cae <xQueueCreate+0x7a>
    1cac:	5d c0       	rjmp	.+186    	; 0x1d68 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    1cae:	ed 81       	ldd	r30, Y+5	; 0x05
    1cb0:	fe 81       	ldd	r31, Y+6	; 0x06
    1cb2:	40 81       	ld	r20, Z
    1cb4:	51 81       	ldd	r21, Z+1	; 0x01
    1cb6:	8f 81       	ldd	r24, Y+7	; 0x07
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	88 85       	ldd	r24, Y+8	; 0x08
    1cbe:	88 2f       	mov	r24, r24
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	bc 01       	movw	r22, r24
    1cc4:	26 9f       	mul	r18, r22
    1cc6:	c0 01       	movw	r24, r0
    1cc8:	27 9f       	mul	r18, r23
    1cca:	90 0d       	add	r25, r0
    1ccc:	36 9f       	mul	r19, r22
    1cce:	90 0d       	add	r25, r0
    1cd0:	11 24       	eor	r1, r1
    1cd2:	84 0f       	add	r24, r20
    1cd4:	95 1f       	adc	r25, r21
    1cd6:	ed 81       	ldd	r30, Y+5	; 0x05
    1cd8:	fe 81       	ldd	r31, Y+6	; 0x06
    1cda:	93 83       	std	Z+3, r25	; 0x03
    1cdc:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    1cde:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce0:	fe 81       	ldd	r31, Y+6	; 0x06
    1ce2:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    1ce4:	ed 81       	ldd	r30, Y+5	; 0x05
    1ce6:	fe 81       	ldd	r31, Y+6	; 0x06
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	ed 81       	ldd	r30, Y+5	; 0x05
    1cee:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf0:	95 83       	std	Z+5, r25	; 0x05
    1cf2:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    1cf4:	ed 81       	ldd	r30, Y+5	; 0x05
    1cf6:	fe 81       	ldd	r31, Y+6	; 0x06
    1cf8:	40 81       	ld	r20, Z
    1cfa:	51 81       	ldd	r21, Z+1	; 0x01
    1cfc:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfe:	88 2f       	mov	r24, r24
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 01       	movw	r18, r24
    1d04:	21 50       	subi	r18, 0x01	; 1
    1d06:	30 40       	sbci	r19, 0x00	; 0
    1d08:	88 85       	ldd	r24, Y+8	; 0x08
    1d0a:	88 2f       	mov	r24, r24
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	bc 01       	movw	r22, r24
    1d10:	26 9f       	mul	r18, r22
    1d12:	c0 01       	movw	r24, r0
    1d14:	27 9f       	mul	r18, r23
    1d16:	90 0d       	add	r25, r0
    1d18:	36 9f       	mul	r19, r22
    1d1a:	90 0d       	add	r25, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	84 0f       	add	r24, r20
    1d20:	95 1f       	adc	r25, r21
    1d22:	ed 81       	ldd	r30, Y+5	; 0x05
    1d24:	fe 81       	ldd	r31, Y+6	; 0x06
    1d26:	97 83       	std	Z+7, r25	; 0x07
    1d28:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    1d2a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d2c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d30:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    1d32:	ed 81       	ldd	r30, Y+5	; 0x05
    1d34:	fe 81       	ldd	r31, Y+6	; 0x06
    1d36:	88 85       	ldd	r24, Y+8	; 0x08
    1d38:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    1d3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d3e:	8f ef       	ldi	r24, 0xFF	; 255
    1d40:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    1d42:	ed 81       	ldd	r30, Y+5	; 0x05
    1d44:	fe 81       	ldd	r31, Y+6	; 0x06
    1d46:	8f ef       	ldi	r24, 0xFF	; 255
    1d48:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    1d4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d4e:	08 96       	adiw	r24, 0x08	; 8
    1d50:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    1d54:	8d 81       	ldd	r24, Y+5	; 0x05
    1d56:	9e 81       	ldd	r25, Y+6	; 0x06
    1d58:	41 96       	adiw	r24, 0x11	; 17
    1d5a:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	04 c0       	rjmp	.+8      	; 0x1d70 <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    1d68:	8d 81       	ldd	r24, Y+5	; 0x05
    1d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d6c:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    1d70:	89 81       	ldd	r24, Y+1	; 0x01
    1d72:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d74:	28 96       	adiw	r28, 0x08	; 8
    1d76:	0f b6       	in	r0, 0x3f	; 63
    1d78:	f8 94       	cli
    1d7a:	de bf       	out	0x3e, r29	; 62
    1d7c:	0f be       	out	0x3f, r0	; 63
    1d7e:	cd bf       	out	0x3d, r28	; 61
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	cd b7       	in	r28, 0x3d	; 61
    1d8c:	de b7       	in	r29, 0x3e	; 62
    1d8e:	2c 97       	sbiw	r28, 0x0c	; 12
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	9e 83       	std	Y+6, r25	; 0x06
    1d9c:	8d 83       	std	Y+5, r24	; 0x05
    1d9e:	78 87       	std	Y+8, r23	; 0x08
    1da0:	6f 83       	std	Y+7, r22	; 0x07
    1da2:	5a 87       	std	Y+10, r21	; 0x0a
    1da4:	49 87       	std	Y+9, r20	; 0x09
    1da6:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1da8:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1db0:	ed 81       	ldd	r30, Y+5	; 0x05
    1db2:	fe 81       	ldd	r31, Y+6	; 0x06
    1db4:	92 8d       	ldd	r25, Z+26	; 0x1a
    1db6:	ed 81       	ldd	r30, Y+5	; 0x05
    1db8:	fe 81       	ldd	r31, Y+6	; 0x06
    1dba:	83 8d       	ldd	r24, Z+27	; 0x1b
    1dbc:	98 17       	cp	r25, r24
    1dbe:	d8 f4       	brcc	.+54     	; 0x1df6 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1dc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1dc4:	2f 81       	ldd	r18, Y+7	; 0x07
    1dc6:	38 85       	ldd	r19, Y+8	; 0x08
    1dc8:	b9 01       	movw	r22, r18
    1dca:	4b 85       	ldd	r20, Y+11	; 0x0b
    1dcc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1dd0:	ed 81       	ldd	r30, Y+5	; 0x05
    1dd2:	fe 81       	ldd	r31, Y+6	; 0x06
    1dd4:	81 89       	ldd	r24, Z+17	; 0x11
    1dd6:	88 23       	and	r24, r24
    1dd8:	49 f0       	breq	.+18     	; 0x1dec <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    1dda:	8d 81       	ldd	r24, Y+5	; 0x05
    1ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dde:	41 96       	adiw	r24, 0x11	; 17
    1de0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	11 f4       	brne	.+4      	; 0x1dec <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    1de8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    1dec:	0f 90       	pop	r0
    1dee:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    1df0:	81 e0       	ldi	r24, 0x01	; 1
    1df2:	8c 87       	std	Y+12, r24	; 0x0c
    1df4:	5c c0       	rjmp	.+184    	; 0x1eae <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    1df6:	89 85       	ldd	r24, Y+9	; 0x09
    1df8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1dfa:	00 97       	sbiw	r24, 0x00	; 0
    1dfc:	21 f4       	brne	.+8      	; 0x1e06 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    1dfe:	0f 90       	pop	r0
    1e00:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    1e02:	1c 86       	std	Y+12, r1	; 0x0c
    1e04:	54 c0       	rjmp	.+168    	; 0x1eae <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    1e06:	89 81       	ldd	r24, Y+1	; 0x01
    1e08:	88 23       	and	r24, r24
    1e0a:	31 f4       	brne	.+12     	; 0x1e18 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    1e0c:	ce 01       	movw	r24, r28
    1e0e:	02 96       	adiw	r24, 0x02	; 2
    1e10:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    1e1c:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    1e20:	0f b6       	in	r0, 0x3f	; 63
    1e22:	f8 94       	cli
    1e24:	0f 92       	push	r0
    1e26:	ed 81       	ldd	r30, Y+5	; 0x05
    1e28:	fe 81       	ldd	r31, Y+6	; 0x06
    1e2a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e2e:	19 f4       	brne	.+6      	; 0x1e36 <xQueueGenericSend+0xb0>
    1e30:	ed 81       	ldd	r30, Y+5	; 0x05
    1e32:	fe 81       	ldd	r31, Y+6	; 0x06
    1e34:	15 8e       	std	Z+29, r1	; 0x1d
    1e36:	ed 81       	ldd	r30, Y+5	; 0x05
    1e38:	fe 81       	ldd	r31, Y+6	; 0x06
    1e3a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e3c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e3e:	19 f4       	brne	.+6      	; 0x1e46 <xQueueGenericSend+0xc0>
    1e40:	ed 81       	ldd	r30, Y+5	; 0x05
    1e42:	fe 81       	ldd	r31, Y+6	; 0x06
    1e44:	16 8e       	std	Z+30, r1	; 0x1e
    1e46:	0f 90       	pop	r0
    1e48:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	02 96       	adiw	r24, 0x02	; 2
    1e4e:	9e 01       	movw	r18, r28
    1e50:	27 5f       	subi	r18, 0xF7	; 247
    1e52:	3f 4f       	sbci	r19, 0xFF	; 255
    1e54:	b9 01       	movw	r22, r18
    1e56:	0e 94 94 17 	call	0x2f28	; 0x2f28 <xTaskCheckForTimeOut>
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f5       	brne	.+66     	; 0x1ea0 <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    1e5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e60:	9e 81       	ldd	r25, Y+6	; 0x06
    1e62:	0e 94 62 12 	call	0x24c4	; 0x24c4 <prvIsQueueFull>
    1e66:	88 23       	and	r24, r24
    1e68:	a1 f0       	breq	.+40     	; 0x1e92 <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    1e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6e:	08 96       	adiw	r24, 0x08	; 8
    1e70:	29 85       	ldd	r18, Y+9	; 0x09
    1e72:	3a 85       	ldd	r19, Y+10	; 0x0a
    1e74:	b9 01       	movw	r22, r18
    1e76:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    1e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e7e:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    1e82:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    1e86:	88 23       	and	r24, r24
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <xQueueGenericSend+0x106>
    1e8a:	8f cf       	rjmp	.-226    	; 0x1daa <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    1e8c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
    1e90:	8c cf       	rjmp	.-232    	; 0x1daa <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    1e92:	8d 81       	ldd	r24, Y+5	; 0x05
    1e94:	9e 81       	ldd	r25, Y+6	; 0x06
    1e96:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    1e9a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    1e9e:	85 cf       	rjmp	.-246    	; 0x1daa <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    1ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ea4:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    1ea8:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    1eac:	1c 86       	std	Y+12, r1	; 0x0c
    1eae:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    1eb0:	2c 96       	adiw	r28, 0x0c	; 12
    1eb2:	0f b6       	in	r0, 0x3f	; 63
    1eb4:	f8 94       	cli
    1eb6:	de bf       	out	0x3e, r29	; 62
    1eb8:	0f be       	out	0x3f, r0	; 63
    1eba:	cd bf       	out	0x3d, r28	; 61
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	29 97       	sbiw	r28, 0x09	; 9
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	9c 83       	std	Y+4, r25	; 0x04
    1ed8:	8b 83       	std	Y+3, r24	; 0x03
    1eda:	7e 83       	std	Y+6, r23	; 0x06
    1edc:	6d 83       	std	Y+5, r22	; 0x05
    1ede:	58 87       	std	Y+8, r21	; 0x08
    1ee0:	4f 83       	std	Y+7, r20	; 0x07
    1ee2:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    1ee4:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    1ee6:	eb 81       	ldd	r30, Y+3	; 0x03
    1ee8:	fc 81       	ldd	r31, Y+4	; 0x04
    1eea:	92 8d       	ldd	r25, Z+26	; 0x1a
    1eec:	eb 81       	ldd	r30, Y+3	; 0x03
    1eee:	fc 81       	ldd	r31, Y+4	; 0x04
    1ef0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ef2:	98 17       	cp	r25, r24
    1ef4:	40 f5       	brcc	.+80     	; 0x1f46 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	9c 81       	ldd	r25, Y+4	; 0x04
    1efa:	2d 81       	ldd	r18, Y+5	; 0x05
    1efc:	3e 81       	ldd	r19, Y+6	; 0x06
    1efe:	b9 01       	movw	r22, r18
    1f00:	49 85       	ldd	r20, Y+9	; 0x09
    1f02:	0e 94 fe 10 	call	0x21fc	; 0x21fc <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    1f06:	eb 81       	ldd	r30, Y+3	; 0x03
    1f08:	fc 81       	ldd	r31, Y+4	; 0x04
    1f0a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f0e:	89 f4       	brne	.+34     	; 0x1f32 <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1f10:	eb 81       	ldd	r30, Y+3	; 0x03
    1f12:	fc 81       	ldd	r31, Y+4	; 0x04
    1f14:	81 89       	ldd	r24, Z+17	; 0x11
    1f16:	88 23       	and	r24, r24
    1f18:	99 f0       	breq	.+38     	; 0x1f40 <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1f1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f1e:	41 96       	adiw	r24, 0x11	; 17
    1f20:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    1f24:	88 23       	and	r24, r24
    1f26:	61 f0       	breq	.+24     	; 0x1f40 <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    1f28:	ef 81       	ldd	r30, Y+7	; 0x07
    1f2a:	f8 85       	ldd	r31, Y+8	; 0x08
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	80 83       	st	Z, r24
    1f30:	07 c0       	rjmp	.+14     	; 0x1f40 <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    1f32:	eb 81       	ldd	r30, Y+3	; 0x03
    1f34:	fc 81       	ldd	r31, Y+4	; 0x04
    1f36:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f38:	8f 5f       	subi	r24, 0xFF	; 255
    1f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1f3e:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	8a 83       	std	Y+2, r24	; 0x02
    1f44:	01 c0       	rjmp	.+2      	; 0x1f48 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    1f46:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1f4a:	29 96       	adiw	r28, 0x09	; 9
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	cd b7       	in	r28, 0x3d	; 61
    1f62:	de b7       	in	r29, 0x3e	; 62
    1f64:	2e 97       	sbiw	r28, 0x0e	; 14
    1f66:	0f b6       	in	r0, 0x3f	; 63
    1f68:	f8 94       	cli
    1f6a:	de bf       	out	0x3e, r29	; 62
    1f6c:	0f be       	out	0x3f, r0	; 63
    1f6e:	cd bf       	out	0x3d, r28	; 61
    1f70:	98 87       	std	Y+8, r25	; 0x08
    1f72:	8f 83       	std	Y+7, r24	; 0x07
    1f74:	7a 87       	std	Y+10, r23	; 0x0a
    1f76:	69 87       	std	Y+9, r22	; 0x09
    1f78:	5c 87       	std	Y+12, r21	; 0x0c
    1f7a:	4b 87       	std	Y+11, r20	; 0x0b
    1f7c:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    1f7e:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    1f80:	0f b6       	in	r0, 0x3f	; 63
    1f82:	f8 94       	cli
    1f84:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    1f86:	ef 81       	ldd	r30, Y+7	; 0x07
    1f88:	f8 85       	ldd	r31, Y+8	; 0x08
    1f8a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f8c:	88 23       	and	r24, r24
    1f8e:	09 f4       	brne	.+2      	; 0x1f92 <xQueueGenericReceive+0x36>
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    1f92:	ef 81       	ldd	r30, Y+7	; 0x07
    1f94:	f8 85       	ldd	r31, Y+8	; 0x08
    1f96:	86 81       	ldd	r24, Z+6	; 0x06
    1f98:	97 81       	ldd	r25, Z+7	; 0x07
    1f9a:	9a 83       	std	Y+2, r25	; 0x02
    1f9c:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    1f9e:	8f 81       	ldd	r24, Y+7	; 0x07
    1fa0:	98 85       	ldd	r25, Y+8	; 0x08
    1fa2:	29 85       	ldd	r18, Y+9	; 0x09
    1fa4:	3a 85       	ldd	r19, Y+10	; 0x0a
    1fa6:	b9 01       	movw	r22, r18
    1fa8:	0e 94 93 11 	call	0x2326	; 0x2326 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    1fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fae:	88 23       	and	r24, r24
    1fb0:	b1 f4       	brne	.+44     	; 0x1fde <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    1fb2:	ef 81       	ldd	r30, Y+7	; 0x07
    1fb4:	f8 85       	ldd	r31, Y+8	; 0x08
    1fb6:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fb8:	81 50       	subi	r24, 0x01	; 1
    1fba:	ef 81       	ldd	r30, Y+7	; 0x07
    1fbc:	f8 85       	ldd	r31, Y+8	; 0x08
    1fbe:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1fc0:	ef 81       	ldd	r30, Y+7	; 0x07
    1fc2:	f8 85       	ldd	r31, Y+8	; 0x08
    1fc4:	80 85       	ldd	r24, Z+8	; 0x08
    1fc6:	88 23       	and	r24, r24
    1fc8:	f1 f0       	breq	.+60     	; 0x2006 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    1fca:	8f 81       	ldd	r24, Y+7	; 0x07
    1fcc:	98 85       	ldd	r25, Y+8	; 0x08
    1fce:	08 96       	adiw	r24, 0x08	; 8
    1fd0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	b9 f4       	brne	.+46     	; 0x2006 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    1fd8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
    1fdc:	14 c0       	rjmp	.+40     	; 0x2006 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    1fde:	ef 81       	ldd	r30, Y+7	; 0x07
    1fe0:	f8 85       	ldd	r31, Y+8	; 0x08
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	9a 81       	ldd	r25, Y+2	; 0x02
    1fe6:	97 83       	std	Z+7, r25	; 0x07
    1fe8:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1fea:	ef 81       	ldd	r30, Y+7	; 0x07
    1fec:	f8 85       	ldd	r31, Y+8	; 0x08
    1fee:	81 89       	ldd	r24, Z+17	; 0x11
    1ff0:	88 23       	and	r24, r24
    1ff2:	49 f0       	breq	.+18     	; 0x2006 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1ff4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ff6:	98 85       	ldd	r25, Y+8	; 0x08
    1ff8:	41 96       	adiw	r24, 0x11	; 17
    1ffa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    1ffe:	88 23       	and	r24, r24
    2000:	11 f0       	breq	.+4      	; 0x2006 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    2002:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	8e 87       	std	Y+14, r24	; 0x0e
    200e:	5c c0       	rjmp	.+184    	; 0x20c8 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    2010:	8b 85       	ldd	r24, Y+11	; 0x0b
    2012:	9c 85       	ldd	r25, Y+12	; 0x0c
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	21 f4       	brne	.+8      	; 0x2020 <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    2018:	0f 90       	pop	r0
    201a:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    201c:	1e 86       	std	Y+14, r1	; 0x0e
    201e:	54 c0       	rjmp	.+168    	; 0x20c8 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	88 23       	and	r24, r24
    2024:	31 f4       	brne	.+12     	; 0x2032 <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    2026:	ce 01       	movw	r24, r28
    2028:	04 96       	adiw	r24, 0x04	; 4
    202a:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    2036:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	0f 92       	push	r0
    2040:	ef 81       	ldd	r30, Y+7	; 0x07
    2042:	f8 85       	ldd	r31, Y+8	; 0x08
    2044:	85 8d       	ldd	r24, Z+29	; 0x1d
    2046:	8f 3f       	cpi	r24, 0xFF	; 255
    2048:	19 f4       	brne	.+6      	; 0x2050 <xQueueGenericReceive+0xf4>
    204a:	ef 81       	ldd	r30, Y+7	; 0x07
    204c:	f8 85       	ldd	r31, Y+8	; 0x08
    204e:	15 8e       	std	Z+29, r1	; 0x1d
    2050:	ef 81       	ldd	r30, Y+7	; 0x07
    2052:	f8 85       	ldd	r31, Y+8	; 0x08
    2054:	86 8d       	ldd	r24, Z+30	; 0x1e
    2056:	8f 3f       	cpi	r24, 0xFF	; 255
    2058:	19 f4       	brne	.+6      	; 0x2060 <xQueueGenericReceive+0x104>
    205a:	ef 81       	ldd	r30, Y+7	; 0x07
    205c:	f8 85       	ldd	r31, Y+8	; 0x08
    205e:	16 8e       	std	Z+30, r1	; 0x1e
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    2064:	ce 01       	movw	r24, r28
    2066:	04 96       	adiw	r24, 0x04	; 4
    2068:	9e 01       	movw	r18, r28
    206a:	25 5f       	subi	r18, 0xF5	; 245
    206c:	3f 4f       	sbci	r19, 0xFF	; 255
    206e:	b9 01       	movw	r22, r18
    2070:	0e 94 94 17 	call	0x2f28	; 0x2f28 <xTaskCheckForTimeOut>
    2074:	88 23       	and	r24, r24
    2076:	09 f5       	brne	.+66     	; 0x20ba <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	98 85       	ldd	r25, Y+8	; 0x08
    207c:	0e 94 2f 12 	call	0x245e	; 0x245e <prvIsQueueEmpty>
    2080:	88 23       	and	r24, r24
    2082:	a1 f0       	breq	.+40     	; 0x20ac <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    2084:	8f 81       	ldd	r24, Y+7	; 0x07
    2086:	98 85       	ldd	r25, Y+8	; 0x08
    2088:	41 96       	adiw	r24, 0x11	; 17
    208a:	2b 85       	ldd	r18, Y+11	; 0x0b
    208c:	3c 85       	ldd	r19, Y+12	; 0x0c
    208e:	b9 01       	movw	r22, r18
    2090:	0e 94 dd 16 	call	0x2dba	; 0x2dba <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    2094:	8f 81       	ldd	r24, Y+7	; 0x07
    2096:	98 85       	ldd	r25, Y+8	; 0x08
    2098:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    209c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    20a0:	88 23       	and	r24, r24
    20a2:	09 f0       	breq	.+2      	; 0x20a6 <xQueueGenericReceive+0x14a>
    20a4:	6d cf       	rjmp	.-294    	; 0x1f80 <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    20a6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
    20aa:	6a cf       	rjmp	.-300    	; 0x1f80 <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    20ac:	8f 81       	ldd	r24, Y+7	; 0x07
    20ae:	98 85       	ldd	r25, Y+8	; 0x08
    20b0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    20b4:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    20b8:	63 cf       	rjmp	.-314    	; 0x1f80 <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    20ba:	8f 81       	ldd	r24, Y+7	; 0x07
    20bc:	98 85       	ldd	r25, Y+8	; 0x08
    20be:	0e 94 db 11 	call	0x23b6	; 0x23b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    20c2:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    20c6:	1e 86       	std	Y+14, r1	; 0x0e
    20c8:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    20ca:	2e 96       	adiw	r28, 0x0e	; 14
    20cc:	0f b6       	in	r0, 0x3f	; 63
    20ce:	f8 94       	cli
    20d0:	de bf       	out	0x3e, r29	; 62
    20d2:	0f be       	out	0x3f, r0	; 63
    20d4:	cd bf       	out	0x3d, r28	; 61
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	28 97       	sbiw	r28, 0x08	; 8
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	7e 83       	std	Y+6, r23	; 0x06
    20f6:	6d 83       	std	Y+5, r22	; 0x05
    20f8:	58 87       	std	Y+8, r21	; 0x08
    20fa:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    20fc:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    20fe:	eb 81       	ldd	r30, Y+3	; 0x03
    2100:	fc 81       	ldd	r31, Y+4	; 0x04
    2102:	82 8d       	ldd	r24, Z+26	; 0x1a
    2104:	88 23       	and	r24, r24
    2106:	71 f1       	breq	.+92     	; 0x2164 <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    2108:	8b 81       	ldd	r24, Y+3	; 0x03
    210a:	9c 81       	ldd	r25, Y+4	; 0x04
    210c:	2d 81       	ldd	r18, Y+5	; 0x05
    210e:	3e 81       	ldd	r19, Y+6	; 0x06
    2110:	b9 01       	movw	r22, r18
    2112:	0e 94 93 11 	call	0x2326	; 0x2326 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    2116:	eb 81       	ldd	r30, Y+3	; 0x03
    2118:	fc 81       	ldd	r31, Y+4	; 0x04
    211a:	82 8d       	ldd	r24, Z+26	; 0x1a
    211c:	81 50       	subi	r24, 0x01	; 1
    211e:	eb 81       	ldd	r30, Y+3	; 0x03
    2120:	fc 81       	ldd	r31, Y+4	; 0x04
    2122:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    2124:	eb 81       	ldd	r30, Y+3	; 0x03
    2126:	fc 81       	ldd	r31, Y+4	; 0x04
    2128:	85 8d       	ldd	r24, Z+29	; 0x1d
    212a:	8f 3f       	cpi	r24, 0xFF	; 255
    212c:	89 f4       	brne	.+34     	; 0x2150 <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    212e:	eb 81       	ldd	r30, Y+3	; 0x03
    2130:	fc 81       	ldd	r31, Y+4	; 0x04
    2132:	80 85       	ldd	r24, Z+8	; 0x08
    2134:	88 23       	and	r24, r24
    2136:	99 f0       	breq	.+38     	; 0x215e <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    2138:	8b 81       	ldd	r24, Y+3	; 0x03
    213a:	9c 81       	ldd	r25, Y+4	; 0x04
    213c:	08 96       	adiw	r24, 0x08	; 8
    213e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    2142:	88 23       	and	r24, r24
    2144:	61 f0       	breq	.+24     	; 0x215e <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    2146:	ef 81       	ldd	r30, Y+7	; 0x07
    2148:	f8 85       	ldd	r31, Y+8	; 0x08
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	80 83       	st	Z, r24
    214e:	07 c0       	rjmp	.+14     	; 0x215e <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    2150:	eb 81       	ldd	r30, Y+3	; 0x03
    2152:	fc 81       	ldd	r31, Y+4	; 0x04
    2154:	85 8d       	ldd	r24, Z+29	; 0x1d
    2156:	8f 5f       	subi	r24, 0xFF	; 255
    2158:	eb 81       	ldd	r30, Y+3	; 0x03
    215a:	fc 81       	ldd	r31, Y+4	; 0x04
    215c:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    2164:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2168:	28 96       	adiw	r28, 0x08	; 8
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <uxQueueMessagesWaiting+0x6>
    2180:	0f 92       	push	r0
    2182:	cd b7       	in	r28, 0x3d	; 61
    2184:	de b7       	in	r29, 0x3e	; 62
    2186:	9b 83       	std	Y+3, r25	; 0x03
    2188:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    218a:	0f b6       	in	r0, 0x3f	; 63
    218c:	f8 94       	cli
    218e:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    2190:	ea 81       	ldd	r30, Y+2	; 0x02
    2192:	fb 81       	ldd	r31, Y+3	; 0x03
    2194:	82 8d       	ldd	r24, Z+26	; 0x1a
    2196:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2198:	0f 90       	pop	r0
    219a:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    219c:	89 81       	ldd	r24, Y+1	; 0x01
}
    219e:	0f 90       	pop	r0
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <uxQueueMessagesWaitingFromISR+0x6>
    21b0:	0f 92       	push	r0
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	9b 83       	std	Y+3, r25	; 0x03
    21b8:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    21ba:	ea 81       	ldd	r30, Y+2	; 0x02
    21bc:	fb 81       	ldd	r31, Y+3	; 0x03
    21be:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c0:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
}
    21c4:	0f 90       	pop	r0
    21c6:	0f 90       	pop	r0
    21c8:	0f 90       	pop	r0
    21ca:	cf 91       	pop	r28
    21cc:	df 91       	pop	r29
    21ce:	08 95       	ret

000021d0 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    21d0:	df 93       	push	r29
    21d2:	cf 93       	push	r28
    21d4:	00 d0       	rcall	.+0      	; 0x21d6 <vQueueDelete+0x6>
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	9a 83       	std	Y+2, r25	; 0x02
    21dc:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    21de:	e9 81       	ldd	r30, Y+1	; 0x01
    21e0:	fa 81       	ldd	r31, Y+2	; 0x02
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
	vPortFree( pxQueue );
    21ea:	89 81       	ldd	r24, Y+1	; 0x01
    21ec:	9a 81       	ldd	r25, Y+2	; 0x02
    21ee:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
}
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	cf 91       	pop	r28
    21f8:	df 91       	pop	r29
    21fa:	08 95       	ret

000021fc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    21fc:	df 93       	push	r29
    21fe:	cf 93       	push	r28
    2200:	00 d0       	rcall	.+0      	; 0x2202 <prvCopyDataToQueue+0x6>
    2202:	00 d0       	rcall	.+0      	; 0x2204 <prvCopyDataToQueue+0x8>
    2204:	0f 92       	push	r0
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	9a 83       	std	Y+2, r25	; 0x02
    220c:	89 83       	std	Y+1, r24	; 0x01
    220e:	7c 83       	std	Y+4, r23	; 0x04
    2210:	6b 83       	std	Y+3, r22	; 0x03
    2212:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    2214:	e9 81       	ldd	r30, Y+1	; 0x01
    2216:	fa 81       	ldd	r31, Y+2	; 0x02
    2218:	84 8d       	ldd	r24, Z+28	; 0x1c
    221a:	88 23       	and	r24, r24
    221c:	09 f4       	brne	.+2      	; 0x2220 <prvCopyDataToQueue+0x24>
    221e:	74 c0       	rjmp	.+232    	; 0x2308 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    2220:	8d 81       	ldd	r24, Y+5	; 0x05
    2222:	88 23       	and	r24, r24
    2224:	99 f5       	brne	.+102    	; 0x228c <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    2226:	e9 81       	ldd	r30, Y+1	; 0x01
    2228:	fa 81       	ldd	r31, Y+2	; 0x02
    222a:	64 81       	ldd	r22, Z+4	; 0x04
    222c:	75 81       	ldd	r23, Z+5	; 0x05
    222e:	e9 81       	ldd	r30, Y+1	; 0x01
    2230:	fa 81       	ldd	r31, Y+2	; 0x02
    2232:	84 8d       	ldd	r24, Z+28	; 0x1c
    2234:	48 2f       	mov	r20, r24
    2236:	50 e0       	ldi	r21, 0x00	; 0
    2238:	2b 81       	ldd	r18, Y+3	; 0x03
    223a:	3c 81       	ldd	r19, Y+4	; 0x04
    223c:	cb 01       	movw	r24, r22
    223e:	b9 01       	movw	r22, r18
    2240:	0e 94 35 30 	call	0x606a	; 0x606a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    2244:	e9 81       	ldd	r30, Y+1	; 0x01
    2246:	fa 81       	ldd	r31, Y+2	; 0x02
    2248:	24 81       	ldd	r18, Z+4	; 0x04
    224a:	35 81       	ldd	r19, Z+5	; 0x05
    224c:	e9 81       	ldd	r30, Y+1	; 0x01
    224e:	fa 81       	ldd	r31, Y+2	; 0x02
    2250:	84 8d       	ldd	r24, Z+28	; 0x1c
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	82 0f       	add	r24, r18
    2258:	93 1f       	adc	r25, r19
    225a:	e9 81       	ldd	r30, Y+1	; 0x01
    225c:	fa 81       	ldd	r31, Y+2	; 0x02
    225e:	95 83       	std	Z+5, r25	; 0x05
    2260:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    2262:	e9 81       	ldd	r30, Y+1	; 0x01
    2264:	fa 81       	ldd	r31, Y+2	; 0x02
    2266:	24 81       	ldd	r18, Z+4	; 0x04
    2268:	35 81       	ldd	r19, Z+5	; 0x05
    226a:	e9 81       	ldd	r30, Y+1	; 0x01
    226c:	fa 81       	ldd	r31, Y+2	; 0x02
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	08 f4       	brcc	.+2      	; 0x227a <prvCopyDataToQueue+0x7e>
    2278:	47 c0       	rjmp	.+142    	; 0x2308 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    227a:	e9 81       	ldd	r30, Y+1	; 0x01
    227c:	fa 81       	ldd	r31, Y+2	; 0x02
    227e:	80 81       	ld	r24, Z
    2280:	91 81       	ldd	r25, Z+1	; 0x01
    2282:	e9 81       	ldd	r30, Y+1	; 0x01
    2284:	fa 81       	ldd	r31, Y+2	; 0x02
    2286:	95 83       	std	Z+5, r25	; 0x05
    2288:	84 83       	std	Z+4, r24	; 0x04
    228a:	3e c0       	rjmp	.+124    	; 0x2308 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    228c:	e9 81       	ldd	r30, Y+1	; 0x01
    228e:	fa 81       	ldd	r31, Y+2	; 0x02
    2290:	66 81       	ldd	r22, Z+6	; 0x06
    2292:	77 81       	ldd	r23, Z+7	; 0x07
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	84 8d       	ldd	r24, Z+28	; 0x1c
    229a:	48 2f       	mov	r20, r24
    229c:	50 e0       	ldi	r21, 0x00	; 0
    229e:	2b 81       	ldd	r18, Y+3	; 0x03
    22a0:	3c 81       	ldd	r19, Y+4	; 0x04
    22a2:	cb 01       	movw	r24, r22
    22a4:	b9 01       	movw	r22, r18
    22a6:	0e 94 35 30 	call	0x606a	; 0x606a <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    22aa:	e9 81       	ldd	r30, Y+1	; 0x01
    22ac:	fa 81       	ldd	r31, Y+2	; 0x02
    22ae:	26 81       	ldd	r18, Z+6	; 0x06
    22b0:	37 81       	ldd	r19, Z+7	; 0x07
    22b2:	e9 81       	ldd	r30, Y+1	; 0x01
    22b4:	fa 81       	ldd	r31, Y+2	; 0x02
    22b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	90 95       	com	r25
    22be:	81 95       	neg	r24
    22c0:	9f 4f       	sbci	r25, 0xFF	; 255
    22c2:	82 0f       	add	r24, r18
    22c4:	93 1f       	adc	r25, r19
    22c6:	e9 81       	ldd	r30, Y+1	; 0x01
    22c8:	fa 81       	ldd	r31, Y+2	; 0x02
    22ca:	97 83       	std	Z+7, r25	; 0x07
    22cc:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    22ce:	e9 81       	ldd	r30, Y+1	; 0x01
    22d0:	fa 81       	ldd	r31, Y+2	; 0x02
    22d2:	26 81       	ldd	r18, Z+6	; 0x06
    22d4:	37 81       	ldd	r19, Z+7	; 0x07
    22d6:	e9 81       	ldd	r30, Y+1	; 0x01
    22d8:	fa 81       	ldd	r31, Y+2	; 0x02
    22da:	80 81       	ld	r24, Z
    22dc:	91 81       	ldd	r25, Z+1	; 0x01
    22de:	28 17       	cp	r18, r24
    22e0:	39 07       	cpc	r19, r25
    22e2:	90 f4       	brcc	.+36     	; 0x2308 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    22e4:	e9 81       	ldd	r30, Y+1	; 0x01
    22e6:	fa 81       	ldd	r31, Y+2	; 0x02
    22e8:	22 81       	ldd	r18, Z+2	; 0x02
    22ea:	33 81       	ldd	r19, Z+3	; 0x03
    22ec:	e9 81       	ldd	r30, Y+1	; 0x01
    22ee:	fa 81       	ldd	r31, Y+2	; 0x02
    22f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	90 95       	com	r25
    22f8:	81 95       	neg	r24
    22fa:	9f 4f       	sbci	r25, 0xFF	; 255
    22fc:	82 0f       	add	r24, r18
    22fe:	93 1f       	adc	r25, r19
    2300:	e9 81       	ldd	r30, Y+1	; 0x01
    2302:	fa 81       	ldd	r31, Y+2	; 0x02
    2304:	97 83       	std	Z+7, r25	; 0x07
    2306:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    2308:	e9 81       	ldd	r30, Y+1	; 0x01
    230a:	fa 81       	ldd	r31, Y+2	; 0x02
    230c:	82 8d       	ldd	r24, Z+26	; 0x1a
    230e:	8f 5f       	subi	r24, 0xFF	; 255
    2310:	e9 81       	ldd	r30, Y+1	; 0x01
    2312:	fa 81       	ldd	r31, Y+2	; 0x02
    2314:	82 8f       	std	Z+26, r24	; 0x1a
}
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	cf 91       	pop	r28
    2322:	df 91       	pop	r29
    2324:	08 95       	ret

00002326 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    2326:	df 93       	push	r29
    2328:	cf 93       	push	r28
    232a:	00 d0       	rcall	.+0      	; 0x232c <prvCopyDataFromQueue+0x6>
    232c:	00 d0       	rcall	.+0      	; 0x232e <prvCopyDataFromQueue+0x8>
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	9a 83       	std	Y+2, r25	; 0x02
    2334:	89 83       	std	Y+1, r24	; 0x01
    2336:	7c 83       	std	Y+4, r23	; 0x04
    2338:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    233a:	e9 81       	ldd	r30, Y+1	; 0x01
    233c:	fa 81       	ldd	r31, Y+2	; 0x02
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	89 f1       	breq	.+98     	; 0x23a8 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    2346:	e9 81       	ldd	r30, Y+1	; 0x01
    2348:	fa 81       	ldd	r31, Y+2	; 0x02
    234a:	26 81       	ldd	r18, Z+6	; 0x06
    234c:	37 81       	ldd	r19, Z+7	; 0x07
    234e:	e9 81       	ldd	r30, Y+1	; 0x01
    2350:	fa 81       	ldd	r31, Y+2	; 0x02
    2352:	84 8d       	ldd	r24, Z+28	; 0x1c
    2354:	88 2f       	mov	r24, r24
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	82 0f       	add	r24, r18
    235a:	93 1f       	adc	r25, r19
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	97 83       	std	Z+7, r25	; 0x07
    2362:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    2364:	e9 81       	ldd	r30, Y+1	; 0x01
    2366:	fa 81       	ldd	r31, Y+2	; 0x02
    2368:	26 81       	ldd	r18, Z+6	; 0x06
    236a:	37 81       	ldd	r19, Z+7	; 0x07
    236c:	e9 81       	ldd	r30, Y+1	; 0x01
    236e:	fa 81       	ldd	r31, Y+2	; 0x02
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	28 17       	cp	r18, r24
    2376:	39 07       	cpc	r19, r25
    2378:	40 f0       	brcs	.+16     	; 0x238a <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    237a:	e9 81       	ldd	r30, Y+1	; 0x01
    237c:	fa 81       	ldd	r31, Y+2	; 0x02
    237e:	80 81       	ld	r24, Z
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	e9 81       	ldd	r30, Y+1	; 0x01
    2384:	fa 81       	ldd	r31, Y+2	; 0x02
    2386:	97 83       	std	Z+7, r25	; 0x07
    2388:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    238a:	e9 81       	ldd	r30, Y+1	; 0x01
    238c:	fa 81       	ldd	r31, Y+2	; 0x02
    238e:	46 81       	ldd	r20, Z+6	; 0x06
    2390:	57 81       	ldd	r21, Z+7	; 0x07
    2392:	e9 81       	ldd	r30, Y+1	; 0x01
    2394:	fa 81       	ldd	r31, Y+2	; 0x02
    2396:	84 8d       	ldd	r24, Z+28	; 0x1c
    2398:	28 2f       	mov	r18, r24
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	ba 01       	movw	r22, r20
    23a2:	a9 01       	movw	r20, r18
    23a4:	0e 94 35 30 	call	0x606a	; 0x606a <memcpy>
	}
}
    23a8:	0f 90       	pop	r0
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	cf 91       	pop	r28
    23b2:	df 91       	pop	r29
    23b4:	08 95       	ret

000023b6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    23b6:	df 93       	push	r29
    23b8:	cf 93       	push	r28
    23ba:	00 d0       	rcall	.+0      	; 0x23bc <prvUnlockQueue+0x6>
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	9a 83       	std	Y+2, r25	; 0x02
    23c2:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	0f 92       	push	r0
    23ca:	15 c0       	rjmp	.+42     	; 0x23f6 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    23cc:	e9 81       	ldd	r30, Y+1	; 0x01
    23ce:	fa 81       	ldd	r31, Y+2	; 0x02
    23d0:	81 89       	ldd	r24, Z+17	; 0x11
    23d2:	88 23       	and	r24, r24
    23d4:	a9 f0       	breq	.+42     	; 0x2400 <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	41 96       	adiw	r24, 0x11	; 17
    23dc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    23e0:	88 23       	and	r24, r24
    23e2:	11 f0       	breq	.+4      	; 0x23e8 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    23e4:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    23e8:	e9 81       	ldd	r30, Y+1	; 0x01
    23ea:	fa 81       	ldd	r31, Y+2	; 0x02
    23ec:	86 8d       	ldd	r24, Z+30	; 0x1e
    23ee:	81 50       	subi	r24, 0x01	; 1
    23f0:	e9 81       	ldd	r30, Y+1	; 0x01
    23f2:	fa 81       	ldd	r31, Y+2	; 0x02
    23f4:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    23f6:	e9 81       	ldd	r30, Y+1	; 0x01
    23f8:	fa 81       	ldd	r31, Y+2	; 0x02
    23fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    23fc:	18 16       	cp	r1, r24
    23fe:	34 f3       	brlt	.-52     	; 0x23cc <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    2400:	e9 81       	ldd	r30, Y+1	; 0x01
    2402:	fa 81       	ldd	r31, Y+2	; 0x02
    2404:	8f ef       	ldi	r24, 0xFF	; 255
    2406:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    2408:	0f 90       	pop	r0
    240a:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	0f 92       	push	r0
    2412:	15 c0       	rjmp	.+42     	; 0x243e <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    2414:	e9 81       	ldd	r30, Y+1	; 0x01
    2416:	fa 81       	ldd	r31, Y+2	; 0x02
    2418:	80 85       	ldd	r24, Z+8	; 0x08
    241a:	88 23       	and	r24, r24
    241c:	a9 f0       	breq	.+42     	; 0x2448 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	08 96       	adiw	r24, 0x08	; 8
    2424:	0e 94 13 17 	call	0x2e26	; 0x2e26 <xTaskRemoveFromEventList>
    2428:	88 23       	and	r24, r24
    242a:	11 f0       	breq	.+4      	; 0x2430 <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    242c:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    2430:	e9 81       	ldd	r30, Y+1	; 0x01
    2432:	fa 81       	ldd	r31, Y+2	; 0x02
    2434:	85 8d       	ldd	r24, Z+29	; 0x1d
    2436:	81 50       	subi	r24, 0x01	; 1
    2438:	e9 81       	ldd	r30, Y+1	; 0x01
    243a:	fa 81       	ldd	r31, Y+2	; 0x02
    243c:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    243e:	e9 81       	ldd	r30, Y+1	; 0x01
    2440:	fa 81       	ldd	r31, Y+2	; 0x02
    2442:	85 8d       	ldd	r24, Z+29	; 0x1d
    2444:	18 16       	cp	r1, r24
    2446:	34 f3       	brlt	.-52     	; 0x2414 <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    2448:	e9 81       	ldd	r30, Y+1	; 0x01
    244a:	fa 81       	ldd	r31, Y+2	; 0x02
    244c:	8f ef       	ldi	r24, 0xFF	; 255
    244e:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    2450:	0f 90       	pop	r0
    2452:	0f be       	out	0x3f, r0	; 63
}
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	cf 91       	pop	r28
    245a:	df 91       	pop	r29
    245c:	08 95       	ret

0000245e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    245e:	df 93       	push	r29
    2460:	cf 93       	push	r28
    2462:	00 d0       	rcall	.+0      	; 0x2464 <prvIsQueueEmpty+0x6>
    2464:	0f 92       	push	r0
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	9b 83       	std	Y+3, r25	; 0x03
    246c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    246e:	0f b6       	in	r0, 0x3f	; 63
    2470:	f8 94       	cli
    2472:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    2474:	ea 81       	ldd	r30, Y+2	; 0x02
    2476:	fb 81       	ldd	r31, Y+3	; 0x03
    2478:	82 8d       	ldd	r24, Z+26	; 0x1a
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	88 23       	and	r24, r24
    247e:	11 f4       	brne	.+4      	; 0x2484 <prvIsQueueEmpty+0x26>
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    2484:	0f 90       	pop	r0
    2486:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2488:	89 81       	ldd	r24, Y+1	; 0x01
}
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	08 95       	ret

00002496 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    2496:	df 93       	push	r29
    2498:	cf 93       	push	r28
    249a:	00 d0       	rcall	.+0      	; 0x249c <xQueueIsQueueEmptyFromISR+0x6>
    249c:	0f 92       	push	r0
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	9b 83       	std	Y+3, r25	; 0x03
    24a4:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    24a6:	ea 81       	ldd	r30, Y+2	; 0x02
    24a8:	fb 81       	ldd	r31, Y+3	; 0x03
    24aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ac:	19 82       	std	Y+1, r1	; 0x01
    24ae:	88 23       	and	r24, r24
    24b0:	11 f4       	brne	.+4      	; 0x24b6 <xQueueIsQueueEmptyFromISR+0x20>
    24b2:	81 e0       	ldi	r24, 0x01	; 1
    24b4:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    24b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <prvIsQueueFull+0x6>
    24ca:	0f 92       	push	r0
    24cc:	cd b7       	in	r28, 0x3d	; 61
    24ce:	de b7       	in	r29, 0x3e	; 62
    24d0:	9b 83       	std	Y+3, r25	; 0x03
    24d2:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    24d4:	0f b6       	in	r0, 0x3f	; 63
    24d6:	f8 94       	cli
    24d8:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    24da:	ea 81       	ldd	r30, Y+2	; 0x02
    24dc:	fb 81       	ldd	r31, Y+3	; 0x03
    24de:	92 8d       	ldd	r25, Z+26	; 0x1a
    24e0:	ea 81       	ldd	r30, Y+2	; 0x02
    24e2:	fb 81       	ldd	r31, Y+3	; 0x03
    24e4:	83 8d       	ldd	r24, Z+27	; 0x1b
    24e6:	19 82       	std	Y+1, r1	; 0x01
    24e8:	98 17       	cp	r25, r24
    24ea:	11 f4       	brne	.+4      	; 0x24f0 <prvIsQueueFull+0x2c>
    24ec:	81 e0       	ldi	r24, 0x01	; 1
    24ee:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    24f0:	0f 90       	pop	r0
    24f2:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24f6:	0f 90       	pop	r0
    24f8:	0f 90       	pop	r0
    24fa:	0f 90       	pop	r0
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	00 d0       	rcall	.+0      	; 0x2508 <xQueueIsQueueFullFromISR+0x6>
    2508:	0f 92       	push	r0
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	9b 83       	std	Y+3, r25	; 0x03
    2510:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    2512:	ea 81       	ldd	r30, Y+2	; 0x02
    2514:	fb 81       	ldd	r31, Y+3	; 0x03
    2516:	92 8d       	ldd	r25, Z+26	; 0x1a
    2518:	ea 81       	ldd	r30, Y+2	; 0x02
    251a:	fb 81       	ldd	r31, Y+3	; 0x03
    251c:	83 8d       	ldd	r24, Z+27	; 0x1b
    251e:	19 82       	std	Y+1, r1	; 0x01
    2520:	98 17       	cp	r25, r24
    2522:	11 f4       	brne	.+4      	; 0x2528 <xQueueIsQueueFullFromISR+0x26>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    2528:	89 81       	ldd	r24, Y+1	; 0x01
}
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    2536:	af 92       	push	r10
    2538:	bf 92       	push	r11
    253a:	cf 92       	push	r12
    253c:	df 92       	push	r13
    253e:	ef 92       	push	r14
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	64 97       	sbiw	r28, 0x14	; 20
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	9f 83       	std	Y+7, r25	; 0x07
    255c:	8e 83       	std	Y+6, r24	; 0x06
    255e:	79 87       	std	Y+9, r23	; 0x09
    2560:	68 87       	std	Y+8, r22	; 0x08
    2562:	5b 87       	std	Y+11, r21	; 0x0b
    2564:	4a 87       	std	Y+10, r20	; 0x0a
    2566:	3d 87       	std	Y+13, r19	; 0x0d
    2568:	2c 87       	std	Y+12, r18	; 0x0c
    256a:	0e 87       	std	Y+14, r16	; 0x0e
    256c:	f8 8a       	std	Y+16, r15	; 0x10
    256e:	ef 86       	std	Y+15, r14	; 0x0f
    2570:	da 8a       	std	Y+18, r13	; 0x12
    2572:	c9 8a       	std	Y+17, r12	; 0x11
    2574:	bc 8a       	std	Y+20, r11	; 0x14
    2576:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    2578:	8a 85       	ldd	r24, Y+10	; 0x0a
    257a:	9b 85       	ldd	r25, Y+11	; 0x0b
    257c:	29 89       	ldd	r18, Y+17	; 0x11
    257e:	3a 89       	ldd	r19, Y+18	; 0x12
    2580:	b9 01       	movw	r22, r18
    2582:	0e 94 20 19 	call	0x3240	; 0x3240 <prvAllocateTCBAndStack>
    2586:	9c 83       	std	Y+4, r25	; 0x04
    2588:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    258a:	8b 81       	ldd	r24, Y+3	; 0x03
    258c:	9c 81       	ldd	r25, Y+4	; 0x04
    258e:	00 97       	sbiw	r24, 0x00	; 0
    2590:	09 f4       	brne	.+2      	; 0x2594 <xTaskGenericCreate+0x5e>
    2592:	99 c0       	rjmp	.+306    	; 0x26c6 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    2594:	eb 81       	ldd	r30, Y+3	; 0x03
    2596:	fc 81       	ldd	r31, Y+4	; 0x04
    2598:	27 89       	ldd	r18, Z+23	; 0x17
    259a:	30 8d       	ldd	r19, Z+24	; 0x18
    259c:	8a 85       	ldd	r24, Y+10	; 0x0a
    259e:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	82 0f       	add	r24, r18
    25a4:	93 1f       	adc	r25, r19
    25a6:	9a 83       	std	Y+2, r25	; 0x02
    25a8:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    25aa:	8b 81       	ldd	r24, Y+3	; 0x03
    25ac:	9c 81       	ldd	r25, Y+4	; 0x04
    25ae:	28 85       	ldd	r18, Y+8	; 0x08
    25b0:	39 85       	ldd	r19, Y+9	; 0x09
    25b2:	eb 89       	ldd	r30, Y+19	; 0x13
    25b4:	fc 89       	ldd	r31, Y+20	; 0x14
    25b6:	aa 85       	ldd	r26, Y+10	; 0x0a
    25b8:	bb 85       	ldd	r27, Y+11	; 0x0b
    25ba:	b9 01       	movw	r22, r18
    25bc:	4e 85       	ldd	r20, Y+14	; 0x0e
    25be:	9f 01       	movw	r18, r30
    25c0:	8d 01       	movw	r16, r26
    25c2:	0e 94 05 18 	call	0x300a	; 0x300a <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ca:	2e 81       	ldd	r18, Y+6	; 0x06
    25cc:	3f 81       	ldd	r19, Y+7	; 0x07
    25ce:	4c 85       	ldd	r20, Y+12	; 0x0c
    25d0:	5d 85       	ldd	r21, Y+13	; 0x0d
    25d2:	b9 01       	movw	r22, r18
    25d4:	0e 94 48 0b 	call	0x1690	; 0x1690 <pxPortInitialiseStack>
    25d8:	eb 81       	ldd	r30, Y+3	; 0x03
    25da:	fc 81       	ldd	r31, Y+4	; 0x04
    25dc:	91 83       	std	Z+1, r25	; 0x01
    25de:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    25e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e2:	98 89       	ldd	r25, Y+16	; 0x10
    25e4:	00 97       	sbiw	r24, 0x00	; 0
    25e6:	31 f0       	breq	.+12     	; 0x25f4 <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    25e8:	ef 85       	ldd	r30, Y+15	; 0x0f
    25ea:	f8 89       	ldd	r31, Y+16	; 0x10
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	91 83       	std	Z+1, r25	; 0x01
    25f2:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    25fa:	80 91 cd 06 	lds	r24, 0x06CD
    25fe:	8f 5f       	subi	r24, 0xFF	; 255
    2600:	80 93 cd 06 	sts	0x06CD, r24
			if( pxCurrentTCB == NULL )
    2604:	80 91 ca 06 	lds	r24, 0x06CA
    2608:	90 91 cb 06 	lds	r25, 0x06CB
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f4       	brne	.+26     	; 0x262a <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	90 93 cb 06 	sts	0x06CB, r25
    2618:	80 93 ca 06 	sts	0x06CA, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    261c:	80 91 cd 06 	lds	r24, 0x06CD
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	a9 f4       	brne	.+42     	; 0x264e <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    2624:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <prvInitialiseTaskLists>
    2628:	12 c0       	rjmp	.+36     	; 0x264e <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    262a:	80 91 d2 06 	lds	r24, 0x06D2
    262e:	88 23       	and	r24, r24
    2630:	71 f4       	brne	.+28     	; 0x264e <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    2632:	e0 91 ca 06 	lds	r30, 0x06CA
    2636:	f0 91 cb 06 	lds	r31, 0x06CB
    263a:	96 89       	ldd	r25, Z+22	; 0x16
    263c:	8e 85       	ldd	r24, Y+14	; 0x0e
    263e:	89 17       	cp	r24, r25
    2640:	30 f0       	brcs	.+12     	; 0x264e <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	90 93 cb 06 	sts	0x06CB, r25
    264a:	80 93 ca 06 	sts	0x06CA, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    264e:	eb 81       	ldd	r30, Y+3	; 0x03
    2650:	fc 81       	ldd	r31, Y+4	; 0x04
    2652:	96 89       	ldd	r25, Z+22	; 0x16
    2654:	80 91 d0 06 	lds	r24, 0x06D0
    2658:	89 17       	cp	r24, r25
    265a:	28 f4       	brcc	.+10     	; 0x2666 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    265c:	eb 81       	ldd	r30, Y+3	; 0x03
    265e:	fc 81       	ldd	r31, Y+4	; 0x04
    2660:	86 89       	ldd	r24, Z+22	; 0x16
    2662:	80 93 d0 06 	sts	0x06D0, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    2666:	80 91 d7 06 	lds	r24, 0x06D7
    266a:	8f 5f       	subi	r24, 0xFF	; 255
    266c:	80 93 d7 06 	sts	0x06D7, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    2670:	eb 81       	ldd	r30, Y+3	; 0x03
    2672:	fc 81       	ldd	r31, Y+4	; 0x04
    2674:	96 89       	ldd	r25, Z+22	; 0x16
    2676:	80 91 d1 06 	lds	r24, 0x06D1
    267a:	89 17       	cp	r24, r25
    267c:	28 f4       	brcc	.+10     	; 0x2688 <xTaskGenericCreate+0x152>
    267e:	eb 81       	ldd	r30, Y+3	; 0x03
    2680:	fc 81       	ldd	r31, Y+4	; 0x04
    2682:	86 89       	ldd	r24, Z+22	; 0x16
    2684:	80 93 d1 06 	sts	0x06D1, r24
    2688:	eb 81       	ldd	r30, Y+3	; 0x03
    268a:	fc 81       	ldd	r31, Y+4	; 0x04
    268c:	86 89       	ldd	r24, Z+22	; 0x16
    268e:	28 2f       	mov	r18, r24
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	c9 01       	movw	r24, r18
    2694:	88 0f       	add	r24, r24
    2696:	99 1f       	adc	r25, r25
    2698:	88 0f       	add	r24, r24
    269a:	99 1f       	adc	r25, r25
    269c:	88 0f       	add	r24, r24
    269e:	99 1f       	adc	r25, r25
    26a0:	82 0f       	add	r24, r18
    26a2:	93 1f       	adc	r25, r19
    26a4:	ac 01       	movw	r20, r24
    26a6:	48 52       	subi	r20, 0x28	; 40
    26a8:	59 4f       	sbci	r21, 0xF9	; 249
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	9c 01       	movw	r18, r24
    26b0:	2e 5f       	subi	r18, 0xFE	; 254
    26b2:	3f 4f       	sbci	r19, 0xFF	; 255
    26b4:	ca 01       	movw	r24, r20
    26b6:	b9 01       	movw	r22, r18
    26b8:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>

			xReturn = pdPASS;
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    26c0:	0f 90       	pop	r0
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	02 c0       	rjmp	.+4      	; 0x26ca <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    26c6:	8f ef       	ldi	r24, 0xFF	; 255
    26c8:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    26ca:	8d 81       	ldd	r24, Y+5	; 0x05
    26cc:	81 30       	cpi	r24, 0x01	; 1
    26ce:	71 f4       	brne	.+28     	; 0x26ec <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    26d0:	80 91 d2 06 	lds	r24, 0x06D2
    26d4:	88 23       	and	r24, r24
    26d6:	51 f0       	breq	.+20     	; 0x26ec <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    26d8:	e0 91 ca 06 	lds	r30, 0x06CA
    26dc:	f0 91 cb 06 	lds	r31, 0x06CB
    26e0:	96 89       	ldd	r25, Z+22	; 0x16
    26e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e4:	98 17       	cp	r25, r24
    26e6:	10 f4       	brcc	.+4      	; 0x26ec <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    26e8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
			}
		}
	}

	return xReturn;
    26ec:	8d 81       	ldd	r24, Y+5	; 0x05
}
    26ee:	64 96       	adiw	r28, 0x14	; 20
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	de bf       	out	0x3e, r29	; 62
    26f6:	0f be       	out	0x3f, r0	; 63
    26f8:	cd bf       	out	0x3d, r28	; 61
    26fa:	cf 91       	pop	r28
    26fc:	df 91       	pop	r29
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	08 95       	ret

00002710 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <vTaskDelete+0x6>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <vTaskDelete+0x8>
    2718:	00 d0       	rcall	.+0      	; 0x271a <vTaskDelete+0xa>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	9c 83       	std	Y+4, r25	; 0x04
    2720:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    2728:	20 91 ca 06 	lds	r18, 0x06CA
    272c:	30 91 cb 06 	lds	r19, 0x06CB
    2730:	8b 81       	ldd	r24, Y+3	; 0x03
    2732:	9c 81       	ldd	r25, Y+4	; 0x04
    2734:	82 17       	cp	r24, r18
    2736:	93 07       	cpc	r25, r19
    2738:	11 f4       	brne	.+4      	; 0x273e <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    273a:	1c 82       	std	Y+4, r1	; 0x04
    273c:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    273e:	8b 81       	ldd	r24, Y+3	; 0x03
    2740:	9c 81       	ldd	r25, Y+4	; 0x04
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	39 f4       	brne	.+14     	; 0x2754 <vTaskDelete+0x44>
    2746:	80 91 ca 06 	lds	r24, 0x06CA
    274a:	90 91 cb 06 	lds	r25, 0x06CB
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
    2752:	04 c0       	rjmp	.+8      	; 0x275c <vTaskDelete+0x4c>
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	9e 83       	std	Y+6, r25	; 0x06
    275a:	8d 83       	std	Y+5, r24	; 0x05
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	9e 81       	ldd	r25, Y+6	; 0x06
    2760:	9a 83       	std	Y+2, r25	; 0x02
    2762:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	02 96       	adiw	r24, 0x02	; 2
    276a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    276e:	e9 81       	ldd	r30, Y+1	; 0x01
    2770:	fa 81       	ldd	r31, Y+2	; 0x02
    2772:	84 89       	ldd	r24, Z+20	; 0x14
    2774:	95 89       	ldd	r25, Z+21	; 0x15
    2776:	00 97       	sbiw	r24, 0x00	; 0
    2778:	29 f0       	breq	.+10     	; 0x2784 <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	9a 81       	ldd	r25, Y+2	; 0x02
    277e:	0c 96       	adiw	r24, 0x0c	; 12
    2780:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	9c 01       	movw	r18, r24
    278a:	2e 5f       	subi	r18, 0xFE	; 254
    278c:	3f 4f       	sbci	r19, 0xFF	; 255
    278e:	84 e2       	ldi	r24, 0x24	; 36
    2790:	97 e0       	ldi	r25, 0x07	; 7
    2792:	b9 01       	movw	r22, r18
    2794:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    2798:	80 91 cc 06 	lds	r24, 0x06CC
    279c:	8f 5f       	subi	r24, 0xFF	; 255
    279e:	80 93 cc 06 	sts	0x06CC, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    27a2:	80 91 d7 06 	lds	r24, 0x06D7
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	80 93 d7 06 	sts	0x06D7, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    27ac:	0f 90       	pop	r0
    27ae:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    27b0:	80 91 d2 06 	lds	r24, 0x06D2
    27b4:	88 23       	and	r24, r24
    27b6:	31 f0       	breq	.+12     	; 0x27c4 <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    27b8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ba:	9c 81       	ldd	r25, Y+4	; 0x04
    27bc:	00 97       	sbiw	r24, 0x00	; 0
    27be:	11 f4       	brne	.+4      	; 0x27c4 <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    27c0:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
			}
		}
	}
    27c4:	26 96       	adiw	r28, 0x06	; 6
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	08 95       	ret

000027d6 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    27d6:	df 93       	push	r29
    27d8:	cf 93       	push	r28
    27da:	cd b7       	in	r28, 0x3d	; 61
    27dc:	de b7       	in	r29, 0x3e	; 62
    27de:	28 97       	sbiw	r28, 0x08	; 8
    27e0:	0f b6       	in	r0, 0x3f	; 63
    27e2:	f8 94       	cli
    27e4:	de bf       	out	0x3e, r29	; 62
    27e6:	0f be       	out	0x3f, r0	; 63
    27e8:	cd bf       	out	0x3d, r28	; 61
    27ea:	9e 83       	std	Y+6, r25	; 0x06
    27ec:	8d 83       	std	Y+5, r24	; 0x05
    27ee:	78 87       	std	Y+8, r23	; 0x08
    27f0:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    27f2:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    27f4:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    27f8:	ed 81       	ldd	r30, Y+5	; 0x05
    27fa:	fe 81       	ldd	r31, Y+6	; 0x06
    27fc:	20 81       	ld	r18, Z
    27fe:	31 81       	ldd	r19, Z+1	; 0x01
    2800:	8f 81       	ldd	r24, Y+7	; 0x07
    2802:	98 85       	ldd	r25, Y+8	; 0x08
    2804:	82 0f       	add	r24, r18
    2806:	93 1f       	adc	r25, r19
    2808:	9c 83       	std	Y+4, r25	; 0x04
    280a:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    280c:	ed 81       	ldd	r30, Y+5	; 0x05
    280e:	fe 81       	ldd	r31, Y+6	; 0x06
    2810:	20 81       	ld	r18, Z
    2812:	31 81       	ldd	r19, Z+1	; 0x01
    2814:	80 91 ce 06 	lds	r24, 0x06CE
    2818:	90 91 cf 06 	lds	r25, 0x06CF
    281c:	82 17       	cp	r24, r18
    281e:	93 07       	cpc	r25, r19
    2820:	a8 f4       	brcc	.+42     	; 0x284c <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    2822:	ed 81       	ldd	r30, Y+5	; 0x05
    2824:	fe 81       	ldd	r31, Y+6	; 0x06
    2826:	20 81       	ld	r18, Z
    2828:	31 81       	ldd	r19, Z+1	; 0x01
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	82 17       	cp	r24, r18
    2830:	93 07       	cpc	r25, r19
    2832:	00 f5       	brcc	.+64     	; 0x2874 <vTaskDelayUntil+0x9e>
    2834:	20 91 ce 06 	lds	r18, 0x06CE
    2838:	30 91 cf 06 	lds	r19, 0x06CF
    283c:	8b 81       	ldd	r24, Y+3	; 0x03
    283e:	9c 81       	ldd	r25, Y+4	; 0x04
    2840:	28 17       	cp	r18, r24
    2842:	39 07       	cpc	r19, r25
    2844:	b8 f4       	brcc	.+46     	; 0x2874 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2846:	81 e0       	ldi	r24, 0x01	; 1
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	14 c0       	rjmp	.+40     	; 0x2874 <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    284c:	ed 81       	ldd	r30, Y+5	; 0x05
    284e:	fe 81       	ldd	r31, Y+6	; 0x06
    2850:	20 81       	ld	r18, Z
    2852:	31 81       	ldd	r19, Z+1	; 0x01
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	82 17       	cp	r24, r18
    285a:	93 07       	cpc	r25, r19
    285c:	48 f0       	brcs	.+18     	; 0x2870 <vTaskDelayUntil+0x9a>
    285e:	20 91 ce 06 	lds	r18, 0x06CE
    2862:	30 91 cf 06 	lds	r19, 0x06CF
    2866:	8b 81       	ldd	r24, Y+3	; 0x03
    2868:	9c 81       	ldd	r25, Y+4	; 0x04
    286a:	28 17       	cp	r18, r24
    286c:	39 07       	cpc	r19, r25
    286e:	10 f4       	brcc	.+4      	; 0x2874 <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    2874:	ed 81       	ldd	r30, Y+5	; 0x05
    2876:	fe 81       	ldd	r31, Y+6	; 0x06
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	91 83       	std	Z+1, r25	; 0x01
    287e:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	88 23       	and	r24, r24
    2884:	59 f0       	breq	.+22     	; 0x289c <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2886:	80 91 ca 06 	lds	r24, 0x06CA
    288a:	90 91 cb 06 	lds	r25, 0x06CB
    288e:	02 96       	adiw	r24, 0x02	; 2
    2890:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2894:	8b 81       	ldd	r24, Y+3	; 0x03
    2896:	9c 81       	ldd	r25, Y+4	; 0x04
    2898:	0e 94 d7 18 	call	0x31ae	; 0x31ae <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    289c:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    28a0:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    28a2:	8a 81       	ldd	r24, Y+2	; 0x02
    28a4:	88 23       	and	r24, r24
    28a6:	11 f4       	brne	.+4      	; 0x28ac <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    28a8:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
		}
	}
    28ac:	28 96       	adiw	r28, 0x08	; 8
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <vTaskDelay+0x6>
    28c4:	00 d0       	rcall	.+0      	; 0x28c6 <vTaskDelay+0x8>
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	9d 83       	std	Y+5, r25	; 0x05
    28ce:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    28d0:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	9d 81       	ldd	r25, Y+5	; 0x05
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	d1 f0       	breq	.+52     	; 0x290e <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    28da:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    28de:	20 91 ce 06 	lds	r18, 0x06CE
    28e2:	30 91 cf 06 	lds	r19, 0x06CF
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ea:	82 0f       	add	r24, r18
    28ec:	93 1f       	adc	r25, r19
    28ee:	9b 83       	std	Y+3, r25	; 0x03
    28f0:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    28f2:	80 91 ca 06 	lds	r24, 0x06CA
    28f6:	90 91 cb 06 	lds	r25, 0x06CB
    28fa:	02 96       	adiw	r24, 0x02	; 2
    28fc:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	0e 94 d7 18 	call	0x31ae	; 0x31ae <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    2908:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>
    290c:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	88 23       	and	r24, r24
    2912:	11 f4       	brne	.+4      	; 0x2918 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    2914:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
		}
	}
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	0f 90       	pop	r0
    2922:	cf 91       	pop	r28
    2924:	df 91       	pop	r29
    2926:	08 95       	ret

00002928 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    2928:	af 92       	push	r10
    292a:	bf 92       	push	r11
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	df 93       	push	r29
    2938:	cf 93       	push	r28
    293a:	0f 92       	push	r0
    293c:	cd b7       	in	r28, 0x3d	; 61
    293e:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    2940:	20 e6       	ldi	r18, 0x60	; 96
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	8b ef       	ldi	r24, 0xFB	; 251
    2946:	97 e1       	ldi	r25, 0x17	; 23
    2948:	b9 01       	movw	r22, r18
    294a:	48 ec       	ldi	r20, 0xC8	; 200
    294c:	50 e0       	ldi	r21, 0x00	; 0
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e0       	ldi	r19, 0x00	; 0
    2952:	00 e0       	ldi	r16, 0x00	; 0
    2954:	ee 24       	eor	r14, r14
    2956:	ff 24       	eor	r15, r15
    2958:	cc 24       	eor	r12, r12
    295a:	dd 24       	eor	r13, r13
    295c:	aa 24       	eor	r10, r10
    295e:	bb 24       	eor	r11, r11
    2960:	0e 94 9b 12 	call	0x2536	; 0x2536 <xTaskGenericCreate>
    2964:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	81 30       	cpi	r24, 0x01	; 1
    296a:	51 f4       	brne	.+20     	; 0x2980 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    296c:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	80 93 d2 06 	sts	0x06D2, r24
		xTickCount = ( portTickType ) 0U;
    2974:	10 92 cf 06 	sts	0x06CF, r1
    2978:	10 92 ce 06 	sts	0x06CE, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    297c:	0e 94 cb 0c 	call	0x1996	; 0x1996 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    2980:	0f 90       	pop	r0
    2982:	cf 91       	pop	r28
    2984:	df 91       	pop	r29
    2986:	0f 91       	pop	r16
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    2990:	bf 90       	pop	r11
    2992:	af 90       	pop	r10
    2994:	08 95       	ret

00002996 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    2996:	df 93       	push	r29
    2998:	cf 93       	push	r28
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    299e:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    29a0:	10 92 d2 06 	sts	0x06D2, r1
	vPortEndScheduler();
    29a4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <vPortEndScheduler>
}
    29a8:	cf 91       	pop	r28
    29aa:	df 91       	pop	r29
    29ac:	08 95       	ret

000029ae <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    29ae:	df 93       	push	r29
    29b0:	cf 93       	push	r28
    29b2:	cd b7       	in	r28, 0x3d	; 61
    29b4:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    29b6:	80 91 d3 06 	lds	r24, 0x06D3
    29ba:	8f 5f       	subi	r24, 0xFF	; 255
    29bc:	80 93 d3 06 	sts	0x06D3, r24
}
    29c0:	cf 91       	pop	r28
    29c2:	df 91       	pop	r29
    29c4:	08 95       	ret

000029c6 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    29c6:	df 93       	push	r29
    29c8:	cf 93       	push	r28
    29ca:	00 d0       	rcall	.+0      	; 0x29cc <xTaskResumeAll+0x6>
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <xTaskResumeAll+0x8>
    29ce:	cd b7       	in	r28, 0x3d	; 61
    29d0:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    29d2:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	f8 94       	cli
    29d8:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    29da:	80 91 d3 06 	lds	r24, 0x06D3
    29de:	81 50       	subi	r24, 0x01	; 1
    29e0:	80 93 d3 06 	sts	0x06D3, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    29e4:	80 91 d3 06 	lds	r24, 0x06D3
    29e8:	88 23       	and	r24, r24
    29ea:	09 f0       	breq	.+2      	; 0x29ee <xTaskResumeAll+0x28>
    29ec:	6c c0       	rjmp	.+216    	; 0x2ac6 <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    29ee:	80 91 cd 06 	lds	r24, 0x06CD
    29f2:	88 23       	and	r24, r24
    29f4:	09 f4       	brne	.+2      	; 0x29f8 <xTaskResumeAll+0x32>
    29f6:	67 c0       	rjmp	.+206    	; 0x2ac6 <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    29f8:	19 82       	std	Y+1, r1	; 0x01
    29fa:	41 c0       	rjmp	.+130    	; 0x2a7e <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    29fc:	e0 91 20 07 	lds	r30, 0x0720
    2a00:	f0 91 21 07 	lds	r31, 0x0721
    2a04:	86 81       	ldd	r24, Z+6	; 0x06
    2a06:	97 81       	ldd	r25, Z+7	; 0x07
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	0c 96       	adiw	r24, 0x0c	; 12
    2a12:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    2a16:	8b 81       	ldd	r24, Y+3	; 0x03
    2a18:	9c 81       	ldd	r25, Y+4	; 0x04
    2a1a:	02 96       	adiw	r24, 0x02	; 2
    2a1c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    2a20:	eb 81       	ldd	r30, Y+3	; 0x03
    2a22:	fc 81       	ldd	r31, Y+4	; 0x04
    2a24:	96 89       	ldd	r25, Z+22	; 0x16
    2a26:	80 91 d1 06 	lds	r24, 0x06D1
    2a2a:	89 17       	cp	r24, r25
    2a2c:	28 f4       	brcc	.+10     	; 0x2a38 <xTaskResumeAll+0x72>
    2a2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2a30:	fc 81       	ldd	r31, Y+4	; 0x04
    2a32:	86 89       	ldd	r24, Z+22	; 0x16
    2a34:	80 93 d1 06 	sts	0x06D1, r24
    2a38:	eb 81       	ldd	r30, Y+3	; 0x03
    2a3a:	fc 81       	ldd	r31, Y+4	; 0x04
    2a3c:	86 89       	ldd	r24, Z+22	; 0x16
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	c9 01       	movw	r24, r18
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	82 0f       	add	r24, r18
    2a52:	93 1f       	adc	r25, r19
    2a54:	88 52       	subi	r24, 0x28	; 40
    2a56:	99 4f       	sbci	r25, 0xF9	; 249
    2a58:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5a:	3c 81       	ldd	r19, Y+4	; 0x04
    2a5c:	2e 5f       	subi	r18, 0xFE	; 254
    2a5e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a60:	b9 01       	movw	r22, r18
    2a62:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2a66:	eb 81       	ldd	r30, Y+3	; 0x03
    2a68:	fc 81       	ldd	r31, Y+4	; 0x04
    2a6a:	96 89       	ldd	r25, Z+22	; 0x16
    2a6c:	e0 91 ca 06 	lds	r30, 0x06CA
    2a70:	f0 91 cb 06 	lds	r31, 0x06CB
    2a74:	86 89       	ldd	r24, Z+22	; 0x16
    2a76:	98 17       	cp	r25, r24
    2a78:	10 f0       	brcs	.+4      	; 0x2a7e <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    2a7e:	80 91 1b 07 	lds	r24, 0x071B
    2a82:	88 23       	and	r24, r24
    2a84:	09 f0       	breq	.+2      	; 0x2a88 <xTaskResumeAll+0xc2>
    2a86:	ba cf       	rjmp	.-140    	; 0x29fc <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2a88:	80 91 d4 06 	lds	r24, 0x06D4
    2a8c:	88 23       	and	r24, r24
    2a8e:	71 f0       	breq	.+28     	; 0x2aac <xTaskResumeAll+0xe6>
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    2a92:	0e 94 a2 15 	call	0x2b44	; 0x2b44 <vTaskIncrementTick>
						--uxMissedTicks;
    2a96:	80 91 d4 06 	lds	r24, 0x06D4
    2a9a:	81 50       	subi	r24, 0x01	; 1
    2a9c:	80 93 d4 06 	sts	0x06D4, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    2aa0:	80 91 d4 06 	lds	r24, 0x06D4
    2aa4:	88 23       	and	r24, r24
    2aa6:	a9 f7       	brne	.-22     	; 0x2a92 <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	81 30       	cpi	r24, 0x01	; 1
    2ab0:	21 f0       	breq	.+8      	; 0x2aba <xTaskResumeAll+0xf4>
    2ab2:	80 91 d5 06 	lds	r24, 0x06D5
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	31 f4       	brne	.+12     	; 0x2ac6 <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    2abe:	10 92 d5 06 	sts	0x06D5, r1
					portYIELD_WITHIN_API();
    2ac2:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    2ac6:	0f 90       	pop	r0
    2ac8:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    2aca:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	00 d0       	rcall	.+0      	; 0x2ae0 <xTaskGetTickCount+0x6>
    2ae0:	cd b7       	in	r28, 0x3d	; 61
    2ae2:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    2ae4:	0f b6       	in	r0, 0x3f	; 63
    2ae6:	f8 94       	cli
    2ae8:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    2aea:	80 91 ce 06 	lds	r24, 0x06CE
    2aee:	90 91 cf 06 	lds	r25, 0x06CF
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    2af6:	0f 90       	pop	r0
    2af8:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    2afa:	89 81       	ldd	r24, Y+1	; 0x01
    2afc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2afe:	0f 90       	pop	r0
    2b00:	0f 90       	pop	r0
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	00 d0       	rcall	.+0      	; 0x2b0e <xTaskGetTickCountFromISR+0x6>
    2b0e:	0f 92       	push	r0
    2b10:	cd b7       	in	r28, 0x3d	; 61
    2b12:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    2b14:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    2b16:	80 91 ce 06 	lds	r24, 0x06CE
    2b1a:	90 91 cf 06 	lds	r25, 0x06CF
    2b1e:	9b 83       	std	Y+3, r25	; 0x03
    2b20:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    2b22:	8a 81       	ldd	r24, Y+2	; 0x02
    2b24:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	08 95       	ret

00002b32 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    2b3a:	80 91 cd 06 	lds	r24, 0x06CD
}
    2b3e:	cf 91       	pop	r28
    2b40:	df 91       	pop	r29
    2b42:	08 95       	ret

00002b44 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <vTaskIncrementTick+0x6>
    2b4a:	00 d0       	rcall	.+0      	; 0x2b4c <vTaskIncrementTick+0x8>
    2b4c:	00 d0       	rcall	.+0      	; 0x2b4e <vTaskIncrementTick+0xa>
    2b4e:	cd b7       	in	r28, 0x3d	; 61
    2b50:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2b52:	80 91 d3 06 	lds	r24, 0x06D3
    2b56:	88 23       	and	r24, r24
    2b58:	09 f0       	breq	.+2      	; 0x2b5c <vTaskIncrementTick+0x18>
    2b5a:	bb c0       	rjmp	.+374    	; 0x2cd2 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    2b5c:	80 91 ce 06 	lds	r24, 0x06CE
    2b60:	90 91 cf 06 	lds	r25, 0x06CF
    2b64:	01 96       	adiw	r24, 0x01	; 1
    2b66:	90 93 cf 06 	sts	0x06CF, r25
    2b6a:	80 93 ce 06 	sts	0x06CE, r24
		if( xTickCount == ( portTickType ) 0U )
    2b6e:	80 91 ce 06 	lds	r24, 0x06CE
    2b72:	90 91 cf 06 	lds	r25, 0x06CF
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	d1 f5       	brne	.+116    	; 0x2bee <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    2b7a:	80 91 17 07 	lds	r24, 0x0717
    2b7e:	90 91 18 07 	lds	r25, 0x0718
    2b82:	9c 83       	std	Y+4, r25	; 0x04
    2b84:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    2b86:	80 91 19 07 	lds	r24, 0x0719
    2b8a:	90 91 1a 07 	lds	r25, 0x071A
    2b8e:	90 93 18 07 	sts	0x0718, r25
    2b92:	80 93 17 07 	sts	0x0717, r24
			pxOverflowDelayedTaskList = pxTemp;
    2b96:	8b 81       	ldd	r24, Y+3	; 0x03
    2b98:	9c 81       	ldd	r25, Y+4	; 0x04
    2b9a:	90 93 1a 07 	sts	0x071A, r25
    2b9e:	80 93 19 07 	sts	0x0719, r24
			xNumOfOverflows++;
    2ba2:	80 91 d6 06 	lds	r24, 0x06D6
    2ba6:	8f 5f       	subi	r24, 0xFF	; 255
    2ba8:	80 93 d6 06 	sts	0x06D6, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    2bac:	e0 91 17 07 	lds	r30, 0x0717
    2bb0:	f0 91 18 07 	lds	r31, 0x0718
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	39 f4       	brne	.+14     	; 0x2bc8 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    2bba:	8f ef       	ldi	r24, 0xFF	; 255
    2bbc:	9f ef       	ldi	r25, 0xFF	; 255
    2bbe:	90 93 1c 02 	sts	0x021C, r25
    2bc2:	80 93 1b 02 	sts	0x021B, r24
    2bc6:	13 c0       	rjmp	.+38     	; 0x2bee <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    2bc8:	e0 91 17 07 	lds	r30, 0x0717
    2bcc:	f0 91 18 07 	lds	r31, 0x0718
    2bd0:	05 80       	ldd	r0, Z+5	; 0x05
    2bd2:	f6 81       	ldd	r31, Z+6	; 0x06
    2bd4:	e0 2d       	mov	r30, r0
    2bd6:	86 81       	ldd	r24, Z+6	; 0x06
    2bd8:	97 81       	ldd	r25, Z+7	; 0x07
    2bda:	9e 83       	std	Y+6, r25	; 0x06
    2bdc:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    2bde:	ed 81       	ldd	r30, Y+5	; 0x05
    2be0:	fe 81       	ldd	r31, Y+6	; 0x06
    2be2:	82 81       	ldd	r24, Z+2	; 0x02
    2be4:	93 81       	ldd	r25, Z+3	; 0x03
    2be6:	90 93 1c 02 	sts	0x021C, r25
    2bea:	80 93 1b 02 	sts	0x021B, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    2bee:	20 91 ce 06 	lds	r18, 0x06CE
    2bf2:	30 91 cf 06 	lds	r19, 0x06CF
    2bf6:	80 91 1b 02 	lds	r24, 0x021B
    2bfa:	90 91 1c 02 	lds	r25, 0x021C
    2bfe:	28 17       	cp	r18, r24
    2c00:	39 07       	cpc	r19, r25
    2c02:	08 f4       	brcc	.+2      	; 0x2c06 <vTaskIncrementTick+0xc2>
    2c04:	6b c0       	rjmp	.+214    	; 0x2cdc <vTaskIncrementTick+0x198>
    2c06:	e0 91 17 07 	lds	r30, 0x0717
    2c0a:	f0 91 18 07 	lds	r31, 0x0718
    2c0e:	80 81       	ld	r24, Z
    2c10:	88 23       	and	r24, r24
    2c12:	39 f4       	brne	.+14     	; 0x2c22 <vTaskIncrementTick+0xde>
    2c14:	8f ef       	ldi	r24, 0xFF	; 255
    2c16:	9f ef       	ldi	r25, 0xFF	; 255
    2c18:	90 93 1c 02 	sts	0x021C, r25
    2c1c:	80 93 1b 02 	sts	0x021B, r24
    2c20:	5d c0       	rjmp	.+186    	; 0x2cdc <vTaskIncrementTick+0x198>
    2c22:	e0 91 17 07 	lds	r30, 0x0717
    2c26:	f0 91 18 07 	lds	r31, 0x0718
    2c2a:	05 80       	ldd	r0, Z+5	; 0x05
    2c2c:	f6 81       	ldd	r31, Z+6	; 0x06
    2c2e:	e0 2d       	mov	r30, r0
    2c30:	86 81       	ldd	r24, Z+6	; 0x06
    2c32:	97 81       	ldd	r25, Z+7	; 0x07
    2c34:	9e 83       	std	Y+6, r25	; 0x06
    2c36:	8d 83       	std	Y+5, r24	; 0x05
    2c38:	ed 81       	ldd	r30, Y+5	; 0x05
    2c3a:	fe 81       	ldd	r31, Y+6	; 0x06
    2c3c:	82 81       	ldd	r24, Z+2	; 0x02
    2c3e:	93 81       	ldd	r25, Z+3	; 0x03
    2c40:	9a 83       	std	Y+2, r25	; 0x02
    2c42:	89 83       	std	Y+1, r24	; 0x01
    2c44:	20 91 ce 06 	lds	r18, 0x06CE
    2c48:	30 91 cf 06 	lds	r19, 0x06CF
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	28 17       	cp	r18, r24
    2c52:	39 07       	cpc	r19, r25
    2c54:	38 f4       	brcc	.+14     	; 0x2c64 <vTaskIncrementTick+0x120>
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	90 93 1c 02 	sts	0x021C, r25
    2c5e:	80 93 1b 02 	sts	0x021B, r24
    2c62:	3c c0       	rjmp	.+120    	; 0x2cdc <vTaskIncrementTick+0x198>
    2c64:	8d 81       	ldd	r24, Y+5	; 0x05
    2c66:	9e 81       	ldd	r25, Y+6	; 0x06
    2c68:	02 96       	adiw	r24, 0x02	; 2
    2c6a:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
    2c6e:	ed 81       	ldd	r30, Y+5	; 0x05
    2c70:	fe 81       	ldd	r31, Y+6	; 0x06
    2c72:	84 89       	ldd	r24, Z+20	; 0x14
    2c74:	95 89       	ldd	r25, Z+21	; 0x15
    2c76:	00 97       	sbiw	r24, 0x00	; 0
    2c78:	29 f0       	breq	.+10     	; 0x2c84 <vTaskIncrementTick+0x140>
    2c7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2c7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2c7e:	0c 96       	adiw	r24, 0x0c	; 12
    2c80:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
    2c84:	ed 81       	ldd	r30, Y+5	; 0x05
    2c86:	fe 81       	ldd	r31, Y+6	; 0x06
    2c88:	96 89       	ldd	r25, Z+22	; 0x16
    2c8a:	80 91 d1 06 	lds	r24, 0x06D1
    2c8e:	89 17       	cp	r24, r25
    2c90:	28 f4       	brcc	.+10     	; 0x2c9c <vTaskIncrementTick+0x158>
    2c92:	ed 81       	ldd	r30, Y+5	; 0x05
    2c94:	fe 81       	ldd	r31, Y+6	; 0x06
    2c96:	86 89       	ldd	r24, Z+22	; 0x16
    2c98:	80 93 d1 06 	sts	0x06D1, r24
    2c9c:	ed 81       	ldd	r30, Y+5	; 0x05
    2c9e:	fe 81       	ldd	r31, Y+6	; 0x06
    2ca0:	86 89       	ldd	r24, Z+22	; 0x16
    2ca2:	28 2f       	mov	r18, r24
    2ca4:	30 e0       	ldi	r19, 0x00	; 0
    2ca6:	c9 01       	movw	r24, r18
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	88 0f       	add	r24, r24
    2cae:	99 1f       	adc	r25, r25
    2cb0:	88 0f       	add	r24, r24
    2cb2:	99 1f       	adc	r25, r25
    2cb4:	82 0f       	add	r24, r18
    2cb6:	93 1f       	adc	r25, r19
    2cb8:	ac 01       	movw	r20, r24
    2cba:	48 52       	subi	r20, 0x28	; 40
    2cbc:	59 4f       	sbci	r21, 0xF9	; 249
    2cbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2cc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc2:	9c 01       	movw	r18, r24
    2cc4:	2e 5f       	subi	r18, 0xFE	; 254
    2cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc8:	ca 01       	movw	r24, r20
    2cca:	b9 01       	movw	r22, r18
    2ccc:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>
    2cd0:	9a cf       	rjmp	.-204    	; 0x2c06 <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    2cd2:	80 91 d4 06 	lds	r24, 0x06D4
    2cd6:	8f 5f       	subi	r24, 0xFF	; 255
    2cd8:	80 93 d4 06 	sts	0x06D4, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    2cdc:	26 96       	adiw	r28, 0x06	; 6
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	cf 91       	pop	r28
    2cea:	df 91       	pop	r29
    2cec:	08 95       	ret

00002cee <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    2cee:	df 93       	push	r29
    2cf0:	cf 93       	push	r28
    2cf2:	00 d0       	rcall	.+0      	; 0x2cf4 <vTaskSwitchContext+0x6>
    2cf4:	cd b7       	in	r28, 0x3d	; 61
    2cf6:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    2cf8:	80 91 d3 06 	lds	r24, 0x06D3
    2cfc:	88 23       	and	r24, r24
    2cfe:	49 f0       	breq	.+18     	; 0x2d12 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	80 93 d5 06 	sts	0x06D5, r24
    2d06:	54 c0       	rjmp	.+168    	; 0x2db0 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    2d08:	80 91 d1 06 	lds	r24, 0x06D1
    2d0c:	81 50       	subi	r24, 0x01	; 1
    2d0e:	80 93 d1 06 	sts	0x06D1, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    2d12:	80 91 d1 06 	lds	r24, 0x06D1
    2d16:	28 2f       	mov	r18, r24
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	c9 01       	movw	r24, r18
    2d1c:	88 0f       	add	r24, r24
    2d1e:	99 1f       	adc	r25, r25
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	82 0f       	add	r24, r18
    2d2a:	93 1f       	adc	r25, r19
    2d2c:	fc 01       	movw	r30, r24
    2d2e:	e8 52       	subi	r30, 0x28	; 40
    2d30:	f9 4f       	sbci	r31, 0xF9	; 249
    2d32:	80 81       	ld	r24, Z
    2d34:	88 23       	and	r24, r24
    2d36:	41 f3       	breq	.-48     	; 0x2d08 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    2d38:	80 91 d1 06 	lds	r24, 0x06D1
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	c9 01       	movw	r24, r18
    2d42:	88 0f       	add	r24, r24
    2d44:	99 1f       	adc	r25, r25
    2d46:	88 0f       	add	r24, r24
    2d48:	99 1f       	adc	r25, r25
    2d4a:	88 0f       	add	r24, r24
    2d4c:	99 1f       	adc	r25, r25
    2d4e:	82 0f       	add	r24, r18
    2d50:	93 1f       	adc	r25, r19
    2d52:	88 52       	subi	r24, 0x28	; 40
    2d54:	99 4f       	sbci	r25, 0xF9	; 249
    2d56:	9a 83       	std	Y+2, r25	; 0x02
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d5e:	01 80       	ldd	r0, Z+1	; 0x01
    2d60:	f2 81       	ldd	r31, Z+2	; 0x02
    2d62:	e0 2d       	mov	r30, r0
    2d64:	82 81       	ldd	r24, Z+2	; 0x02
    2d66:	93 81       	ldd	r25, Z+3	; 0x03
    2d68:	e9 81       	ldd	r30, Y+1	; 0x01
    2d6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2d6c:	92 83       	std	Z+2, r25	; 0x02
    2d6e:	81 83       	std	Z+1, r24	; 0x01
    2d70:	e9 81       	ldd	r30, Y+1	; 0x01
    2d72:	fa 81       	ldd	r31, Y+2	; 0x02
    2d74:	21 81       	ldd	r18, Z+1	; 0x01
    2d76:	32 81       	ldd	r19, Z+2	; 0x02
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d7c:	03 96       	adiw	r24, 0x03	; 3
    2d7e:	28 17       	cp	r18, r24
    2d80:	39 07       	cpc	r19, r25
    2d82:	59 f4       	brne	.+22     	; 0x2d9a <vTaskSwitchContext+0xac>
    2d84:	e9 81       	ldd	r30, Y+1	; 0x01
    2d86:	fa 81       	ldd	r31, Y+2	; 0x02
    2d88:	01 80       	ldd	r0, Z+1	; 0x01
    2d8a:	f2 81       	ldd	r31, Z+2	; 0x02
    2d8c:	e0 2d       	mov	r30, r0
    2d8e:	82 81       	ldd	r24, Z+2	; 0x02
    2d90:	93 81       	ldd	r25, Z+3	; 0x03
    2d92:	e9 81       	ldd	r30, Y+1	; 0x01
    2d94:	fa 81       	ldd	r31, Y+2	; 0x02
    2d96:	92 83       	std	Z+2, r25	; 0x02
    2d98:	81 83       	std	Z+1, r24	; 0x01
    2d9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2d9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2d9e:	01 80       	ldd	r0, Z+1	; 0x01
    2da0:	f2 81       	ldd	r31, Z+2	; 0x02
    2da2:	e0 2d       	mov	r30, r0
    2da4:	86 81       	ldd	r24, Z+6	; 0x06
    2da6:	97 81       	ldd	r25, Z+7	; 0x07
    2da8:	90 93 cb 06 	sts	0x06CB, r25
    2dac:	80 93 ca 06 	sts	0x06CA, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	cf 91       	pop	r28
    2db6:	df 91       	pop	r29
    2db8:	08 95       	ret

00002dba <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	00 d0       	rcall	.+0      	; 0x2dc0 <vTaskPlaceOnEventList+0x6>
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <vTaskPlaceOnEventList+0x8>
    2dc2:	00 d0       	rcall	.+0      	; 0x2dc4 <vTaskPlaceOnEventList+0xa>
    2dc4:	cd b7       	in	r28, 0x3d	; 61
    2dc6:	de b7       	in	r29, 0x3e	; 62
    2dc8:	9c 83       	std	Y+4, r25	; 0x04
    2dca:	8b 83       	std	Y+3, r24	; 0x03
    2dcc:	7e 83       	std	Y+6, r23	; 0x06
    2dce:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    2dd0:	4b 81       	ldd	r20, Y+3	; 0x03
    2dd2:	5c 81       	ldd	r21, Y+4	; 0x04
    2dd4:	80 91 ca 06 	lds	r24, 0x06CA
    2dd8:	90 91 cb 06 	lds	r25, 0x06CB
    2ddc:	9c 01       	movw	r18, r24
    2dde:	24 5f       	subi	r18, 0xF4	; 244
    2de0:	3f 4f       	sbci	r19, 0xFF	; 255
    2de2:	ca 01       	movw	r24, r20
    2de4:	b9 01       	movw	r22, r18
    2de6:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    2dea:	80 91 ca 06 	lds	r24, 0x06CA
    2dee:	90 91 cb 06 	lds	r25, 0x06CB
    2df2:	02 96       	adiw	r24, 0x02	; 2
    2df4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    2df8:	20 91 ce 06 	lds	r18, 0x06CE
    2dfc:	30 91 cf 06 	lds	r19, 0x06CF
    2e00:	8d 81       	ldd	r24, Y+5	; 0x05
    2e02:	9e 81       	ldd	r25, Y+6	; 0x06
    2e04:	82 0f       	add	r24, r18
    2e06:	93 1f       	adc	r25, r19
    2e08:	9a 83       	std	Y+2, r25	; 0x02
    2e0a:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    2e0c:	89 81       	ldd	r24, Y+1	; 0x01
    2e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    2e10:	0e 94 d7 18 	call	0x31ae	; 0x31ae <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    2e14:	26 96       	adiw	r28, 0x06	; 6
    2e16:	0f b6       	in	r0, 0x3f	; 63
    2e18:	f8 94       	cli
    2e1a:	de bf       	out	0x3e, r29	; 62
    2e1c:	0f be       	out	0x3f, r0	; 63
    2e1e:	cd bf       	out	0x3d, r28	; 61
    2e20:	cf 91       	pop	r28
    2e22:	df 91       	pop	r29
    2e24:	08 95       	ret

00002e26 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    2e26:	df 93       	push	r29
    2e28:	cf 93       	push	r28
    2e2a:	00 d0       	rcall	.+0      	; 0x2e2c <xTaskRemoveFromEventList+0x6>
    2e2c:	00 d0       	rcall	.+0      	; 0x2e2e <xTaskRemoveFromEventList+0x8>
    2e2e:	0f 92       	push	r0
    2e30:	cd b7       	in	r28, 0x3d	; 61
    2e32:	de b7       	in	r29, 0x3e	; 62
    2e34:	9d 83       	std	Y+5, r25	; 0x05
    2e36:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2e38:	ec 81       	ldd	r30, Y+4	; 0x04
    2e3a:	fd 81       	ldd	r31, Y+5	; 0x05
    2e3c:	05 80       	ldd	r0, Z+5	; 0x05
    2e3e:	f6 81       	ldd	r31, Z+6	; 0x06
    2e40:	e0 2d       	mov	r30, r0
    2e42:	86 81       	ldd	r24, Z+6	; 0x06
    2e44:	97 81       	ldd	r25, Z+7	; 0x07
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	0c 96       	adiw	r24, 0x0c	; 12
    2e50:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    2e54:	80 91 d3 06 	lds	r24, 0x06D3
    2e58:	88 23       	and	r24, r24
    2e5a:	61 f5       	brne	.+88     	; 0x2eb4 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e60:	02 96       	adiw	r24, 0x02	; 2
    2e62:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    2e66:	ea 81       	ldd	r30, Y+2	; 0x02
    2e68:	fb 81       	ldd	r31, Y+3	; 0x03
    2e6a:	96 89       	ldd	r25, Z+22	; 0x16
    2e6c:	80 91 d1 06 	lds	r24, 0x06D1
    2e70:	89 17       	cp	r24, r25
    2e72:	28 f4       	brcc	.+10     	; 0x2e7e <xTaskRemoveFromEventList+0x58>
    2e74:	ea 81       	ldd	r30, Y+2	; 0x02
    2e76:	fb 81       	ldd	r31, Y+3	; 0x03
    2e78:	86 89       	ldd	r24, Z+22	; 0x16
    2e7a:	80 93 d1 06 	sts	0x06D1, r24
    2e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2e80:	fb 81       	ldd	r31, Y+3	; 0x03
    2e82:	86 89       	ldd	r24, Z+22	; 0x16
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	c9 01       	movw	r24, r18
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	88 0f       	add	r24, r24
    2e90:	99 1f       	adc	r25, r25
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	82 0f       	add	r24, r18
    2e98:	93 1f       	adc	r25, r19
    2e9a:	ac 01       	movw	r20, r24
    2e9c:	48 52       	subi	r20, 0x28	; 40
    2e9e:	59 4f       	sbci	r21, 0xF9	; 249
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	9c 01       	movw	r18, r24
    2ea6:	2e 5f       	subi	r18, 0xFE	; 254
    2ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eaa:	ca 01       	movw	r24, r20
    2eac:	b9 01       	movw	r22, r18
    2eae:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>
    2eb2:	0a c0       	rjmp	.+20     	; 0x2ec8 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    2eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb8:	9c 01       	movw	r18, r24
    2eba:	24 5f       	subi	r18, 0xF4	; 244
    2ebc:	3f 4f       	sbci	r19, 0xFF	; 255
    2ebe:	8b e1       	ldi	r24, 0x1B	; 27
    2ec0:	97 e0       	ldi	r25, 0x07	; 7
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	0e 94 47 0a 	call	0x148e	; 0x148e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    2ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    2eca:	fb 81       	ldd	r31, Y+3	; 0x03
    2ecc:	96 89       	ldd	r25, Z+22	; 0x16
    2ece:	e0 91 ca 06 	lds	r30, 0x06CA
    2ed2:	f0 91 cb 06 	lds	r31, 0x06CB
    2ed6:	86 89       	ldd	r24, Z+22	; 0x16
    2ed8:	98 17       	cp	r25, r24
    2eda:	18 f0       	brcs	.+6      	; 0x2ee2 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    2edc:	81 e0       	ldi	r24, 0x01	; 1
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	01 c0       	rjmp	.+2      	; 0x2ee4 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    2ee2:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ee6:	0f 90       	pop	r0
    2ee8:	0f 90       	pop	r0
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	cf 91       	pop	r28
    2ef2:	df 91       	pop	r29
    2ef4:	08 95       	ret

00002ef6 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    2ef6:	df 93       	push	r29
    2ef8:	cf 93       	push	r28
    2efa:	00 d0       	rcall	.+0      	; 0x2efc <vTaskSetTimeOutState+0x6>
    2efc:	cd b7       	in	r28, 0x3d	; 61
    2efe:	de b7       	in	r29, 0x3e	; 62
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    2f04:	80 91 d6 06 	lds	r24, 0x06D6
    2f08:	e9 81       	ldd	r30, Y+1	; 0x01
    2f0a:	fa 81       	ldd	r31, Y+2	; 0x02
    2f0c:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    2f0e:	80 91 ce 06 	lds	r24, 0x06CE
    2f12:	90 91 cf 06 	lds	r25, 0x06CF
    2f16:	e9 81       	ldd	r30, Y+1	; 0x01
    2f18:	fa 81       	ldd	r31, Y+2	; 0x02
    2f1a:	92 83       	std	Z+2, r25	; 0x02
    2f1c:	81 83       	std	Z+1, r24	; 0x01
}
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    2f28:	df 93       	push	r29
    2f2a:	cf 93       	push	r28
    2f2c:	00 d0       	rcall	.+0      	; 0x2f2e <xTaskCheckForTimeOut+0x6>
    2f2e:	00 d0       	rcall	.+0      	; 0x2f30 <xTaskCheckForTimeOut+0x8>
    2f30:	0f 92       	push	r0
    2f32:	cd b7       	in	r28, 0x3d	; 61
    2f34:	de b7       	in	r29, 0x3e	; 62
    2f36:	9b 83       	std	Y+3, r25	; 0x03
    2f38:	8a 83       	std	Y+2, r24	; 0x02
    2f3a:	7d 83       	std	Y+5, r23	; 0x05
    2f3c:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    2f44:	ea 81       	ldd	r30, Y+2	; 0x02
    2f46:	fb 81       	ldd	r31, Y+3	; 0x03
    2f48:	90 81       	ld	r25, Z
    2f4a:	80 91 d6 06 	lds	r24, 0x06D6
    2f4e:	98 17       	cp	r25, r24
    2f50:	71 f0       	breq	.+28     	; 0x2f6e <xTaskCheckForTimeOut+0x46>
    2f52:	ea 81       	ldd	r30, Y+2	; 0x02
    2f54:	fb 81       	ldd	r31, Y+3	; 0x03
    2f56:	21 81       	ldd	r18, Z+1	; 0x01
    2f58:	32 81       	ldd	r19, Z+2	; 0x02
    2f5a:	80 91 ce 06 	lds	r24, 0x06CE
    2f5e:	90 91 cf 06 	lds	r25, 0x06CF
    2f62:	82 17       	cp	r24, r18
    2f64:	93 07       	cpc	r25, r19
    2f66:	18 f0       	brcs	.+6      	; 0x2f6e <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	2f c0       	rjmp	.+94     	; 0x2fcc <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    2f6e:	20 91 ce 06 	lds	r18, 0x06CE
    2f72:	30 91 cf 06 	lds	r19, 0x06CF
    2f76:	ea 81       	ldd	r30, Y+2	; 0x02
    2f78:	fb 81       	ldd	r31, Y+3	; 0x03
    2f7a:	81 81       	ldd	r24, Z+1	; 0x01
    2f7c:	92 81       	ldd	r25, Z+2	; 0x02
    2f7e:	28 1b       	sub	r18, r24
    2f80:	39 0b       	sbc	r19, r25
    2f82:	ec 81       	ldd	r30, Y+4	; 0x04
    2f84:	fd 81       	ldd	r31, Y+5	; 0x05
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	e0 f4       	brcc	.+56     	; 0x2fc8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    2f90:	ec 81       	ldd	r30, Y+4	; 0x04
    2f92:	fd 81       	ldd	r31, Y+5	; 0x05
    2f94:	40 81       	ld	r20, Z
    2f96:	51 81       	ldd	r21, Z+1	; 0x01
    2f98:	ea 81       	ldd	r30, Y+2	; 0x02
    2f9a:	fb 81       	ldd	r31, Y+3	; 0x03
    2f9c:	21 81       	ldd	r18, Z+1	; 0x01
    2f9e:	32 81       	ldd	r19, Z+2	; 0x02
    2fa0:	80 91 ce 06 	lds	r24, 0x06CE
    2fa4:	90 91 cf 06 	lds	r25, 0x06CF
    2fa8:	b9 01       	movw	r22, r18
    2faa:	68 1b       	sub	r22, r24
    2fac:	79 0b       	sbc	r23, r25
    2fae:	cb 01       	movw	r24, r22
    2fb0:	84 0f       	add	r24, r20
    2fb2:	95 1f       	adc	r25, r21
    2fb4:	ec 81       	ldd	r30, Y+4	; 0x04
    2fb6:	fd 81       	ldd	r31, Y+5	; 0x05
    2fb8:	91 83       	std	Z+1, r25	; 0x01
    2fba:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    2fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc0:	0e 94 7b 17 	call	0x2ef6	; 0x2ef6 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    2fc4:	19 82       	std	Y+1, r1	; 0x01
    2fc6:	02 c0       	rjmp	.+4      	; 0x2fcc <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2fcc:	0f 90       	pop	r0
    2fce:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	0f 90       	pop	r0
    2fdc:	cf 91       	pop	r28
    2fde:	df 91       	pop	r29
    2fe0:	08 95       	ret

00002fe2 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    2fe2:	df 93       	push	r29
    2fe4:	cf 93       	push	r28
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	80 93 d5 06 	sts	0x06D5, r24
}
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	00 d0       	rcall	.+0      	; 0x2ffc <prvIdleTask+0x6>
    2ffc:	cd b7       	in	r28, 0x3d	; 61
    2ffe:	de b7       	in	r29, 0x3e	; 62
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    3004:	0e 94 99 18 	call	0x3132	; 0x3132 <prvCheckTasksWaitingTermination>
    3008:	fd cf       	rjmp	.-6      	; 0x3004 <prvIdleTask+0xe>

0000300a <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	df 93       	push	r29
    3010:	cf 93       	push	r28
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	29 97       	sbiw	r28, 0x09	; 9
    3018:	0f b6       	in	r0, 0x3f	; 63
    301a:	f8 94       	cli
    301c:	de bf       	out	0x3e, r29	; 62
    301e:	0f be       	out	0x3f, r0	; 63
    3020:	cd bf       	out	0x3d, r28	; 61
    3022:	9a 83       	std	Y+2, r25	; 0x02
    3024:	89 83       	std	Y+1, r24	; 0x01
    3026:	7c 83       	std	Y+4, r23	; 0x04
    3028:	6b 83       	std	Y+3, r22	; 0x03
    302a:	4d 83       	std	Y+5, r20	; 0x05
    302c:	3f 83       	std	Y+7, r19	; 0x07
    302e:	2e 83       	std	Y+6, r18	; 0x06
    3030:	19 87       	std	Y+9, r17	; 0x09
    3032:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	9a 81       	ldd	r25, Y+2	; 0x02
    3038:	49 96       	adiw	r24, 0x19	; 25
    303a:	2b 81       	ldd	r18, Y+3	; 0x03
    303c:	3c 81       	ldd	r19, Y+4	; 0x04
    303e:	b9 01       	movw	r22, r18
    3040:	48 e0       	ldi	r20, 0x08	; 8
    3042:	50 e0       	ldi	r21, 0x00	; 0
    3044:	0e 94 4e 30 	call	0x609c	; 0x609c <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    3048:	e9 81       	ldd	r30, Y+1	; 0x01
    304a:	fa 81       	ldd	r31, Y+2	; 0x02
    304c:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    304e:	8d 81       	ldd	r24, Y+5	; 0x05
    3050:	85 30       	cpi	r24, 0x05	; 5
    3052:	10 f0       	brcs	.+4      	; 0x3058 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    3054:	84 e0       	ldi	r24, 0x04	; 4
    3056:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    3058:	e9 81       	ldd	r30, Y+1	; 0x01
    305a:	fa 81       	ldd	r31, Y+2	; 0x02
    305c:	8d 81       	ldd	r24, Y+5	; 0x05
    305e:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	9a 81       	ldd	r25, Y+2	; 0x02
    3064:	02 96       	adiw	r24, 0x02	; 2
    3066:	0e 94 37 0a 	call	0x146e	; 0x146e <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    306a:	89 81       	ldd	r24, Y+1	; 0x01
    306c:	9a 81       	ldd	r25, Y+2	; 0x02
    306e:	0c 96       	adiw	r24, 0x0c	; 12
    3070:	0e 94 37 0a 	call	0x146e	; 0x146e <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    3074:	e9 81       	ldd	r30, Y+1	; 0x01
    3076:	fa 81       	ldd	r31, Y+2	; 0x02
    3078:	89 81       	ldd	r24, Y+1	; 0x01
    307a:	9a 81       	ldd	r25, Y+2	; 0x02
    307c:	91 87       	std	Z+9, r25	; 0x09
    307e:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    3080:	8d 81       	ldd	r24, Y+5	; 0x05
    3082:	28 2f       	mov	r18, r24
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	85 e0       	ldi	r24, 0x05	; 5
    3088:	90 e0       	ldi	r25, 0x00	; 0
    308a:	82 1b       	sub	r24, r18
    308c:	93 0b       	sbc	r25, r19
    308e:	e9 81       	ldd	r30, Y+1	; 0x01
    3090:	fa 81       	ldd	r31, Y+2	; 0x02
    3092:	95 87       	std	Z+13, r25	; 0x0d
    3094:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    3096:	e9 81       	ldd	r30, Y+1	; 0x01
    3098:	fa 81       	ldd	r31, Y+2	; 0x02
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	93 8b       	std	Z+19, r25	; 0x13
    30a0:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    30a2:	29 96       	adiw	r28, 0x09	; 9
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	08 95       	ret

000030b8 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	0f 92       	push	r0
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    30c2:	19 82       	std	Y+1, r1	; 0x01
    30c4:	13 c0       	rjmp	.+38     	; 0x30ec <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	28 2f       	mov	r18, r24
    30ca:	30 e0       	ldi	r19, 0x00	; 0
    30cc:	c9 01       	movw	r24, r18
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	88 0f       	add	r24, r24
    30d4:	99 1f       	adc	r25, r25
    30d6:	88 0f       	add	r24, r24
    30d8:	99 1f       	adc	r25, r25
    30da:	82 0f       	add	r24, r18
    30dc:	93 1f       	adc	r25, r19
    30de:	88 52       	subi	r24, 0x28	; 40
    30e0:	99 4f       	sbci	r25, 0xF9	; 249
    30e2:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    30e6:	89 81       	ldd	r24, Y+1	; 0x01
    30e8:	8f 5f       	subi	r24, 0xFF	; 255
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	85 30       	cpi	r24, 0x05	; 5
    30f0:	50 f3       	brcs	.-44     	; 0x30c6 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    30f2:	85 e0       	ldi	r24, 0x05	; 5
    30f4:	97 e0       	ldi	r25, 0x07	; 7
    30f6:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    30fa:	8e e0       	ldi	r24, 0x0E	; 14
    30fc:	97 e0       	ldi	r25, 0x07	; 7
    30fe:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    3102:	8b e1       	ldi	r24, 0x1B	; 27
    3104:	97 e0       	ldi	r25, 0x07	; 7
    3106:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    310a:	84 e2       	ldi	r24, 0x24	; 36
    310c:	97 e0       	ldi	r25, 0x07	; 7
    310e:	0e 94 0d 0a 	call	0x141a	; 0x141a <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    3112:	85 e0       	ldi	r24, 0x05	; 5
    3114:	97 e0       	ldi	r25, 0x07	; 7
    3116:	90 93 18 07 	sts	0x0718, r25
    311a:	80 93 17 07 	sts	0x0717, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    311e:	8e e0       	ldi	r24, 0x0E	; 14
    3120:	97 e0       	ldi	r25, 0x07	; 7
    3122:	90 93 1a 07 	sts	0x071A, r25
    3126:	80 93 19 07 	sts	0x0719, r24
}
    312a:	0f 90       	pop	r0
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	08 95       	ret

00003132 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    3132:	df 93       	push	r29
    3134:	cf 93       	push	r28
    3136:	00 d0       	rcall	.+0      	; 0x3138 <prvCheckTasksWaitingTermination+0x6>
    3138:	0f 92       	push	r0
    313a:	cd b7       	in	r28, 0x3d	; 61
    313c:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    313e:	80 91 cc 06 	lds	r24, 0x06CC
    3142:	88 23       	and	r24, r24
    3144:	71 f1       	breq	.+92     	; 0x31a2 <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    3146:	0e 94 d7 14 	call	0x29ae	; 0x29ae <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    314a:	80 91 24 07 	lds	r24, 0x0724
    314e:	1b 82       	std	Y+3, r1	; 0x03
    3150:	88 23       	and	r24, r24
    3152:	11 f4       	brne	.+4      	; 0x3158 <prvCheckTasksWaitingTermination+0x26>
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    3158:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    315c:	8b 81       	ldd	r24, Y+3	; 0x03
    315e:	88 23       	and	r24, r24
    3160:	01 f5       	brne	.+64     	; 0x31a2 <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	f8 94       	cli
    3166:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    3168:	e0 91 29 07 	lds	r30, 0x0729
    316c:	f0 91 2a 07 	lds	r31, 0x072A
    3170:	86 81       	ldd	r24, Z+6	; 0x06
    3172:	97 81       	ldd	r25, Z+7	; 0x07
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	02 96       	adiw	r24, 0x02	; 2
    317e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <vListRemove>
					--uxCurrentNumberOfTasks;
    3182:	80 91 cd 06 	lds	r24, 0x06CD
    3186:	81 50       	subi	r24, 0x01	; 1
    3188:	80 93 cd 06 	sts	0x06CD, r24
					--uxTasksDeleted;
    318c:	80 91 cc 06 	lds	r24, 0x06CC
    3190:	81 50       	subi	r24, 0x01	; 1
    3192:	80 93 cc 06 	sts	0x06CC, r24
				}
				taskEXIT_CRITICAL();
    3196:	0f 90       	pop	r0
    3198:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    319a:	89 81       	ldd	r24, Y+1	; 0x01
    319c:	9a 81       	ldd	r25, Y+2	; 0x02
    319e:	0e 94 70 19 	call	0x32e0	; 0x32e0 <prvDeleteTCB>
			}
		}
	}
	#endif
}
    31a2:	0f 90       	pop	r0
    31a4:	0f 90       	pop	r0
    31a6:	0f 90       	pop	r0
    31a8:	cf 91       	pop	r28
    31aa:	df 91       	pop	r29
    31ac:	08 95       	ret

000031ae <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    31ae:	df 93       	push	r29
    31b0:	cf 93       	push	r28
    31b2:	00 d0       	rcall	.+0      	; 0x31b4 <prvAddCurrentTaskToDelayedList+0x6>
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	9a 83       	std	Y+2, r25	; 0x02
    31ba:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    31bc:	e0 91 ca 06 	lds	r30, 0x06CA
    31c0:	f0 91 cb 06 	lds	r31, 0x06CB
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	93 83       	std	Z+3, r25	; 0x03
    31ca:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    31cc:	20 91 ce 06 	lds	r18, 0x06CE
    31d0:	30 91 cf 06 	lds	r19, 0x06CF
    31d4:	89 81       	ldd	r24, Y+1	; 0x01
    31d6:	9a 81       	ldd	r25, Y+2	; 0x02
    31d8:	82 17       	cp	r24, r18
    31da:	93 07       	cpc	r25, r19
    31dc:	70 f4       	brcc	.+28     	; 0x31fa <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31de:	80 91 19 07 	lds	r24, 0x0719
    31e2:	90 91 1a 07 	lds	r25, 0x071A
    31e6:	20 91 ca 06 	lds	r18, 0x06CA
    31ea:	30 91 cb 06 	lds	r19, 0x06CB
    31ee:	2e 5f       	subi	r18, 0xFE	; 254
    31f0:	3f 4f       	sbci	r19, 0xFF	; 255
    31f2:	b9 01       	movw	r22, r18
    31f4:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>
    31f8:	1e c0       	rjmp	.+60     	; 0x3236 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    31fa:	40 91 17 07 	lds	r20, 0x0717
    31fe:	50 91 18 07 	lds	r21, 0x0718
    3202:	80 91 ca 06 	lds	r24, 0x06CA
    3206:	90 91 cb 06 	lds	r25, 0x06CB
    320a:	9c 01       	movw	r18, r24
    320c:	2e 5f       	subi	r18, 0xFE	; 254
    320e:	3f 4f       	sbci	r19, 0xFF	; 255
    3210:	ca 01       	movw	r24, r20
    3212:	b9 01       	movw	r22, r18
    3214:	0e 94 93 0a 	call	0x1526	; 0x1526 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    3218:	20 91 1b 02 	lds	r18, 0x021B
    321c:	30 91 1c 02 	lds	r19, 0x021C
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	82 17       	cp	r24, r18
    3226:	93 07       	cpc	r25, r19
    3228:	30 f4       	brcc	.+12     	; 0x3236 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    322a:	89 81       	ldd	r24, Y+1	; 0x01
    322c:	9a 81       	ldd	r25, Y+2	; 0x02
    322e:	90 93 1c 02 	sts	0x021C, r25
    3232:	80 93 1b 02 	sts	0x021B, r24
		}
	}
}
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	08 95       	ret

00003240 <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    3240:	df 93       	push	r29
    3242:	cf 93       	push	r28
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	28 97       	sbiw	r28, 0x08	; 8
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	de bf       	out	0x3e, r29	; 62
    3250:	0f be       	out	0x3f, r0	; 63
    3252:	cd bf       	out	0x3d, r28	; 61
    3254:	9c 83       	std	Y+4, r25	; 0x04
    3256:	8b 83       	std	Y+3, r24	; 0x03
    3258:	7e 83       	std	Y+6, r23	; 0x06
    325a:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    325c:	81 e2       	ldi	r24, 0x21	; 33
    325e:	90 e0       	ldi	r25, 0x00	; 0
    3260:	0e 94 a1 09 	call	0x1342	; 0x1342 <pvPortMalloc>
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	9a 81       	ldd	r25, Y+2	; 0x02
    326c:	00 97       	sbiw	r24, 0x00	; 0
    326e:	69 f1       	breq	.+90     	; 0x32ca <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    3270:	8d 81       	ldd	r24, Y+5	; 0x05
    3272:	9e 81       	ldd	r25, Y+6	; 0x06
    3274:	00 97       	sbiw	r24, 0x00	; 0
    3276:	39 f4       	brne	.+14     	; 0x3286 <prvAllocateTCBAndStack+0x46>
    3278:	8b 81       	ldd	r24, Y+3	; 0x03
    327a:	9c 81       	ldd	r25, Y+4	; 0x04
    327c:	0e 94 a1 09 	call	0x1342	; 0x1342 <pvPortMalloc>
    3280:	98 87       	std	Y+8, r25	; 0x08
    3282:	8f 83       	std	Y+7, r24	; 0x07
    3284:	04 c0       	rjmp	.+8      	; 0x328e <prvAllocateTCBAndStack+0x4e>
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
    3288:	9e 81       	ldd	r25, Y+6	; 0x06
    328a:	98 87       	std	Y+8, r25	; 0x08
    328c:	8f 83       	std	Y+7, r24	; 0x07
    328e:	e9 81       	ldd	r30, Y+1	; 0x01
    3290:	fa 81       	ldd	r31, Y+2	; 0x02
    3292:	8f 81       	ldd	r24, Y+7	; 0x07
    3294:	98 85       	ldd	r25, Y+8	; 0x08
    3296:	90 8f       	std	Z+24, r25	; 0x18
    3298:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    329a:	e9 81       	ldd	r30, Y+1	; 0x01
    329c:	fa 81       	ldd	r31, Y+2	; 0x02
    329e:	87 89       	ldd	r24, Z+23	; 0x17
    32a0:	90 8d       	ldd	r25, Z+24	; 0x18
    32a2:	00 97       	sbiw	r24, 0x00	; 0
    32a4:	39 f4       	brne	.+14     	; 0x32b4 <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	9a 81       	ldd	r25, Y+2	; 0x02
    32aa:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
			pxNewTCB = NULL;
    32ae:	1a 82       	std	Y+2, r1	; 0x02
    32b0:	19 82       	std	Y+1, r1	; 0x01
    32b2:	0b c0       	rjmp	.+22     	; 0x32ca <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    32b4:	e9 81       	ldd	r30, Y+1	; 0x01
    32b6:	fa 81       	ldd	r31, Y+2	; 0x02
    32b8:	87 89       	ldd	r24, Z+23	; 0x17
    32ba:	90 8d       	ldd	r25, Z+24	; 0x18
    32bc:	2b 81       	ldd	r18, Y+3	; 0x03
    32be:	3c 81       	ldd	r19, Y+4	; 0x04
    32c0:	65 ea       	ldi	r22, 0xA5	; 165
    32c2:	70 e0       	ldi	r23, 0x00	; 0
    32c4:	a9 01       	movw	r20, r18
    32c6:	0e 94 3e 30 	call	0x607c	; 0x607c <memset>
		}
	}

	return pxNewTCB;
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	9a 81       	ldd	r25, Y+2	; 0x02
}
    32ce:	28 96       	adiw	r28, 0x08	; 8
    32d0:	0f b6       	in	r0, 0x3f	; 63
    32d2:	f8 94       	cli
    32d4:	de bf       	out	0x3e, r29	; 62
    32d6:	0f be       	out	0x3f, r0	; 63
    32d8:	cd bf       	out	0x3d, r28	; 61
    32da:	cf 91       	pop	r28
    32dc:	df 91       	pop	r29
    32de:	08 95       	ret

000032e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    32e0:	df 93       	push	r29
    32e2:	cf 93       	push	r28
    32e4:	00 d0       	rcall	.+0      	; 0x32e6 <prvDeleteTCB+0x6>
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	9a 83       	std	Y+2, r25	; 0x02
    32ec:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    32ee:	e9 81       	ldd	r30, Y+1	; 0x01
    32f0:	fa 81       	ldd	r31, Y+2	; 0x02
    32f2:	87 89       	ldd	r24, Z+23	; 0x17
    32f4:	90 8d       	ldd	r25, Z+24	; 0x18
    32f6:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
		vPortFree( pxTCB );
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	9a 81       	ldd	r25, Y+2	; 0x02
    32fe:	0e 94 e7 09 	call	0x13ce	; 0x13ce <vPortFree>
	}
    3302:	0f 90       	pop	r0
    3304:	0f 90       	pop	r0
    3306:	cf 91       	pop	r28
    3308:	df 91       	pop	r29
    330a:	08 95       	ret

0000330c <UART_init>:
#include"../../UTILS/BIT_MATH.h"
#include"UART_INTERFACE.h"
#include"UART_REG.h"
#include"../../HAL/CLCD1602/CLCD_INTERFACE.h"

void UART_init() {
    330c:	df 93       	push	r29
    330e:	cf 93       	push	r28
    3310:	0f 92       	push	r0
    3312:	cd b7       	in	r28, 0x3d	; 61
    3314:	de b7       	in	r29, 0x3e	; 62

	/*Character Select*/
	CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
    3316:	aa e2       	ldi	r26, 0x2A	; 42
    3318:	b0 e0       	ldi	r27, 0x00	; 0
    331a:	ea e2       	ldi	r30, 0x2A	; 42
    331c:	f0 e0       	ldi	r31, 0x00	; 0
    331e:	80 81       	ld	r24, Z
    3320:	8b 7f       	andi	r24, 0xFB	; 251
    3322:	8c 93       	st	X, r24
	u8 UCRSC = 0;
    3324:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ0);
    3326:	89 81       	ldd	r24, Y+1	; 0x01
    3328:	82 60       	ori	r24, 0x02	; 2
    332a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ1);
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	84 60       	ori	r24, 0x04	; 4
    3330:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_URSEL);
    3332:	89 81       	ldd	r24, Y+1	; 0x01
    3334:	80 68       	ori	r24, 0x80	; 128
    3336:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_REG = UCRSC;
    3338:	e0 e4       	ldi	r30, 0x40	; 64
    333a:	f0 e0       	ldi	r31, 0x00	; 0
    333c:	89 81       	ldd	r24, Y+1	; 0x01
    333e:	80 83       	st	Z, r24
	/*Baud rate 9600*/
	UBRRL_REG = 51;
    3340:	e9 e2       	ldi	r30, 0x29	; 41
    3342:	f0 e0       	ldi	r31, 0x00	; 0
    3344:	83 e3       	ldi	r24, 0x33	; 51
    3346:	80 83       	st	Z, r24
	/*Rx and Tx enable*/
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
    3348:	aa e2       	ldi	r26, 0x2A	; 42
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	ea e2       	ldi	r30, 0x2A	; 42
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	80 81       	ld	r24, Z
    3352:	88 60       	ori	r24, 0x08	; 8
    3354:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
    3356:	aa e2       	ldi	r26, 0x2A	; 42
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	ea e2       	ldi	r30, 0x2A	; 42
    335c:	f0 e0       	ldi	r31, 0x00	; 0
    335e:	80 81       	ld	r24, Z
    3360:	80 61       	ori	r24, 0x10	; 16
    3362:	8c 93       	st	X, r24
	/*interrupt enable*/
	//SET_BIT(UCSRB_REG, UCSRB_RXCIE);
	//SET_BIT(UCSRB_REG, UCSRB_TXCIE);
}
    3364:	0f 90       	pop	r0
    3366:	cf 91       	pop	r28
    3368:	df 91       	pop	r29
    336a:	08 95       	ret

0000336c <UART_Receive>:

u8 UART_Receive() {
    336c:	df 93       	push	r29
    336e:	cf 93       	push	r28
    3370:	0f 92       	push	r0
    3372:	cd b7       	in	r28, 0x3d	; 61
    3374:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA_REG,UCSRA_RXC) == 0)
    3376:	eb e2       	ldi	r30, 0x2B	; 43
    3378:	f0 e0       	ldi	r31, 0x00	; 0
    337a:	80 81       	ld	r24, Z
		;
	return UDR_REG;
    337c:	ec e2       	ldi	r30, 0x2C	; 44
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	80 81       	ld	r24, Z

}
    3382:	0f 90       	pop	r0
    3384:	cf 91       	pop	r28
    3386:	df 91       	pop	r29
    3388:	08 95       	ret

0000338a <UART_Send>:
void UART_Send(u8 data) {
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	00 d0       	rcall	.+0      	; 0x3390 <UART_Send+0x6>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG,UCSRA_UDRE) == 0)
    3396:	eb e2       	ldi	r30, 0x2B	; 43
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	80 81       	ld	r24, Z
		;
	UDR_REG = data;
    339c:	ec e2       	ldi	r30, 0x2C	; 44
    339e:	f0 e0       	ldi	r31, 0x00	; 0
    33a0:	89 81       	ldd	r24, Y+1	; 0x01
    33a2:	80 83       	st	Z, r24
}
    33a4:	0f 90       	pop	r0
    33a6:	0f 90       	pop	r0
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	08 95       	ret

000033ae <UART_RXFlAG_down>:
void UART_RXFlAG_down() {
    33ae:	df 93       	push	r29
    33b0:	cf 93       	push	r28
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA_REG, UCSRA_RXC);
    33b6:	ab e2       	ldi	r26, 0x2B	; 43
    33b8:	b0 e0       	ldi	r27, 0x00	; 0
    33ba:	eb e2       	ldi	r30, 0x2B	; 43
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	80 81       	ld	r24, Z
    33c0:	80 68       	ori	r24, 0x80	; 128
    33c2:	8c 93       	st	X, r24
}
    33c4:	cf 91       	pop	r28
    33c6:	df 91       	pop	r29
    33c8:	08 95       	ret

000033ca <UART_Receive_String>:

void UART_Receive_String(char* arr) {
    33ca:	df 93       	push	r29
    33cc:	cf 93       	push	r28
    33ce:	00 d0       	rcall	.+0      	; 0x33d0 <UART_Receive_String+0x6>
    33d0:	00 d0       	rcall	.+0      	; 0x33d2 <UART_Receive_String+0x8>
    33d2:	0f 92       	push	r0
    33d4:	cd b7       	in	r28, 0x3d	; 61
    33d6:	de b7       	in	r29, 0x3e	; 62
    33d8:	9d 83       	std	Y+5, r25	; 0x05
    33da:	8c 83       	std	Y+4, r24	; 0x04
	char ca;
	for (u8 j = 0; j < 5; j++) {
    33dc:	1a 82       	std	Y+2, r1	; 0x02
    33de:	19 c0       	rjmp	.+50     	; 0x3412 <UART_Receive_String+0x48>
		ca = UART_Receive();
    33e0:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_Receive>
    33e4:	8b 83       	std	Y+3, r24	; 0x03
		if (ca >= '1' && ca <= 'z') {
    33e6:	8b 81       	ldd	r24, Y+3	; 0x03
    33e8:	81 33       	cpi	r24, 0x31	; 49
    33ea:	80 f0       	brcs	.+32     	; 0x340c <UART_Receive_String+0x42>
    33ec:	8b 81       	ldd	r24, Y+3	; 0x03
    33ee:	8b 37       	cpi	r24, 0x7B	; 123
    33f0:	68 f4       	brcc	.+26     	; 0x340c <UART_Receive_String+0x42>
			LCD8Bit_Send_Data(ca);
    33f2:	8b 81       	ldd	r24, Y+3	; 0x03
    33f4:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
			arr[j] = ca;
    33f8:	8a 81       	ldd	r24, Y+2	; 0x02
    33fa:	28 2f       	mov	r18, r24
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	8c 81       	ldd	r24, Y+4	; 0x04
    3400:	9d 81       	ldd	r25, Y+5	; 0x05
    3402:	fc 01       	movw	r30, r24
    3404:	e2 0f       	add	r30, r18
    3406:	f3 1f       	adc	r31, r19
    3408:	8b 81       	ldd	r24, Y+3	; 0x03
    340a:	80 83       	st	Z, r24
	SET_BIT(UCSRA_REG, UCSRA_RXC);
}

void UART_Receive_String(char* arr) {
	char ca;
	for (u8 j = 0; j < 5; j++) {
    340c:	8a 81       	ldd	r24, Y+2	; 0x02
    340e:	8f 5f       	subi	r24, 0xFF	; 255
    3410:	8a 83       	std	Y+2, r24	; 0x02
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	85 30       	cpi	r24, 0x05	; 5
    3416:	20 f3       	brcs	.-56     	; 0x33e0 <UART_Receive_String+0x16>
		if (ca >= '1' && ca <= 'z') {
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
    3418:	8b 81       	ldd	r24, Y+3	; 0x03
    341a:	8a 32       	cpi	r24, 0x2A	; 42
    341c:	99 f4       	brne	.+38     	; 0x3444 <UART_Receive_String+0x7a>
		for (u8 k = 0;k < 4; k++)
    341e:	19 82       	std	Y+1, r1	; 0x01
    3420:	0e c0       	rjmp	.+28     	; 0x343e <UART_Receive_String+0x74>
			LCD8Bit_Send_Data(arr[k]);
    3422:	89 81       	ldd	r24, Y+1	; 0x01
    3424:	28 2f       	mov	r18, r24
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	8c 81       	ldd	r24, Y+4	; 0x04
    342a:	9d 81       	ldd	r25, Y+5	; 0x05
    342c:	fc 01       	movw	r30, r24
    342e:	e2 0f       	add	r30, r18
    3430:	f3 1f       	adc	r31, r19
    3432:	80 81       	ld	r24, Z
    3434:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
		for (u8 k = 0;k < 4; k++)
    3438:	89 81       	ldd	r24, Y+1	; 0x01
    343a:	8f 5f       	subi	r24, 0xFF	; 255
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	84 30       	cpi	r24, 0x04	; 4
    3442:	78 f3       	brcs	.-34     	; 0x3422 <UART_Receive_String+0x58>
			LCD8Bit_Send_Data(arr[k]);

	}

}
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	08 95       	ret

00003454 <UART_SEND_String>:
void UART_SEND_String(const char* arr){
    3454:	df 93       	push	r29
    3456:	cf 93       	push	r28
    3458:	00 d0       	rcall	.+0      	; 0x345a <UART_SEND_String+0x6>
    345a:	0f 92       	push	r0
    345c:	cd b7       	in	r28, 0x3d	; 61
    345e:	de b7       	in	r29, 0x3e	; 62
    3460:	9b 83       	std	Y+3, r25	; 0x03
    3462:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    3464:	19 82       	std	Y+1, r1	; 0x01
    3466:	0e c0       	rjmp	.+28     	; 0x3484 <UART_SEND_String+0x30>
   while(arr[i]!='\0'){
	   UART_Send(arr[i]);
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	28 2f       	mov	r18, r24
    346c:	30 e0       	ldi	r19, 0x00	; 0
    346e:	8a 81       	ldd	r24, Y+2	; 0x02
    3470:	9b 81       	ldd	r25, Y+3	; 0x03
    3472:	fc 01       	movw	r30, r24
    3474:	e2 0f       	add	r30, r18
    3476:	f3 1f       	adc	r31, r19
    3478:	80 81       	ld	r24, Z
    347a:	0e 94 c5 19 	call	0x338a	; 0x338a <UART_Send>
	   i++;
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	8f 5f       	subi	r24, 0xFF	; 255
    3482:	89 83       	std	Y+1, r24	; 0x01
	}

}
void UART_SEND_String(const char* arr){
	u8 i = 0;
   while(arr[i]!='\0'){
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	28 2f       	mov	r18, r24
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	8a 81       	ldd	r24, Y+2	; 0x02
    348c:	9b 81       	ldd	r25, Y+3	; 0x03
    348e:	fc 01       	movw	r30, r24
    3490:	e2 0f       	add	r30, r18
    3492:	f3 1f       	adc	r31, r19
    3494:	80 81       	ld	r24, Z
    3496:	88 23       	and	r24, r24
    3498:	39 f7       	brne	.-50     	; 0x3468 <UART_SEND_String+0x14>
	   UART_Send(arr[i]);
	   i++;
   }
}
    349a:	0f 90       	pop	r0
    349c:	0f 90       	pop	r0
    349e:	0f 90       	pop	r0
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	08 95       	ret

000034a6 <UART_disable>:
void UART_disable() {
    34a6:	df 93       	push	r29
    34a8:	cf 93       	push	r28
    34aa:	cd b7       	in	r28, 0x3d	; 61
    34ac:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB_REG, UCSRB_RXEN);
    34ae:	aa e2       	ldi	r26, 0x2A	; 42
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ea e2       	ldi	r30, 0x2A	; 42
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	8f 7e       	andi	r24, 0xEF	; 239
    34ba:	8c 93       	st	X, r24
}
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <UART_enable>:
void UART_enable() {
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
    34ca:	aa e2       	ldi	r26, 0x2A	; 42
    34cc:	b0 e0       	ldi	r27, 0x00	; 0
    34ce:	ea e2       	ldi	r30, 0x2A	; 42
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	80 61       	ori	r24, 0x10	; 16
    34d6:	8c 93       	st	X, r24

}
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	08 95       	ret

000034de <Timer0_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATH.h"
#include"TIMER_INTERFACE.h"
#include"TIMER_REG.h"

void Timer0_init(){
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM TIMER MODE*/
   SET_BIT(TCCR0_REG,TCCR0_WGM00);
    34e6:	a3 e5       	ldi	r26, 0x53	; 83
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	e3 e5       	ldi	r30, 0x53	; 83
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	80 64       	ori	r24, 0x40	; 64
    34f2:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_WGM01);
    34f4:	a3 e5       	ldi	r26, 0x53	; 83
    34f6:	b0 e0       	ldi	r27, 0x00	; 0
    34f8:	e3 e5       	ldi	r30, 0x53	; 83
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	88 60       	ori	r24, 0x08	; 8
    3500:	8c 93       	st	X, r24

   /*Non inverting PWM */
   CLR_BIT(TCCR0_REG,TCCR0_COM00);
    3502:	a3 e5       	ldi	r26, 0x53	; 83
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	e3 e5       	ldi	r30, 0x53	; 83
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 81       	ld	r24, Z
    350c:	8f 7e       	andi	r24, 0xEF	; 239
    350e:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_COM01);
    3510:	a3 e5       	ldi	r26, 0x53	; 83
    3512:	b0 e0       	ldi	r27, 0x00	; 0
    3514:	e3 e5       	ldi	r30, 0x53	; 83
    3516:	f0 e0       	ldi	r31, 0x00	; 0
    3518:	80 81       	ld	r24, Z
    351a:	80 62       	ori	r24, 0x20	; 32
    351c:	8c 93       	st	X, r24

   /*Prescaler Clock Select*/
   CLR_BIT(TCCR0_REG,TCCR0_CS00);
    351e:	a3 e5       	ldi	r26, 0x53	; 83
    3520:	b0 e0       	ldi	r27, 0x00	; 0
    3522:	e3 e5       	ldi	r30, 0x53	; 83
    3524:	f0 e0       	ldi	r31, 0x00	; 0
    3526:	80 81       	ld	r24, Z
    3528:	8e 7f       	andi	r24, 0xFE	; 254
    352a:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_CS01);
    352c:	a3 e5       	ldi	r26, 0x53	; 83
    352e:	b0 e0       	ldi	r27, 0x00	; 0
    3530:	e3 e5       	ldi	r30, 0x53	; 83
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	80 81       	ld	r24, Z
    3536:	82 60       	ori	r24, 0x02	; 2
    3538:	8c 93       	st	X, r24
   CLR_BIT(TCCR0_REG,TCCR0_CS02);
    353a:	a3 e5       	ldi	r26, 0x53	; 83
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	e3 e5       	ldi	r30, 0x53	; 83
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	8b 7f       	andi	r24, 0xFB	; 251
    3546:	8c 93       	st	X, r24


}
    3548:	cf 91       	pop	r28
    354a:	df 91       	pop	r29
    354c:	08 95       	ret

0000354e <Timer1_init>:

void Timer1_init(){
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	cd b7       	in	r28, 0x3d	; 61
    3554:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM Mode ICR1*/
	CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
    3556:	af e4       	ldi	r26, 0x4F	; 79
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	ef e4       	ldi	r30, 0x4F	; 79
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	8e 7f       	andi	r24, 0xFE	; 254
    3562:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    3564:	af e4       	ldi	r26, 0x4F	; 79
    3566:	b0 e0       	ldi	r27, 0x00	; 0
    3568:	ef e4       	ldi	r30, 0x4F	; 79
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	80 81       	ld	r24, Z
    356e:	82 60       	ori	r24, 0x02	; 2
    3570:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    3572:	ae e4       	ldi	r26, 0x4E	; 78
    3574:	b0 e0       	ldi	r27, 0x00	; 0
    3576:	ee e4       	ldi	r30, 0x4E	; 78
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	80 81       	ld	r24, Z
    357c:	88 60       	ori	r24, 0x08	; 8
    357e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    3580:	ae e4       	ldi	r26, 0x4E	; 78
    3582:	b0 e0       	ldi	r27, 0x00	; 0
    3584:	ee e4       	ldi	r30, 0x4E	; 78
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	80 61       	ori	r24, 0x10	; 16
    358c:	8c 93       	st	X, r24
    /*interrupt enable*/
	//SET_BIT(TIMSK_REG,TIMSK_TOIE1);
	//SET_BIT(TIMSK_REG,TIMSK_OCIE1A);

	/*Mode Fast PWM on OCR1A NON-inverting */
	CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    358e:	af e4       	ldi	r26, 0x4F	; 79
    3590:	b0 e0       	ldi	r27, 0x00	; 0
    3592:	ef e4       	ldi	r30, 0x4F	; 79
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	80 81       	ld	r24, Z
    3598:	8f 7b       	andi	r24, 0xBF	; 191
    359a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    359c:	af e4       	ldi	r26, 0x4F	; 79
    359e:	b0 e0       	ldi	r27, 0x00	; 0
    35a0:	ef e4       	ldi	r30, 0x4F	; 79
    35a2:	f0 e0       	ldi	r31, 0x00	; 0
    35a4:	80 81       	ld	r24, Z
    35a6:	80 68       	ori	r24, 0x80	; 128
    35a8:	8c 93       	st	X, r24
    ICR1L_REG = 20000;
    35aa:	e6 e4       	ldi	r30, 0x46	; 70
    35ac:	f0 e0       	ldi	r31, 0x00	; 0
    35ae:	80 e2       	ldi	r24, 0x20	; 32
    35b0:	9e e4       	ldi	r25, 0x4E	; 78
    35b2:	91 83       	std	Z+1, r25	; 0x01
    35b4:	80 83       	st	Z, r24
	/*Prescaler = 8*/
	CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
    35b6:	ae e4       	ldi	r26, 0x4E	; 78
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ee e4       	ldi	r30, 0x4E	; 78
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	8e 7f       	andi	r24, 0xFE	; 254
    35c2:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_CS11);
    35c4:	ae e4       	ldi	r26, 0x4E	; 78
    35c6:	b0 e0       	ldi	r27, 0x00	; 0
    35c8:	ee e4       	ldi	r30, 0x4E	; 78
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	82 60       	ori	r24, 0x02	; 2
    35d0:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    35d2:	ae e4       	ldi	r26, 0x4E	; 78
    35d4:	b0 e0       	ldi	r27, 0x00	; 0
    35d6:	ee e4       	ldi	r30, 0x4E	; 78
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	8b 7f       	andi	r24, 0xFB	; 251
    35de:	8c 93       	st	X, r24





	}
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <Timer2_init>:
	
void Timer2_init(){
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
   /*Fast PWM TIMER MODE*/
   SET_BIT(TCCR2_REG,TCCR2_WGM20);
    35ee:	a5 e4       	ldi	r26, 0x45	; 69
    35f0:	b0 e0       	ldi	r27, 0x00	; 0
    35f2:	e5 e4       	ldi	r30, 0x45	; 69
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	80 64       	ori	r24, 0x40	; 64
    35fa:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_WGM21);
    35fc:	a5 e4       	ldi	r26, 0x45	; 69
    35fe:	b0 e0       	ldi	r27, 0x00	; 0
    3600:	e5 e4       	ldi	r30, 0x45	; 69
    3602:	f0 e0       	ldi	r31, 0x00	; 0
    3604:	80 81       	ld	r24, Z
    3606:	88 60       	ori	r24, 0x08	; 8
    3608:	8c 93       	st	X, r24
   /*PWM Timer Mode*/
   // SET_BIT(TIMSK_REG,TIMSK_TOIE0);
   //SET_BIT(TIMSK_REG,TIMSK_OCIE0);

   /*PWM */
   CLR_BIT(TCCR2_REG,TCCR2_COM20);
    360a:	a5 e4       	ldi	r26, 0x45	; 69
    360c:	b0 e0       	ldi	r27, 0x00	; 0
    360e:	e5 e4       	ldi	r30, 0x45	; 69
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	8f 7e       	andi	r24, 0xEF	; 239
    3616:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_COM21);
    3618:	a5 e4       	ldi	r26, 0x45	; 69
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	e5 e4       	ldi	r30, 0x45	; 69
    361e:	f0 e0       	ldi	r31, 0x00	; 0
    3620:	80 81       	ld	r24, Z
    3622:	80 62       	ori	r24, 0x20	; 32
    3624:	8c 93       	st	X, r24
   /*compare match output register*/
   //OCR0_REG = 0;


   /*Prescaler Clock Select*/
   CLR_BIT(TCCR2_REG,TCCR2_CS20);
    3626:	a5 e4       	ldi	r26, 0x45	; 69
    3628:	b0 e0       	ldi	r27, 0x00	; 0
    362a:	e5 e4       	ldi	r30, 0x45	; 69
    362c:	f0 e0       	ldi	r31, 0x00	; 0
    362e:	80 81       	ld	r24, Z
    3630:	8e 7f       	andi	r24, 0xFE	; 254
    3632:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_CS21);
    3634:	a5 e4       	ldi	r26, 0x45	; 69
    3636:	b0 e0       	ldi	r27, 0x00	; 0
    3638:	e5 e4       	ldi	r30, 0x45	; 69
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	80 81       	ld	r24, Z
    363e:	82 60       	ori	r24, 0x02	; 2
    3640:	8c 93       	st	X, r24
   CLR_BIT(TCCR2_REG,TCCR2_CS22);
    3642:	a5 e4       	ldi	r26, 0x45	; 69
    3644:	b0 e0       	ldi	r27, 0x00	; 0
    3646:	e5 e4       	ldi	r30, 0x45	; 69
    3648:	f0 e0       	ldi	r31, 0x00	; 0
    364a:	80 81       	ld	r24, Z
    364c:	8b 7f       	andi	r24, 0xFB	; 251
    364e:	8c 93       	st	X, r24


}
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <SET_TCNT0>:
void SET_TCNT0(u8 value){
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	0f 92       	push	r0
    365c:	cd b7       	in	r28, 0x3d	; 61
    365e:	de b7       	in	r29, 0x3e	; 62
    3660:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = value;
    3662:	e2 e5       	ldi	r30, 0x52	; 82
    3664:	f0 e0       	ldi	r31, 0x00	; 0
    3666:	89 81       	ldd	r24, Y+1	; 0x01
    3668:	80 83       	st	Z, r24
}
    366a:	0f 90       	pop	r0
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	08 95       	ret

00003672 <SET_OCR0>:
void SET_OCR0(u8 value){
    3672:	df 93       	push	r29
    3674:	cf 93       	push	r28
    3676:	0f 92       	push	r0
    3678:	cd b7       	in	r28, 0x3d	; 61
    367a:	de b7       	in	r29, 0x3e	; 62
    367c:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = value;
    367e:	ec e5       	ldi	r30, 0x5C	; 92
    3680:	f0 e0       	ldi	r31, 0x00	; 0
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	80 83       	st	Z, r24
}
    3686:	0f 90       	pop	r0
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <SET_TCNT2>:
void SET_TCNT2(u8 value){
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	0f 92       	push	r0
    3694:	cd b7       	in	r28, 0x3d	; 61
    3696:	de b7       	in	r29, 0x3e	; 62
    3698:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_REG = value;
    369a:	e4 e4       	ldi	r30, 0x44	; 68
    369c:	f0 e0       	ldi	r31, 0x00	; 0
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	80 83       	st	Z, r24
}
    36a2:	0f 90       	pop	r0
    36a4:	cf 91       	pop	r28
    36a6:	df 91       	pop	r29
    36a8:	08 95       	ret

000036aa <SET_OCR2>:
void SET_OCR2(u8 value){
    36aa:	df 93       	push	r29
    36ac:	cf 93       	push	r28
    36ae:	0f 92       	push	r0
    36b0:	cd b7       	in	r28, 0x3d	; 61
    36b2:	de b7       	in	r29, 0x3e	; 62
    36b4:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG = value;
    36b6:	e3 e4       	ldi	r30, 0x43	; 67
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	80 83       	st	Z, r24
}
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <SET_TCNT1>:
void SET_TCNT1(u16 value){
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <SET_TCNT1+0x6>
    36cc:	cd b7       	in	r28, 0x3d	; 61
    36ce:	de b7       	in	r29, 0x3e	; 62
    36d0:	9a 83       	std	Y+2, r25	; 0x02
    36d2:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L_REG = value;
    36d4:	ec e4       	ldi	r30, 0x4C	; 76
    36d6:	f0 e0       	ldi	r31, 0x00	; 0
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	9a 81       	ldd	r25, Y+2	; 0x02
    36dc:	91 83       	std	Z+1, r25	; 0x01
    36de:	80 83       	st	Z, r24
}
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	cf 91       	pop	r28
    36e6:	df 91       	pop	r29
    36e8:	08 95       	ret

000036ea <SET_OCR1A>:
void SET_OCR1A(u16 value){
    36ea:	df 93       	push	r29
    36ec:	cf 93       	push	r28
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <SET_OCR1A+0x6>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	9a 83       	std	Y+2, r25	; 0x02
    36f6:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL_REG = value;
    36f8:	ea e4       	ldi	r30, 0x4A	; 74
    36fa:	f0 e0       	ldi	r31, 0x00	; 0
    36fc:	89 81       	ldd	r24, Y+1	; 0x01
    36fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3700:	91 83       	std	Z+1, r25	; 0x01
    3702:	80 83       	st	Z, r24
}
    3704:	0f 90       	pop	r0
    3706:	0f 90       	pop	r0
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <SET_OCR1B>:
void SET_OCR1B(u16 value){
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	00 d0       	rcall	.+0      	; 0x3714 <SET_OCR1B+0x6>
    3714:	cd b7       	in	r28, 0x3d	; 61
    3716:	de b7       	in	r29, 0x3e	; 62
    3718:	9a 83       	std	Y+2, r25	; 0x02
    371a:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL_REG = value;
    371c:	e8 e4       	ldi	r30, 0x48	; 72
    371e:	f0 e0       	ldi	r31, 0x00	; 0
    3720:	89 81       	ldd	r24, Y+1	; 0x01
    3722:	9a 81       	ldd	r25, Y+2	; 0x02
    3724:	91 83       	std	Z+1, r25	; 0x01
    3726:	80 83       	st	Z, r24
}
    3728:	0f 90       	pop	r0
    372a:	0f 90       	pop	r0
    372c:	cf 91       	pop	r28
    372e:	df 91       	pop	r29
    3730:	08 95       	ret

00003732 <SPI_Master_init>:
 */
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "../SPI/SPI_INTERFACE.h"
#include "../SPI/SPI_REG.h"
void SPI_Master_init(){
    3732:	df 93       	push	r29
    3734:	cf 93       	push	r28
    3736:	cd b7       	in	r28, 0x3d	; 61
    3738:	de b7       	in	r29, 0x3e	; 62

	//Clock frequency select
	SET_BIT(SPCR_REG,SPCR_SPR0);
    373a:	ad e2       	ldi	r26, 0x2D	; 45
    373c:	b0 e0       	ldi	r27, 0x00	; 0
    373e:	ed e2       	ldi	r30, 0x2D	; 45
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	80 81       	ld	r24, Z
    3744:	81 60       	ori	r24, 0x01	; 1
    3746:	8c 93       	st	X, r24
	CLR_BIT(SPCR_REG,SPCR_SPR1);
    3748:	ad e2       	ldi	r26, 0x2D	; 45
    374a:	b0 e0       	ldi	r27, 0x00	; 0
    374c:	ed e2       	ldi	r30, 0x2D	; 45
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	80 81       	ld	r24, Z
    3752:	8d 7f       	andi	r24, 0xFD	; 253
    3754:	8c 93       	st	X, r24
	SET_BIT(SPSR_REG,SPSR_SPR2x);
    3756:	ae e2       	ldi	r26, 0x2E	; 46
    3758:	b0 e0       	ldi	r27, 0x00	; 0
    375a:	ee e2       	ldi	r30, 0x2E	; 46
    375c:	f0 e0       	ldi	r31, 0x00	; 0
    375e:	80 81       	ld	r24, Z
    3760:	81 60       	ori	r24, 0x01	; 1
    3762:	8c 93       	st	X, r24
    //Master Select
	SET_BIT(SPCR_REG,SPCR_MSTR);
    3764:	ad e2       	ldi	r26, 0x2D	; 45
    3766:	b0 e0       	ldi	r27, 0x00	; 0
    3768:	ed e2       	ldi	r30, 0x2D	; 45
    376a:	f0 e0       	ldi	r31, 0x00	; 0
    376c:	80 81       	ld	r24, Z
    376e:	80 61       	ori	r24, 0x10	; 16
    3770:	8c 93       	st	X, r24
	//SPI Enable
	SET_BIT(SPCR_REG,SPCR_SPE);
    3772:	ad e2       	ldi	r26, 0x2D	; 45
    3774:	b0 e0       	ldi	r27, 0x00	; 0
    3776:	ed e2       	ldi	r30, 0x2D	; 45
    3778:	f0 e0       	ldi	r31, 0x00	; 0
    377a:	80 81       	ld	r24, Z
    377c:	80 64       	ori	r24, 0x40	; 64
    377e:	8c 93       	st	X, r24
}
    3780:	cf 91       	pop	r28
    3782:	df 91       	pop	r29
    3784:	08 95       	ret

00003786 <SPI_Slave_init>:
void SPI_Slave_init(){
    3786:	df 93       	push	r29
    3788:	cf 93       	push	r28
    378a:	cd b7       	in	r28, 0x3d	; 61
    378c:	de b7       	in	r29, 0x3e	; 62


    //Master Select
	CLR_BIT(SPCR_REG,SPCR_MSTR);
    378e:	ad e2       	ldi	r26, 0x2D	; 45
    3790:	b0 e0       	ldi	r27, 0x00	; 0
    3792:	ed e2       	ldi	r30, 0x2D	; 45
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	80 81       	ld	r24, Z
    3798:	8f 7e       	andi	r24, 0xEF	; 239
    379a:	8c 93       	st	X, r24
	//SPI Enable
	SET_BIT(SPCR_REG,SPCR_SPE);
    379c:	ad e2       	ldi	r26, 0x2D	; 45
    379e:	b0 e0       	ldi	r27, 0x00	; 0
    37a0:	ed e2       	ldi	r30, 0x2D	; 45
    37a2:	f0 e0       	ldi	r31, 0x00	; 0
    37a4:	80 81       	ld	r24, Z
    37a6:	80 64       	ori	r24, 0x40	; 64
    37a8:	8c 93       	st	X, r24
}
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <SPI_Transive>:
u8 SPI_Transive(u8 data){
    37b0:	df 93       	push	r29
    37b2:	cf 93       	push	r28
    37b4:	00 d0       	rcall	.+0      	; 0x37b6 <SPI_Transive+0x6>
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	89 83       	std	Y+1, r24	; 0x01
	SPDR_REG = data;
    37bc:	ef e2       	ldi	r30, 0x2F	; 47
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	80 83       	st	Z, r24
	while(GET_BIT(SPSR_REG,SPSR_SPIF)==0);
    37c4:	ee e2       	ldi	r30, 0x2E	; 46
    37c6:	f0 e0       	ldi	r31, 0x00	; 0
    37c8:	80 81       	ld	r24, Z
	return SPDR_REG;
    37ca:	ef e2       	ldi	r30, 0x2F	; 47
    37cc:	f0 e0       	ldi	r31, 0x00	; 0
    37ce:	80 81       	ld	r24, Z

}
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	cf 91       	pop	r28
    37d6:	df 91       	pop	r29
    37d8:	08 95       	ret

000037da <Globle_Intrrupt_Enable>:
#include"../../UTILS/BIT_MATH.h"
#include "GIE_INTERFACE.h"
#include"GIE_REG.h"


void Globle_Intrrupt_Enable(){
    37da:	df 93       	push	r29
    37dc:	cf 93       	push	r28
    37de:	cd b7       	in	r28, 0x3d	; 61
    37e0:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG,7);
    37e2:	af e5       	ldi	r26, 0x5F	; 95
    37e4:	b0 e0       	ldi	r27, 0x00	; 0
    37e6:	ef e5       	ldi	r30, 0x5F	; 95
    37e8:	f0 e0       	ldi	r31, 0x00	; 0
    37ea:	80 81       	ld	r24, Z
    37ec:	80 68       	ori	r24, 0x80	; 128
    37ee:	8c 93       	st	X, r24

}
    37f0:	cf 91       	pop	r28
    37f2:	df 91       	pop	r29
    37f4:	08 95       	ret

000037f6 <Globle_Intrrupt_Disable>:

void Globle_Intrrupt_Disable(){
    37f6:	df 93       	push	r29
    37f8:	cf 93       	push	r28
    37fa:	cd b7       	in	r28, 0x3d	; 61
    37fc:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,7);
    37fe:	af e5       	ldi	r26, 0x5F	; 95
    3800:	b0 e0       	ldi	r27, 0x00	; 0
    3802:	ef e5       	ldi	r30, 0x5F	; 95
    3804:	f0 e0       	ldi	r31, 0x00	; 0
    3806:	80 81       	ld	r24, Z
    3808:	8f 77       	andi	r24, 0x7F	; 127
    380a:	8c 93       	st	X, r24

}
    380c:	cf 91       	pop	r28
    380e:	df 91       	pop	r29
    3810:	08 95       	ret

00003812 <INT0_init>:
#include "EXT_INTERRUPT_CONFIG.h"
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
#include "EXT_INTERRUPT_INTERFACE.h"

INT0_init() {
    3812:	df 93       	push	r29
    3814:	cf 93       	push	r28
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_REG, ISC00);
	SET_BIT(MCUCR_REG, ISC01);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCR_REG,ISC00);
    381a:	a5 e5       	ldi	r26, 0x55	; 85
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	e5 e5       	ldi	r30, 0x55	; 85
    3820:	f0 e0       	ldi	r31, 0x00	; 0
    3822:	80 81       	ld	r24, Z
    3824:	8e 7f       	andi	r24, 0xFE	; 254
    3826:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,ISC01);
    3828:	a5 e5       	ldi	r26, 0x55	; 85
    382a:	b0 e0       	ldi	r27, 0x00	; 0
    382c:	e5 e5       	ldi	r30, 0x55	; 85
    382e:	f0 e0       	ldi	r31, 0x00	; 0
    3830:	80 81       	ld	r24, Z
    3832:	82 60       	ori	r24, 0x02	; 2
    3834:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,ISC01);
#endif

	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT0);
    3836:	ab e5       	ldi	r26, 0x5B	; 91
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	eb e5       	ldi	r30, 0x5B	; 91
    383c:	f0 e0       	ldi	r31, 0x00	; 0
    383e:	80 81       	ld	r24, Z
    3840:	80 64       	ori	r24, 0x40	; 64
    3842:	8c 93       	st	X, r24

}
    3844:	cf 91       	pop	r28
    3846:	df 91       	pop	r29
    3848:	08 95       	ret

0000384a <INT1_init>:

INT1_init() {
    384a:	df 93       	push	r29
    384c:	cf 93       	push	r28
    384e:	cd b7       	in	r28, 0x3d	; 61
    3850:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_REG, ISC10);
	SET_BIT(MCUCR_REG, ISC11);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCR_REG,ISC10);
    3852:	a5 e5       	ldi	r26, 0x55	; 85
    3854:	b0 e0       	ldi	r27, 0x00	; 0
    3856:	e5 e5       	ldi	r30, 0x55	; 85
    3858:	f0 e0       	ldi	r31, 0x00	; 0
    385a:	80 81       	ld	r24, Z
    385c:	8b 7f       	andi	r24, 0xFB	; 251
    385e:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,ISC11);
    3860:	a5 e5       	ldi	r26, 0x55	; 85
    3862:	b0 e0       	ldi	r27, 0x00	; 0
    3864:	e5 e5       	ldi	r30, 0x55	; 85
    3866:	f0 e0       	ldi	r31, 0x00	; 0
    3868:	80 81       	ld	r24, Z
    386a:	88 60       	ori	r24, 0x08	; 8
    386c:	8c 93       	st	X, r24
#endif


	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT1);
    386e:	ab e5       	ldi	r26, 0x5B	; 91
    3870:	b0 e0       	ldi	r27, 0x00	; 0
    3872:	eb e5       	ldi	r30, 0x5B	; 91
    3874:	f0 e0       	ldi	r31, 0x00	; 0
    3876:	80 81       	ld	r24, Z
    3878:	80 68       	ori	r24, 0x80	; 128
    387a:	8c 93       	st	X, r24

}
    387c:	cf 91       	pop	r28
    387e:	df 91       	pop	r29
    3880:	08 95       	ret

00003882 <INT2_init>:

INT2_init() {
    3882:	df 93       	push	r29
    3884:	cf 93       	push	r28
    3886:	cd b7       	in	r28, 0x3d	; 61
    3888:	de b7       	in	r29, 0x3e	; 62
#if INT0_Sense_Control == Rising_Edge
	SET_BIT(MCUCSR_REG, ISC2);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCSR_REG,ISC2);
    388a:	a4 e5       	ldi	r26, 0x54	; 84
    388c:	b0 e0       	ldi	r27, 0x00	; 0
    388e:	e4 e5       	ldi	r30, 0x54	; 84
    3890:	f0 e0       	ldi	r31, 0x00	; 0
    3892:	80 81       	ld	r24, Z
    3894:	8f 7b       	andi	r24, 0xBF	; 191
    3896:	8c 93       	st	X, r24



	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT2);
    3898:	ab e5       	ldi	r26, 0x5B	; 91
    389a:	b0 e0       	ldi	r27, 0x00	; 0
    389c:	eb e5       	ldi	r30, 0x5B	; 91
    389e:	f0 e0       	ldi	r31, 0x00	; 0
    38a0:	80 81       	ld	r24, Z
    38a2:	80 62       	ori	r24, 0x20	; 32
    38a4:	8c 93       	st	X, r24

}
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	08 95       	ret

000038ac <DIO_SetPin_Value>:
 */
#include "DIO_INTERFACE.H"



void DIO_SetPin_Value(u8 u8_port, u8 u8_pin, u8 value) {
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	27 97       	sbiw	r28, 0x07	; 7
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	89 83       	std	Y+1, r24	; 0x01
    38c2:	6a 83       	std	Y+2, r22	; 0x02
    38c4:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH) {
    38c6:	8b 81       	ldd	r24, Y+3	; 0x03
    38c8:	81 30       	cpi	r24, 0x01	; 1
    38ca:	09 f0       	breq	.+2      	; 0x38ce <DIO_SetPin_Value+0x22>
    38cc:	6f c0       	rjmp	.+222    	; 0x39ac <DIO_SetPin_Value+0x100>
		switch (u8_port) {
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	28 2f       	mov	r18, r24
    38d2:	30 e0       	ldi	r19, 0x00	; 0
    38d4:	3f 83       	std	Y+7, r19	; 0x07
    38d6:	2e 83       	std	Y+6, r18	; 0x06
    38d8:	8e 81       	ldd	r24, Y+6	; 0x06
    38da:	9f 81       	ldd	r25, Y+7	; 0x07
    38dc:	81 30       	cpi	r24, 0x01	; 1
    38de:	91 05       	cpc	r25, r1
    38e0:	49 f1       	breq	.+82     	; 0x3934 <DIO_SetPin_Value+0x88>
    38e2:	2e 81       	ldd	r18, Y+6	; 0x06
    38e4:	3f 81       	ldd	r19, Y+7	; 0x07
    38e6:	22 30       	cpi	r18, 0x02	; 2
    38e8:	31 05       	cpc	r19, r1
    38ea:	2c f4       	brge	.+10     	; 0x38f6 <DIO_SetPin_Value+0x4a>
    38ec:	8e 81       	ldd	r24, Y+6	; 0x06
    38ee:	9f 81       	ldd	r25, Y+7	; 0x07
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	61 f0       	breq	.+24     	; 0x390c <DIO_SetPin_Value+0x60>
    38f4:	d2 c0       	rjmp	.+420    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
    38f6:	2e 81       	ldd	r18, Y+6	; 0x06
    38f8:	3f 81       	ldd	r19, Y+7	; 0x07
    38fa:	22 30       	cpi	r18, 0x02	; 2
    38fc:	31 05       	cpc	r19, r1
    38fe:	71 f1       	breq	.+92     	; 0x395c <DIO_SetPin_Value+0xb0>
    3900:	8e 81       	ldd	r24, Y+6	; 0x06
    3902:	9f 81       	ldd	r25, Y+7	; 0x07
    3904:	83 30       	cpi	r24, 0x03	; 3
    3906:	91 05       	cpc	r25, r1
    3908:	e9 f1       	breq	.+122    	; 0x3984 <DIO_SetPin_Value+0xd8>
    390a:	c7 c0       	rjmp	.+398    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
		case GroupA:
			SET_BIT(PORTA_REG, u8_pin);
    390c:	ab e3       	ldi	r26, 0x3B	; 59
    390e:	b0 e0       	ldi	r27, 0x00	; 0
    3910:	eb e3       	ldi	r30, 0x3B	; 59
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	48 2f       	mov	r20, r24
    3918:	8a 81       	ldd	r24, Y+2	; 0x02
    391a:	28 2f       	mov	r18, r24
    391c:	30 e0       	ldi	r19, 0x00	; 0
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	02 2e       	mov	r0, r18
    3924:	02 c0       	rjmp	.+4      	; 0x392a <DIO_SetPin_Value+0x7e>
    3926:	88 0f       	add	r24, r24
    3928:	99 1f       	adc	r25, r25
    392a:	0a 94       	dec	r0
    392c:	e2 f7       	brpl	.-8      	; 0x3926 <DIO_SetPin_Value+0x7a>
    392e:	84 2b       	or	r24, r20
    3930:	8c 93       	st	X, r24
    3932:	b3 c0       	rjmp	.+358    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			SET_BIT(PORTB_REG, u8_pin);
    3934:	a8 e3       	ldi	r26, 0x38	; 56
    3936:	b0 e0       	ldi	r27, 0x00	; 0
    3938:	e8 e3       	ldi	r30, 0x38	; 56
    393a:	f0 e0       	ldi	r31, 0x00	; 0
    393c:	80 81       	ld	r24, Z
    393e:	48 2f       	mov	r20, r24
    3940:	8a 81       	ldd	r24, Y+2	; 0x02
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	81 e0       	ldi	r24, 0x01	; 1
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	02 2e       	mov	r0, r18
    394c:	02 c0       	rjmp	.+4      	; 0x3952 <DIO_SetPin_Value+0xa6>
    394e:	88 0f       	add	r24, r24
    3950:	99 1f       	adc	r25, r25
    3952:	0a 94       	dec	r0
    3954:	e2 f7       	brpl	.-8      	; 0x394e <DIO_SetPin_Value+0xa2>
    3956:	84 2b       	or	r24, r20
    3958:	8c 93       	st	X, r24
    395a:	9f c0       	rjmp	.+318    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			SET_BIT(PORTC_REG, u8_pin);
    395c:	a5 e3       	ldi	r26, 0x35	; 53
    395e:	b0 e0       	ldi	r27, 0x00	; 0
    3960:	e5 e3       	ldi	r30, 0x35	; 53
    3962:	f0 e0       	ldi	r31, 0x00	; 0
    3964:	80 81       	ld	r24, Z
    3966:	48 2f       	mov	r20, r24
    3968:	8a 81       	ldd	r24, Y+2	; 0x02
    396a:	28 2f       	mov	r18, r24
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	81 e0       	ldi	r24, 0x01	; 1
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	02 2e       	mov	r0, r18
    3974:	02 c0       	rjmp	.+4      	; 0x397a <DIO_SetPin_Value+0xce>
    3976:	88 0f       	add	r24, r24
    3978:	99 1f       	adc	r25, r25
    397a:	0a 94       	dec	r0
    397c:	e2 f7       	brpl	.-8      	; 0x3976 <DIO_SetPin_Value+0xca>
    397e:	84 2b       	or	r24, r20
    3980:	8c 93       	st	X, r24
    3982:	8b c0       	rjmp	.+278    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			SET_BIT(PORTD_REG, u8_pin);
    3984:	a2 e3       	ldi	r26, 0x32	; 50
    3986:	b0 e0       	ldi	r27, 0x00	; 0
    3988:	e2 e3       	ldi	r30, 0x32	; 50
    398a:	f0 e0       	ldi	r31, 0x00	; 0
    398c:	80 81       	ld	r24, Z
    398e:	48 2f       	mov	r20, r24
    3990:	8a 81       	ldd	r24, Y+2	; 0x02
    3992:	28 2f       	mov	r18, r24
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	81 e0       	ldi	r24, 0x01	; 1
    3998:	90 e0       	ldi	r25, 0x00	; 0
    399a:	02 2e       	mov	r0, r18
    399c:	02 c0       	rjmp	.+4      	; 0x39a2 <DIO_SetPin_Value+0xf6>
    399e:	88 0f       	add	r24, r24
    39a0:	99 1f       	adc	r25, r25
    39a2:	0a 94       	dec	r0
    39a4:	e2 f7       	brpl	.-8      	; 0x399e <DIO_SetPin_Value+0xf2>
    39a6:	84 2b       	or	r24, r20
    39a8:	8c 93       	st	X, r24
    39aa:	77 c0       	rjmp	.+238    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;

		}

	}
	else if (value == LOW) {
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	88 23       	and	r24, r24
    39b0:	09 f0       	breq	.+2      	; 0x39b4 <DIO_SetPin_Value+0x108>
    39b2:	73 c0       	rjmp	.+230    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
		switch (u8_port) {
    39b4:	89 81       	ldd	r24, Y+1	; 0x01
    39b6:	28 2f       	mov	r18, r24
    39b8:	30 e0       	ldi	r19, 0x00	; 0
    39ba:	3d 83       	std	Y+5, r19	; 0x05
    39bc:	2c 83       	std	Y+4, r18	; 0x04
    39be:	8c 81       	ldd	r24, Y+4	; 0x04
    39c0:	9d 81       	ldd	r25, Y+5	; 0x05
    39c2:	81 30       	cpi	r24, 0x01	; 1
    39c4:	91 05       	cpc	r25, r1
    39c6:	59 f1       	breq	.+86     	; 0x3a1e <DIO_SetPin_Value+0x172>
    39c8:	2c 81       	ldd	r18, Y+4	; 0x04
    39ca:	3d 81       	ldd	r19, Y+5	; 0x05
    39cc:	22 30       	cpi	r18, 0x02	; 2
    39ce:	31 05       	cpc	r19, r1
    39d0:	2c f4       	brge	.+10     	; 0x39dc <DIO_SetPin_Value+0x130>
    39d2:	8c 81       	ldd	r24, Y+4	; 0x04
    39d4:	9d 81       	ldd	r25, Y+5	; 0x05
    39d6:	00 97       	sbiw	r24, 0x00	; 0
    39d8:	69 f0       	breq	.+26     	; 0x39f4 <DIO_SetPin_Value+0x148>
    39da:	5f c0       	rjmp	.+190    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
    39dc:	2c 81       	ldd	r18, Y+4	; 0x04
    39de:	3d 81       	ldd	r19, Y+5	; 0x05
    39e0:	22 30       	cpi	r18, 0x02	; 2
    39e2:	31 05       	cpc	r19, r1
    39e4:	89 f1       	breq	.+98     	; 0x3a48 <DIO_SetPin_Value+0x19c>
    39e6:	8c 81       	ldd	r24, Y+4	; 0x04
    39e8:	9d 81       	ldd	r25, Y+5	; 0x05
    39ea:	83 30       	cpi	r24, 0x03	; 3
    39ec:	91 05       	cpc	r25, r1
    39ee:	09 f4       	brne	.+2      	; 0x39f2 <DIO_SetPin_Value+0x146>
    39f0:	40 c0       	rjmp	.+128    	; 0x3a72 <DIO_SetPin_Value+0x1c6>
    39f2:	53 c0       	rjmp	.+166    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
		case GroupA:
			CLR_BIT(PORTA_REG, u8_pin);
    39f4:	ab e3       	ldi	r26, 0x3B	; 59
    39f6:	b0 e0       	ldi	r27, 0x00	; 0
    39f8:	eb e3       	ldi	r30, 0x3B	; 59
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	80 81       	ld	r24, Z
    39fe:	48 2f       	mov	r20, r24
    3a00:	8a 81       	ldd	r24, Y+2	; 0x02
    3a02:	28 2f       	mov	r18, r24
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	81 e0       	ldi	r24, 0x01	; 1
    3a08:	90 e0       	ldi	r25, 0x00	; 0
    3a0a:	02 2e       	mov	r0, r18
    3a0c:	02 c0       	rjmp	.+4      	; 0x3a12 <DIO_SetPin_Value+0x166>
    3a0e:	88 0f       	add	r24, r24
    3a10:	99 1f       	adc	r25, r25
    3a12:	0a 94       	dec	r0
    3a14:	e2 f7       	brpl	.-8      	; 0x3a0e <DIO_SetPin_Value+0x162>
    3a16:	80 95       	com	r24
    3a18:	84 23       	and	r24, r20
    3a1a:	8c 93       	st	X, r24
    3a1c:	3e c0       	rjmp	.+124    	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			CLR_BIT(PORTB_REG, u8_pin);
    3a1e:	a8 e3       	ldi	r26, 0x38	; 56
    3a20:	b0 e0       	ldi	r27, 0x00	; 0
    3a22:	e8 e3       	ldi	r30, 0x38	; 56
    3a24:	f0 e0       	ldi	r31, 0x00	; 0
    3a26:	80 81       	ld	r24, Z
    3a28:	48 2f       	mov	r20, r24
    3a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2c:	28 2f       	mov	r18, r24
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	81 e0       	ldi	r24, 0x01	; 1
    3a32:	90 e0       	ldi	r25, 0x00	; 0
    3a34:	02 2e       	mov	r0, r18
    3a36:	02 c0       	rjmp	.+4      	; 0x3a3c <DIO_SetPin_Value+0x190>
    3a38:	88 0f       	add	r24, r24
    3a3a:	99 1f       	adc	r25, r25
    3a3c:	0a 94       	dec	r0
    3a3e:	e2 f7       	brpl	.-8      	; 0x3a38 <DIO_SetPin_Value+0x18c>
    3a40:	80 95       	com	r24
    3a42:	84 23       	and	r24, r20
    3a44:	8c 93       	st	X, r24
    3a46:	29 c0       	rjmp	.+82     	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			CLR_BIT(PORTC_REG, u8_pin);
    3a48:	a5 e3       	ldi	r26, 0x35	; 53
    3a4a:	b0 e0       	ldi	r27, 0x00	; 0
    3a4c:	e5 e3       	ldi	r30, 0x35	; 53
    3a4e:	f0 e0       	ldi	r31, 0x00	; 0
    3a50:	80 81       	ld	r24, Z
    3a52:	48 2f       	mov	r20, r24
    3a54:	8a 81       	ldd	r24, Y+2	; 0x02
    3a56:	28 2f       	mov	r18, r24
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	81 e0       	ldi	r24, 0x01	; 1
    3a5c:	90 e0       	ldi	r25, 0x00	; 0
    3a5e:	02 2e       	mov	r0, r18
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <DIO_SetPin_Value+0x1ba>
    3a62:	88 0f       	add	r24, r24
    3a64:	99 1f       	adc	r25, r25
    3a66:	0a 94       	dec	r0
    3a68:	e2 f7       	brpl	.-8      	; 0x3a62 <DIO_SetPin_Value+0x1b6>
    3a6a:	80 95       	com	r24
    3a6c:	84 23       	and	r24, r20
    3a6e:	8c 93       	st	X, r24
    3a70:	14 c0       	rjmp	.+40     	; 0x3a9a <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			CLR_BIT(PORTD_REG, u8_pin);
    3a72:	a2 e3       	ldi	r26, 0x32	; 50
    3a74:	b0 e0       	ldi	r27, 0x00	; 0
    3a76:	e2 e3       	ldi	r30, 0x32	; 50
    3a78:	f0 e0       	ldi	r31, 0x00	; 0
    3a7a:	80 81       	ld	r24, Z
    3a7c:	48 2f       	mov	r20, r24
    3a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3a80:	28 2f       	mov	r18, r24
    3a82:	30 e0       	ldi	r19, 0x00	; 0
    3a84:	81 e0       	ldi	r24, 0x01	; 1
    3a86:	90 e0       	ldi	r25, 0x00	; 0
    3a88:	02 2e       	mov	r0, r18
    3a8a:	02 c0       	rjmp	.+4      	; 0x3a90 <DIO_SetPin_Value+0x1e4>
    3a8c:	88 0f       	add	r24, r24
    3a8e:	99 1f       	adc	r25, r25
    3a90:	0a 94       	dec	r0
    3a92:	e2 f7       	brpl	.-8      	; 0x3a8c <DIO_SetPin_Value+0x1e0>
    3a94:	80 95       	com	r24
    3a96:	84 23       	and	r24, r20
    3a98:	8c 93       	st	X, r24
			break;
		}
	}
}
    3a9a:	27 96       	adiw	r28, 0x07	; 7
    3a9c:	0f b6       	in	r0, 0x3f	; 63
    3a9e:	f8 94       	cli
    3aa0:	de bf       	out	0x3e, r29	; 62
    3aa2:	0f be       	out	0x3f, r0	; 63
    3aa4:	cd bf       	out	0x3d, r28	; 61
    3aa6:	cf 91       	pop	r28
    3aa8:	df 91       	pop	r29
    3aaa:	08 95       	ret

00003aac <DIO_SetPin_Direction>:





void DIO_SetPin_Direction(u8 u8_port, u8 u8_pin, u8 direction) {
    3aac:	df 93       	push	r29
    3aae:	cf 93       	push	r28
    3ab0:	cd b7       	in	r28, 0x3d	; 61
    3ab2:	de b7       	in	r29, 0x3e	; 62
    3ab4:	27 97       	sbiw	r28, 0x07	; 7
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	89 83       	std	Y+1, r24	; 0x01
    3ac2:	6a 83       	std	Y+2, r22	; 0x02
    3ac4:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == OUTPUT) {
    3ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	09 f0       	breq	.+2      	; 0x3ace <DIO_SetPin_Direction+0x22>
    3acc:	6f c0       	rjmp	.+222    	; 0x3bac <DIO_SetPin_Direction+0x100>
		switch (u8_port) {
    3ace:	89 81       	ldd	r24, Y+1	; 0x01
    3ad0:	28 2f       	mov	r18, r24
    3ad2:	30 e0       	ldi	r19, 0x00	; 0
    3ad4:	3f 83       	std	Y+7, r19	; 0x07
    3ad6:	2e 83       	std	Y+6, r18	; 0x06
    3ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    3ada:	9f 81       	ldd	r25, Y+7	; 0x07
    3adc:	81 30       	cpi	r24, 0x01	; 1
    3ade:	91 05       	cpc	r25, r1
    3ae0:	49 f1       	breq	.+82     	; 0x3b34 <DIO_SetPin_Direction+0x88>
    3ae2:	2e 81       	ldd	r18, Y+6	; 0x06
    3ae4:	3f 81       	ldd	r19, Y+7	; 0x07
    3ae6:	22 30       	cpi	r18, 0x02	; 2
    3ae8:	31 05       	cpc	r19, r1
    3aea:	2c f4       	brge	.+10     	; 0x3af6 <DIO_SetPin_Direction+0x4a>
    3aec:	8e 81       	ldd	r24, Y+6	; 0x06
    3aee:	9f 81       	ldd	r25, Y+7	; 0x07
    3af0:	00 97       	sbiw	r24, 0x00	; 0
    3af2:	61 f0       	breq	.+24     	; 0x3b0c <DIO_SetPin_Direction+0x60>
    3af4:	d2 c0       	rjmp	.+420    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
    3af6:	2e 81       	ldd	r18, Y+6	; 0x06
    3af8:	3f 81       	ldd	r19, Y+7	; 0x07
    3afa:	22 30       	cpi	r18, 0x02	; 2
    3afc:	31 05       	cpc	r19, r1
    3afe:	71 f1       	breq	.+92     	; 0x3b5c <DIO_SetPin_Direction+0xb0>
    3b00:	8e 81       	ldd	r24, Y+6	; 0x06
    3b02:	9f 81       	ldd	r25, Y+7	; 0x07
    3b04:	83 30       	cpi	r24, 0x03	; 3
    3b06:	91 05       	cpc	r25, r1
    3b08:	e9 f1       	breq	.+122    	; 0x3b84 <DIO_SetPin_Direction+0xd8>
    3b0a:	c7 c0       	rjmp	.+398    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			SET_BIT(DDRA_REG, u8_pin);
    3b0c:	aa e3       	ldi	r26, 0x3A	; 58
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	ea e3       	ldi	r30, 0x3A	; 58
    3b12:	f0 e0       	ldi	r31, 0x00	; 0
    3b14:	80 81       	ld	r24, Z
    3b16:	48 2f       	mov	r20, r24
    3b18:	8a 81       	ldd	r24, Y+2	; 0x02
    3b1a:	28 2f       	mov	r18, r24
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	02 2e       	mov	r0, r18
    3b24:	02 c0       	rjmp	.+4      	; 0x3b2a <DIO_SetPin_Direction+0x7e>
    3b26:	88 0f       	add	r24, r24
    3b28:	99 1f       	adc	r25, r25
    3b2a:	0a 94       	dec	r0
    3b2c:	e2 f7       	brpl	.-8      	; 0x3b26 <DIO_SetPin_Direction+0x7a>
    3b2e:	84 2b       	or	r24, r20
    3b30:	8c 93       	st	X, r24
    3b32:	b3 c0       	rjmp	.+358    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			SET_BIT(DDRB_REG, u8_pin);
    3b34:	a7 e3       	ldi	r26, 0x37	; 55
    3b36:	b0 e0       	ldi	r27, 0x00	; 0
    3b38:	e7 e3       	ldi	r30, 0x37	; 55
    3b3a:	f0 e0       	ldi	r31, 0x00	; 0
    3b3c:	80 81       	ld	r24, Z
    3b3e:	48 2f       	mov	r20, r24
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	28 2f       	mov	r18, r24
    3b44:	30 e0       	ldi	r19, 0x00	; 0
    3b46:	81 e0       	ldi	r24, 0x01	; 1
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	02 2e       	mov	r0, r18
    3b4c:	02 c0       	rjmp	.+4      	; 0x3b52 <DIO_SetPin_Direction+0xa6>
    3b4e:	88 0f       	add	r24, r24
    3b50:	99 1f       	adc	r25, r25
    3b52:	0a 94       	dec	r0
    3b54:	e2 f7       	brpl	.-8      	; 0x3b4e <DIO_SetPin_Direction+0xa2>
    3b56:	84 2b       	or	r24, r20
    3b58:	8c 93       	st	X, r24
    3b5a:	9f c0       	rjmp	.+318    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			SET_BIT(DDRC_REG, u8_pin);
    3b5c:	a4 e3       	ldi	r26, 0x34	; 52
    3b5e:	b0 e0       	ldi	r27, 0x00	; 0
    3b60:	e4 e3       	ldi	r30, 0x34	; 52
    3b62:	f0 e0       	ldi	r31, 0x00	; 0
    3b64:	80 81       	ld	r24, Z
    3b66:	48 2f       	mov	r20, r24
    3b68:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6a:	28 2f       	mov	r18, r24
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	90 e0       	ldi	r25, 0x00	; 0
    3b72:	02 2e       	mov	r0, r18
    3b74:	02 c0       	rjmp	.+4      	; 0x3b7a <DIO_SetPin_Direction+0xce>
    3b76:	88 0f       	add	r24, r24
    3b78:	99 1f       	adc	r25, r25
    3b7a:	0a 94       	dec	r0
    3b7c:	e2 f7       	brpl	.-8      	; 0x3b76 <DIO_SetPin_Direction+0xca>
    3b7e:	84 2b       	or	r24, r20
    3b80:	8c 93       	st	X, r24
    3b82:	8b c0       	rjmp	.+278    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			SET_BIT(DDRD_REG, u8_pin);
    3b84:	a1 e3       	ldi	r26, 0x31	; 49
    3b86:	b0 e0       	ldi	r27, 0x00	; 0
    3b88:	e1 e3       	ldi	r30, 0x31	; 49
    3b8a:	f0 e0       	ldi	r31, 0x00	; 0
    3b8c:	80 81       	ld	r24, Z
    3b8e:	48 2f       	mov	r20, r24
    3b90:	8a 81       	ldd	r24, Y+2	; 0x02
    3b92:	28 2f       	mov	r18, r24
    3b94:	30 e0       	ldi	r19, 0x00	; 0
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	02 2e       	mov	r0, r18
    3b9c:	02 c0       	rjmp	.+4      	; 0x3ba2 <DIO_SetPin_Direction+0xf6>
    3b9e:	88 0f       	add	r24, r24
    3ba0:	99 1f       	adc	r25, r25
    3ba2:	0a 94       	dec	r0
    3ba4:	e2 f7       	brpl	.-8      	; 0x3b9e <DIO_SetPin_Direction+0xf2>
    3ba6:	84 2b       	or	r24, r20
    3ba8:	8c 93       	st	X, r24
    3baa:	77 c0       	rjmp	.+238    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;

		}

	}
	else if (direction == INPUT) {
    3bac:	8b 81       	ldd	r24, Y+3	; 0x03
    3bae:	88 23       	and	r24, r24
    3bb0:	09 f0       	breq	.+2      	; 0x3bb4 <DIO_SetPin_Direction+0x108>
    3bb2:	73 c0       	rjmp	.+230    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
		switch (u8_port) {
    3bb4:	89 81       	ldd	r24, Y+1	; 0x01
    3bb6:	28 2f       	mov	r18, r24
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	3d 83       	std	Y+5, r19	; 0x05
    3bbc:	2c 83       	std	Y+4, r18	; 0x04
    3bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc0:	9d 81       	ldd	r25, Y+5	; 0x05
    3bc2:	81 30       	cpi	r24, 0x01	; 1
    3bc4:	91 05       	cpc	r25, r1
    3bc6:	59 f1       	breq	.+86     	; 0x3c1e <DIO_SetPin_Direction+0x172>
    3bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    3bca:	3d 81       	ldd	r19, Y+5	; 0x05
    3bcc:	22 30       	cpi	r18, 0x02	; 2
    3bce:	31 05       	cpc	r19, r1
    3bd0:	2c f4       	brge	.+10     	; 0x3bdc <DIO_SetPin_Direction+0x130>
    3bd2:	8c 81       	ldd	r24, Y+4	; 0x04
    3bd4:	9d 81       	ldd	r25, Y+5	; 0x05
    3bd6:	00 97       	sbiw	r24, 0x00	; 0
    3bd8:	69 f0       	breq	.+26     	; 0x3bf4 <DIO_SetPin_Direction+0x148>
    3bda:	5f c0       	rjmp	.+190    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
    3bdc:	2c 81       	ldd	r18, Y+4	; 0x04
    3bde:	3d 81       	ldd	r19, Y+5	; 0x05
    3be0:	22 30       	cpi	r18, 0x02	; 2
    3be2:	31 05       	cpc	r19, r1
    3be4:	89 f1       	breq	.+98     	; 0x3c48 <DIO_SetPin_Direction+0x19c>
    3be6:	8c 81       	ldd	r24, Y+4	; 0x04
    3be8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bea:	83 30       	cpi	r24, 0x03	; 3
    3bec:	91 05       	cpc	r25, r1
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <DIO_SetPin_Direction+0x146>
    3bf0:	40 c0       	rjmp	.+128    	; 0x3c72 <DIO_SetPin_Direction+0x1c6>
    3bf2:	53 c0       	rjmp	.+166    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			CLR_BIT(DDRA_REG, u8_pin);
    3bf4:	aa e3       	ldi	r26, 0x3A	; 58
    3bf6:	b0 e0       	ldi	r27, 0x00	; 0
    3bf8:	ea e3       	ldi	r30, 0x3A	; 58
    3bfa:	f0 e0       	ldi	r31, 0x00	; 0
    3bfc:	80 81       	ld	r24, Z
    3bfe:	48 2f       	mov	r20, r24
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	28 2f       	mov	r18, r24
    3c04:	30 e0       	ldi	r19, 0x00	; 0
    3c06:	81 e0       	ldi	r24, 0x01	; 1
    3c08:	90 e0       	ldi	r25, 0x00	; 0
    3c0a:	02 2e       	mov	r0, r18
    3c0c:	02 c0       	rjmp	.+4      	; 0x3c12 <DIO_SetPin_Direction+0x166>
    3c0e:	88 0f       	add	r24, r24
    3c10:	99 1f       	adc	r25, r25
    3c12:	0a 94       	dec	r0
    3c14:	e2 f7       	brpl	.-8      	; 0x3c0e <DIO_SetPin_Direction+0x162>
    3c16:	80 95       	com	r24
    3c18:	84 23       	and	r24, r20
    3c1a:	8c 93       	st	X, r24
    3c1c:	3e c0       	rjmp	.+124    	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			CLR_BIT(DDRB_REG, u8_pin);
    3c1e:	a7 e3       	ldi	r26, 0x37	; 55
    3c20:	b0 e0       	ldi	r27, 0x00	; 0
    3c22:	e7 e3       	ldi	r30, 0x37	; 55
    3c24:	f0 e0       	ldi	r31, 0x00	; 0
    3c26:	80 81       	ld	r24, Z
    3c28:	48 2f       	mov	r20, r24
    3c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2c:	28 2f       	mov	r18, r24
    3c2e:	30 e0       	ldi	r19, 0x00	; 0
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	90 e0       	ldi	r25, 0x00	; 0
    3c34:	02 2e       	mov	r0, r18
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <DIO_SetPin_Direction+0x190>
    3c38:	88 0f       	add	r24, r24
    3c3a:	99 1f       	adc	r25, r25
    3c3c:	0a 94       	dec	r0
    3c3e:	e2 f7       	brpl	.-8      	; 0x3c38 <DIO_SetPin_Direction+0x18c>
    3c40:	80 95       	com	r24
    3c42:	84 23       	and	r24, r20
    3c44:	8c 93       	st	X, r24
    3c46:	29 c0       	rjmp	.+82     	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			CLR_BIT(DDRC_REG, u8_pin);
    3c48:	a4 e3       	ldi	r26, 0x34	; 52
    3c4a:	b0 e0       	ldi	r27, 0x00	; 0
    3c4c:	e4 e3       	ldi	r30, 0x34	; 52
    3c4e:	f0 e0       	ldi	r31, 0x00	; 0
    3c50:	80 81       	ld	r24, Z
    3c52:	48 2f       	mov	r20, r24
    3c54:	8a 81       	ldd	r24, Y+2	; 0x02
    3c56:	28 2f       	mov	r18, r24
    3c58:	30 e0       	ldi	r19, 0x00	; 0
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	02 2e       	mov	r0, r18
    3c60:	02 c0       	rjmp	.+4      	; 0x3c66 <DIO_SetPin_Direction+0x1ba>
    3c62:	88 0f       	add	r24, r24
    3c64:	99 1f       	adc	r25, r25
    3c66:	0a 94       	dec	r0
    3c68:	e2 f7       	brpl	.-8      	; 0x3c62 <DIO_SetPin_Direction+0x1b6>
    3c6a:	80 95       	com	r24
    3c6c:	84 23       	and	r24, r20
    3c6e:	8c 93       	st	X, r24
    3c70:	14 c0       	rjmp	.+40     	; 0x3c9a <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			CLR_BIT(DDRD_REG, u8_pin);
    3c72:	a1 e3       	ldi	r26, 0x31	; 49
    3c74:	b0 e0       	ldi	r27, 0x00	; 0
    3c76:	e1 e3       	ldi	r30, 0x31	; 49
    3c78:	f0 e0       	ldi	r31, 0x00	; 0
    3c7a:	80 81       	ld	r24, Z
    3c7c:	48 2f       	mov	r20, r24
    3c7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c80:	28 2f       	mov	r18, r24
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	02 2e       	mov	r0, r18
    3c8a:	02 c0       	rjmp	.+4      	; 0x3c90 <DIO_SetPin_Direction+0x1e4>
    3c8c:	88 0f       	add	r24, r24
    3c8e:	99 1f       	adc	r25, r25
    3c90:	0a 94       	dec	r0
    3c92:	e2 f7       	brpl	.-8      	; 0x3c8c <DIO_SetPin_Direction+0x1e0>
    3c94:	80 95       	com	r24
    3c96:	84 23       	and	r24, r20
    3c98:	8c 93       	st	X, r24
			break;
		}
	}
}
    3c9a:	27 96       	adiw	r28, 0x07	; 7
    3c9c:	0f b6       	in	r0, 0x3f	; 63
    3c9e:	f8 94       	cli
    3ca0:	de bf       	out	0x3e, r29	; 62
    3ca2:	0f be       	out	0x3f, r0	; 63
    3ca4:	cd bf       	out	0x3d, r28	; 61
    3ca6:	cf 91       	pop	r28
    3ca8:	df 91       	pop	r29
    3caa:	08 95       	ret

00003cac <DIO_SetPort_Value>:





void DIO_SetPort_Value(u8 u8_port,u8 value){
    3cac:	df 93       	push	r29
    3cae:	cf 93       	push	r28
    3cb0:	00 d0       	rcall	.+0      	; 0x3cb2 <DIO_SetPort_Value+0x6>
    3cb2:	00 d0       	rcall	.+0      	; 0x3cb4 <DIO_SetPort_Value+0x8>
    3cb4:	cd b7       	in	r28, 0x3d	; 61
    3cb6:	de b7       	in	r29, 0x3e	; 62
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    3cbc:	89 81       	ldd	r24, Y+1	; 0x01
    3cbe:	28 2f       	mov	r18, r24
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	3c 83       	std	Y+4, r19	; 0x04
    3cc4:	2b 83       	std	Y+3, r18	; 0x03
    3cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc8:	9c 81       	ldd	r25, Y+4	; 0x04
    3cca:	81 30       	cpi	r24, 0x01	; 1
    3ccc:	91 05       	cpc	r25, r1
    3cce:	d1 f0       	breq	.+52     	; 0x3d04 <DIO_SetPort_Value+0x58>
    3cd0:	2b 81       	ldd	r18, Y+3	; 0x03
    3cd2:	3c 81       	ldd	r19, Y+4	; 0x04
    3cd4:	22 30       	cpi	r18, 0x02	; 2
    3cd6:	31 05       	cpc	r19, r1
    3cd8:	2c f4       	brge	.+10     	; 0x3ce4 <DIO_SetPort_Value+0x38>
    3cda:	8b 81       	ldd	r24, Y+3	; 0x03
    3cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	61 f0       	breq	.+24     	; 0x3cfa <DIO_SetPort_Value+0x4e>
    3ce2:	1e c0       	rjmp	.+60     	; 0x3d20 <DIO_SetPort_Value+0x74>
    3ce4:	2b 81       	ldd	r18, Y+3	; 0x03
    3ce6:	3c 81       	ldd	r19, Y+4	; 0x04
    3ce8:	22 30       	cpi	r18, 0x02	; 2
    3cea:	31 05       	cpc	r19, r1
    3cec:	81 f0       	breq	.+32     	; 0x3d0e <DIO_SetPort_Value+0x62>
    3cee:	8b 81       	ldd	r24, Y+3	; 0x03
    3cf0:	9c 81       	ldd	r25, Y+4	; 0x04
    3cf2:	83 30       	cpi	r24, 0x03	; 3
    3cf4:	91 05       	cpc	r25, r1
    3cf6:	81 f0       	breq	.+32     	; 0x3d18 <DIO_SetPort_Value+0x6c>
    3cf8:	13 c0       	rjmp	.+38     	; 0x3d20 <DIO_SetPort_Value+0x74>
	case GroupA: PORTA_REG = value;break;
    3cfa:	eb e3       	ldi	r30, 0x3B	; 59
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	8a 81       	ldd	r24, Y+2	; 0x02
    3d00:	80 83       	st	Z, r24
    3d02:	0e c0       	rjmp	.+28     	; 0x3d20 <DIO_SetPort_Value+0x74>
	case GroupB: PORTB_REG = value;break;
    3d04:	e8 e3       	ldi	r30, 0x38	; 56
    3d06:	f0 e0       	ldi	r31, 0x00	; 0
    3d08:	8a 81       	ldd	r24, Y+2	; 0x02
    3d0a:	80 83       	st	Z, r24
    3d0c:	09 c0       	rjmp	.+18     	; 0x3d20 <DIO_SetPort_Value+0x74>
	case GroupC: PORTC_REG = value;break;
    3d0e:	e5 e3       	ldi	r30, 0x35	; 53
    3d10:	f0 e0       	ldi	r31, 0x00	; 0
    3d12:	8a 81       	ldd	r24, Y+2	; 0x02
    3d14:	80 83       	st	Z, r24
    3d16:	04 c0       	rjmp	.+8      	; 0x3d20 <DIO_SetPort_Value+0x74>
	case GroupD: PORTD_REG = value;break;
    3d18:	e2 e3       	ldi	r30, 0x32	; 50
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d1e:	80 83       	st	Z, r24

	}

}
    3d20:	0f 90       	pop	r0
    3d22:	0f 90       	pop	r0
    3d24:	0f 90       	pop	r0
    3d26:	0f 90       	pop	r0
    3d28:	cf 91       	pop	r28
    3d2a:	df 91       	pop	r29
    3d2c:	08 95       	ret

00003d2e <DIO_SetPort_Direction>:





void DIO_SetPort_Direction(u8 u8_port,u8 direction){
    3d2e:	df 93       	push	r29
    3d30:	cf 93       	push	r28
    3d32:	00 d0       	rcall	.+0      	; 0x3d34 <DIO_SetPort_Direction+0x6>
    3d34:	00 d0       	rcall	.+0      	; 0x3d36 <DIO_SetPort_Direction+0x8>
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	89 83       	std	Y+1, r24	; 0x01
    3d3c:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	28 2f       	mov	r18, r24
    3d42:	30 e0       	ldi	r19, 0x00	; 0
    3d44:	3c 83       	std	Y+4, r19	; 0x04
    3d46:	2b 83       	std	Y+3, r18	; 0x03
    3d48:	8b 81       	ldd	r24, Y+3	; 0x03
    3d4a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d4c:	81 30       	cpi	r24, 0x01	; 1
    3d4e:	91 05       	cpc	r25, r1
    3d50:	d1 f0       	breq	.+52     	; 0x3d86 <DIO_SetPort_Direction+0x58>
    3d52:	2b 81       	ldd	r18, Y+3	; 0x03
    3d54:	3c 81       	ldd	r19, Y+4	; 0x04
    3d56:	22 30       	cpi	r18, 0x02	; 2
    3d58:	31 05       	cpc	r19, r1
    3d5a:	2c f4       	brge	.+10     	; 0x3d66 <DIO_SetPort_Direction+0x38>
    3d5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3d5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3d60:	00 97       	sbiw	r24, 0x00	; 0
    3d62:	61 f0       	breq	.+24     	; 0x3d7c <DIO_SetPort_Direction+0x4e>
    3d64:	1e c0       	rjmp	.+60     	; 0x3da2 <DIO_SetPort_Direction+0x74>
    3d66:	2b 81       	ldd	r18, Y+3	; 0x03
    3d68:	3c 81       	ldd	r19, Y+4	; 0x04
    3d6a:	22 30       	cpi	r18, 0x02	; 2
    3d6c:	31 05       	cpc	r19, r1
    3d6e:	81 f0       	breq	.+32     	; 0x3d90 <DIO_SetPort_Direction+0x62>
    3d70:	8b 81       	ldd	r24, Y+3	; 0x03
    3d72:	9c 81       	ldd	r25, Y+4	; 0x04
    3d74:	83 30       	cpi	r24, 0x03	; 3
    3d76:	91 05       	cpc	r25, r1
    3d78:	81 f0       	breq	.+32     	; 0x3d9a <DIO_SetPort_Direction+0x6c>
    3d7a:	13 c0       	rjmp	.+38     	; 0x3da2 <DIO_SetPort_Direction+0x74>
	case GroupA: DDRA_REG = direction;break;
    3d7c:	ea e3       	ldi	r30, 0x3A	; 58
    3d7e:	f0 e0       	ldi	r31, 0x00	; 0
    3d80:	8a 81       	ldd	r24, Y+2	; 0x02
    3d82:	80 83       	st	Z, r24
    3d84:	0e c0       	rjmp	.+28     	; 0x3da2 <DIO_SetPort_Direction+0x74>
	case GroupB: DDRB_REG = direction;break;
    3d86:	e7 e3       	ldi	r30, 0x37	; 55
    3d88:	f0 e0       	ldi	r31, 0x00	; 0
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8c:	80 83       	st	Z, r24
    3d8e:	09 c0       	rjmp	.+18     	; 0x3da2 <DIO_SetPort_Direction+0x74>
	case GroupC: DDRC_REG = direction;break;
    3d90:	e4 e3       	ldi	r30, 0x34	; 52
    3d92:	f0 e0       	ldi	r31, 0x00	; 0
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	80 83       	st	Z, r24
    3d98:	04 c0       	rjmp	.+8      	; 0x3da2 <DIO_SetPort_Direction+0x74>
	case GroupD: DDRD_REG = direction;break;
    3d9a:	e1 e3       	ldi	r30, 0x31	; 49
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3da0:	80 83       	st	Z, r24

	}

}
    3da2:	0f 90       	pop	r0
    3da4:	0f 90       	pop	r0
    3da6:	0f 90       	pop	r0
    3da8:	0f 90       	pop	r0
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	08 95       	ret

00003db0 <DIO_GetPinValue>:





u8 DIO_GetPinValue(u8 u8_port, u8 u8_pin){
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	00 d0       	rcall	.+0      	; 0x3db6 <DIO_GetPinValue+0x6>
    3db6:	00 d0       	rcall	.+0      	; 0x3db8 <DIO_GetPinValue+0x8>
    3db8:	0f 92       	push	r0
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
    3dbe:	8a 83       	std	Y+2, r24	; 0x02
    3dc0:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
    3dc2:	19 82       	std	Y+1, r1	; 0x01
	switch(u8_port){
    3dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3dc6:	28 2f       	mov	r18, r24
    3dc8:	30 e0       	ldi	r19, 0x00	; 0
    3dca:	3d 83       	std	Y+5, r19	; 0x05
    3dcc:	2c 83       	std	Y+4, r18	; 0x04
    3dce:	4c 81       	ldd	r20, Y+4	; 0x04
    3dd0:	5d 81       	ldd	r21, Y+5	; 0x05
    3dd2:	41 30       	cpi	r20, 0x01	; 1
    3dd4:	51 05       	cpc	r21, r1
    3dd6:	41 f1       	breq	.+80     	; 0x3e28 <DIO_GetPinValue+0x78>
    3dd8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dda:	9d 81       	ldd	r25, Y+5	; 0x05
    3ddc:	82 30       	cpi	r24, 0x02	; 2
    3dde:	91 05       	cpc	r25, r1
    3de0:	34 f4       	brge	.+12     	; 0x3dee <DIO_GetPinValue+0x3e>
    3de2:	2c 81       	ldd	r18, Y+4	; 0x04
    3de4:	3d 81       	ldd	r19, Y+5	; 0x05
    3de6:	21 15       	cp	r18, r1
    3de8:	31 05       	cpc	r19, r1
    3dea:	61 f0       	breq	.+24     	; 0x3e04 <DIO_GetPinValue+0x54>
    3dec:	52 c0       	rjmp	.+164    	; 0x3e92 <DIO_GetPinValue+0xe2>
    3dee:	4c 81       	ldd	r20, Y+4	; 0x04
    3df0:	5d 81       	ldd	r21, Y+5	; 0x05
    3df2:	42 30       	cpi	r20, 0x02	; 2
    3df4:	51 05       	cpc	r21, r1
    3df6:	51 f1       	breq	.+84     	; 0x3e4c <DIO_GetPinValue+0x9c>
    3df8:	8c 81       	ldd	r24, Y+4	; 0x04
    3dfa:	9d 81       	ldd	r25, Y+5	; 0x05
    3dfc:	83 30       	cpi	r24, 0x03	; 3
    3dfe:	91 05       	cpc	r25, r1
    3e00:	b9 f1       	breq	.+110    	; 0x3e70 <DIO_GetPinValue+0xc0>
    3e02:	47 c0       	rjmp	.+142    	; 0x3e92 <DIO_GetPinValue+0xe2>
	case GroupA:value = GET_BIT(PINA_REG,u8_pin);break;
    3e04:	e9 e3       	ldi	r30, 0x39	; 57
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	80 81       	ld	r24, Z
    3e0a:	28 2f       	mov	r18, r24
    3e0c:	30 e0       	ldi	r19, 0x00	; 0
    3e0e:	8b 81       	ldd	r24, Y+3	; 0x03
    3e10:	88 2f       	mov	r24, r24
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a9 01       	movw	r20, r18
    3e16:	02 c0       	rjmp	.+4      	; 0x3e1c <DIO_GetPinValue+0x6c>
    3e18:	55 95       	asr	r21
    3e1a:	47 95       	ror	r20
    3e1c:	8a 95       	dec	r24
    3e1e:	e2 f7       	brpl	.-8      	; 0x3e18 <DIO_GetPinValue+0x68>
    3e20:	ca 01       	movw	r24, r20
    3e22:	81 70       	andi	r24, 0x01	; 1
    3e24:	89 83       	std	Y+1, r24	; 0x01
    3e26:	35 c0       	rjmp	.+106    	; 0x3e92 <DIO_GetPinValue+0xe2>
	case GroupB:value = GET_BIT(PINB_REG,u8_pin);break;
    3e28:	e6 e3       	ldi	r30, 0x36	; 54
    3e2a:	f0 e0       	ldi	r31, 0x00	; 0
    3e2c:	80 81       	ld	r24, Z
    3e2e:	28 2f       	mov	r18, r24
    3e30:	30 e0       	ldi	r19, 0x00	; 0
    3e32:	8b 81       	ldd	r24, Y+3	; 0x03
    3e34:	88 2f       	mov	r24, r24
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	a9 01       	movw	r20, r18
    3e3a:	02 c0       	rjmp	.+4      	; 0x3e40 <DIO_GetPinValue+0x90>
    3e3c:	55 95       	asr	r21
    3e3e:	47 95       	ror	r20
    3e40:	8a 95       	dec	r24
    3e42:	e2 f7       	brpl	.-8      	; 0x3e3c <DIO_GetPinValue+0x8c>
    3e44:	ca 01       	movw	r24, r20
    3e46:	81 70       	andi	r24, 0x01	; 1
    3e48:	89 83       	std	Y+1, r24	; 0x01
    3e4a:	23 c0       	rjmp	.+70     	; 0x3e92 <DIO_GetPinValue+0xe2>
	case GroupC:value = GET_BIT(PINC_REG,u8_pin);break;
    3e4c:	e3 e3       	ldi	r30, 0x33	; 51
    3e4e:	f0 e0       	ldi	r31, 0x00	; 0
    3e50:	80 81       	ld	r24, Z
    3e52:	28 2f       	mov	r18, r24
    3e54:	30 e0       	ldi	r19, 0x00	; 0
    3e56:	8b 81       	ldd	r24, Y+3	; 0x03
    3e58:	88 2f       	mov	r24, r24
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	a9 01       	movw	r20, r18
    3e5e:	02 c0       	rjmp	.+4      	; 0x3e64 <DIO_GetPinValue+0xb4>
    3e60:	55 95       	asr	r21
    3e62:	47 95       	ror	r20
    3e64:	8a 95       	dec	r24
    3e66:	e2 f7       	brpl	.-8      	; 0x3e60 <DIO_GetPinValue+0xb0>
    3e68:	ca 01       	movw	r24, r20
    3e6a:	81 70       	andi	r24, 0x01	; 1
    3e6c:	89 83       	std	Y+1, r24	; 0x01
    3e6e:	11 c0       	rjmp	.+34     	; 0x3e92 <DIO_GetPinValue+0xe2>
	case GroupD:value = GET_BIT(PIND_REG,u8_pin);break;
    3e70:	e0 e3       	ldi	r30, 0x30	; 48
    3e72:	f0 e0       	ldi	r31, 0x00	; 0
    3e74:	80 81       	ld	r24, Z
    3e76:	28 2f       	mov	r18, r24
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    3e7c:	88 2f       	mov	r24, r24
    3e7e:	90 e0       	ldi	r25, 0x00	; 0
    3e80:	a9 01       	movw	r20, r18
    3e82:	02 c0       	rjmp	.+4      	; 0x3e88 <DIO_GetPinValue+0xd8>
    3e84:	55 95       	asr	r21
    3e86:	47 95       	ror	r20
    3e88:	8a 95       	dec	r24
    3e8a:	e2 f7       	brpl	.-8      	; 0x3e84 <DIO_GetPinValue+0xd4>
    3e8c:	ca 01       	movw	r24, r20
    3e8e:	81 70       	andi	r24, 0x01	; 1
    3e90:	89 83       	std	Y+1, r24	; 0x01

	}
	return value;
    3e92:	89 81       	ldd	r24, Y+1	; 0x01
}
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	0f 90       	pop	r0
    3e9a:	0f 90       	pop	r0
    3e9c:	0f 90       	pop	r0
    3e9e:	cf 91       	pop	r28
    3ea0:	df 91       	pop	r29
    3ea2:	08 95       	ret

00003ea4 <ADC_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "../ADC/ADC_INTERFACE.h"
#include "../ADC/ADC_REG.h"

void ADC_init(){
    3ea4:	df 93       	push	r29
    3ea6:	cf 93       	push	r28
    3ea8:	cd b7       	in	r28, 0x3d	; 61
    3eaa:	de b7       	in	r29, 0x3e	; 62
	//ADC Voltage Reference Selection to AVCC
	SET_BIT(ADMUX_REG,ADMUX_REFS0);
    3eac:	a7 e2       	ldi	r26, 0x27	; 39
    3eae:	b0 e0       	ldi	r27, 0x00	; 0
    3eb0:	e7 e2       	ldi	r30, 0x27	; 39
    3eb2:	f0 e0       	ldi	r31, 0x00	; 0
    3eb4:	80 81       	ld	r24, Z
    3eb6:	80 64       	ori	r24, 0x40	; 64
    3eb8:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    3eba:	a7 e2       	ldi	r26, 0x27	; 39
    3ebc:	b0 e0       	ldi	r27, 0x00	; 0
    3ebe:	e7 e2       	ldi	r30, 0x27	; 39
    3ec0:	f0 e0       	ldi	r31, 0x00	; 0
    3ec2:	80 81       	ld	r24, Z
    3ec4:	8f 77       	andi	r24, 0x7F	; 127
    3ec6:	8c 93       	st	X, r24

    //ADC left Adjust
	SET_BIT(ADMUX_REG,ADMUX_ADLAR);
    3ec8:	a7 e2       	ldi	r26, 0x27	; 39
    3eca:	b0 e0       	ldi	r27, 0x00	; 0
    3ecc:	e7 e2       	ldi	r30, 0x27	; 39
    3ece:	f0 e0       	ldi	r31, 0x00	; 0
    3ed0:	80 81       	ld	r24, Z
    3ed2:	80 62       	ori	r24, 0x20	; 32
    3ed4:	8c 93       	st	X, r24

	//ADC Prescaler Clock Selection to 128 (the slowest speed)
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
    3ed6:	a6 e2       	ldi	r26, 0x26	; 38
    3ed8:	b0 e0       	ldi	r27, 0x00	; 0
    3eda:	e6 e2       	ldi	r30, 0x26	; 38
    3edc:	f0 e0       	ldi	r31, 0x00	; 0
    3ede:	80 81       	ld	r24, Z
    3ee0:	81 60       	ori	r24, 0x01	; 1
    3ee2:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
    3ee4:	a6 e2       	ldi	r26, 0x26	; 38
    3ee6:	b0 e0       	ldi	r27, 0x00	; 0
    3ee8:	e6 e2       	ldi	r30, 0x26	; 38
    3eea:	f0 e0       	ldi	r31, 0x00	; 0
    3eec:	80 81       	ld	r24, Z
    3eee:	82 60       	ori	r24, 0x02	; 2
    3ef0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    3ef2:	a6 e2       	ldi	r26, 0x26	; 38
    3ef4:	b0 e0       	ldi	r27, 0x00	; 0
    3ef6:	e6 e2       	ldi	r30, 0x26	; 38
    3ef8:	f0 e0       	ldi	r31, 0x00	; 0
    3efa:	80 81       	ld	r24, Z
    3efc:	84 60       	ori	r24, 0x04	; 4
    3efe:	8c 93       	st	X, r24

    //ADC Enable
	SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    3f00:	a6 e2       	ldi	r26, 0x26	; 38
    3f02:	b0 e0       	ldi	r27, 0x00	; 0
    3f04:	e6 e2       	ldi	r30, 0x26	; 38
    3f06:	f0 e0       	ldi	r31, 0x00	; 0
    3f08:	80 81       	ld	r24, Z
    3f0a:	80 68       	ori	r24, 0x80	; 128
    3f0c:	8c 93       	st	X, r24
}
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret

00003f14 <ADC_Read_Sych>:

u16 ADC_Read_Sych(u8 channel){
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	00 d0       	rcall	.+0      	; 0x3f1a <ADC_Read_Sych+0x6>
    3f1a:	00 d0       	rcall	.+0      	; 0x3f1c <ADC_Read_Sych+0x8>
    3f1c:	00 d0       	rcall	.+0      	; 0x3f1e <ADC_Read_Sych+0xa>
    3f1e:	cd b7       	in	r28, 0x3d	; 61
    3f20:	de b7       	in	r29, 0x3e	; 62
    3f22:	8d 83       	std	Y+5, r24	; 0x05
	u32 time = 100000;
    3f24:	80 ea       	ldi	r24, 0xA0	; 160
    3f26:	96 e8       	ldi	r25, 0x86	; 134
    3f28:	9c 83       	std	Y+4, r25	; 0x04
    3f2a:	8b 83       	std	Y+3, r24	; 0x03
	u32 cnt = 0;
    3f2c:	1a 82       	std	Y+2, r1	; 0x02
    3f2e:	19 82       	std	Y+1, r1	; 0x01
	//Channel Select
	ADMUX_REG &= 0b11100000;
    3f30:	a7 e2       	ldi	r26, 0x27	; 39
    3f32:	b0 e0       	ldi	r27, 0x00	; 0
    3f34:	e7 e2       	ldi	r30, 0x27	; 39
    3f36:	f0 e0       	ldi	r31, 0x00	; 0
    3f38:	80 81       	ld	r24, Z
    3f3a:	80 7e       	andi	r24, 0xE0	; 224
    3f3c:	8c 93       	st	X, r24
	ADMUX_REG |= channel;
    3f3e:	a7 e2       	ldi	r26, 0x27	; 39
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	e7 e2       	ldi	r30, 0x27	; 39
    3f44:	f0 e0       	ldi	r31, 0x00	; 0
    3f46:	90 81       	ld	r25, Z
    3f48:	8d 81       	ldd	r24, Y+5	; 0x05
    3f4a:	89 2b       	or	r24, r25
    3f4c:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    3f4e:	a6 e2       	ldi	r26, 0x26	; 38
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	e6 e2       	ldi	r30, 0x26	; 38
    3f54:	f0 e0       	ldi	r31, 0x00	; 0
    3f56:	80 81       	ld	r24, Z
    3f58:	80 64       	ori	r24, 0x40	; 64
    3f5a:	8c 93       	st	X, r24
    3f5c:	05 c0       	rjmp	.+10     	; 0x3f68 <ADC_Read_Sych+0x54>

	while(GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 || cnt != time){
		cnt++;
    3f5e:	89 81       	ldd	r24, Y+1	; 0x01
    3f60:	9a 81       	ldd	r25, Y+2	; 0x02
    3f62:	01 96       	adiw	r24, 0x01	; 1
    3f64:	9a 83       	std	Y+2, r25	; 0x02
    3f66:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG |= channel;

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);

	while(GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 || cnt != time){
    3f68:	e6 e2       	ldi	r30, 0x26	; 38
    3f6a:	f0 e0       	ldi	r31, 0x00	; 0
    3f6c:	80 81       	ld	r24, Z
    3f6e:	29 81       	ldd	r18, Y+1	; 0x01
    3f70:	3a 81       	ldd	r19, Y+2	; 0x02
    3f72:	8b 81       	ldd	r24, Y+3	; 0x03
    3f74:	9c 81       	ldd	r25, Y+4	; 0x04
    3f76:	28 17       	cp	r18, r24
    3f78:	39 07       	cpc	r19, r25
    3f7a:	89 f7       	brne	.-30     	; 0x3f5e <ADC_Read_Sych+0x4a>
		cnt++;
	}

	//Clear ADC Flag for the next conversion because No INTERRUPT is used
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    3f7c:	a6 e2       	ldi	r26, 0x26	; 38
    3f7e:	b0 e0       	ldi	r27, 0x00	; 0
    3f80:	e6 e2       	ldi	r30, 0x26	; 38
    3f82:	f0 e0       	ldi	r31, 0x00	; 0
    3f84:	80 81       	ld	r24, Z
    3f86:	80 61       	ori	r24, 0x10	; 16
    3f88:	8c 93       	st	X, r24

	//Return the reading
    return ADCL_REG;
    3f8a:	e4 e2       	ldi	r30, 0x24	; 36
    3f8c:	f0 e0       	ldi	r31, 0x00	; 0
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01


}
    3f92:	26 96       	adiw	r28, 0x06	; 6
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	f8 94       	cli
    3f98:	de bf       	out	0x3e, r29	; 62
    3f9a:	0f be       	out	0x3f, r0	; 63
    3f9c:	cd bf       	out	0x3d, r28	; 61
    3f9e:	cf 91       	pop	r28
    3fa0:	df 91       	pop	r29
    3fa2:	08 95       	ret

00003fa4 <Shift>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "SHIFT_REGISTER_INTERFACE.h"
#include "../../MCAL/DIO/DIO_INTERFACE.h"

void Shift(u8 port,u8 latch_pin,u8 data_pin,u8 clk_pin,u16 binary){
    3fa4:	0f 93       	push	r16
    3fa6:	1f 93       	push	r17
    3fa8:	df 93       	push	r29
    3faa:	cf 93       	push	r28
    3fac:	cd b7       	in	r28, 0x3d	; 61
    3fae:	de b7       	in	r29, 0x3e	; 62
    3fb0:	27 97       	sbiw	r28, 0x07	; 7
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	f8 94       	cli
    3fb6:	de bf       	out	0x3e, r29	; 62
    3fb8:	0f be       	out	0x3f, r0	; 63
    3fba:	cd bf       	out	0x3d, r28	; 61
    3fbc:	8a 83       	std	Y+2, r24	; 0x02
    3fbe:	6b 83       	std	Y+3, r22	; 0x03
    3fc0:	4c 83       	std	Y+4, r20	; 0x04
    3fc2:	2d 83       	std	Y+5, r18	; 0x05
    3fc4:	1f 83       	std	Y+7, r17	; 0x07
    3fc6:	0e 83       	std	Y+6, r16	; 0x06

	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
    3fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fca:	6b 81       	ldd	r22, Y+3	; 0x03
    3fcc:	40 e0       	ldi	r20, 0x00	; 0
    3fce:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
    3fd2:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd4:	6d 81       	ldd	r22, Y+5	; 0x05
    3fd6:	40 e0       	ldi	r20, 0x00	; 0
    3fd8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	DIO_SetPin_Value(port,clk_pin,1);
    3fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    3fde:	6d 81       	ldd	r22, Y+5	; 0x05
    3fe0:	41 e0       	ldi	r20, 0x01	; 1
    3fe2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	for(u8 i =0;i<16;i++){
    3fe6:	19 82       	std	Y+1, r1	; 0x01
    3fe8:	27 c0       	rjmp	.+78     	; 0x4038 <Shift+0x94>
		if(GET_BIT(binary,i)==1)
    3fea:	89 81       	ldd	r24, Y+1	; 0x01
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	8e 81       	ldd	r24, Y+6	; 0x06
    3ff2:	9f 81       	ldd	r25, Y+7	; 0x07
    3ff4:	02 2e       	mov	r0, r18
    3ff6:	02 c0       	rjmp	.+4      	; 0x3ffc <Shift+0x58>
    3ff8:	96 95       	lsr	r25
    3ffa:	87 95       	ror	r24
    3ffc:	0a 94       	dec	r0
    3ffe:	e2 f7       	brpl	.-8      	; 0x3ff8 <Shift+0x54>
    4000:	81 70       	andi	r24, 0x01	; 1
    4002:	90 70       	andi	r25, 0x00	; 0
    4004:	88 23       	and	r24, r24
    4006:	31 f0       	breq	.+12     	; 0x4014 <Shift+0x70>
		  DIO_SetPin_Value(port,data_pin,1);
    4008:	8a 81       	ldd	r24, Y+2	; 0x02
    400a:	6c 81       	ldd	r22, Y+4	; 0x04
    400c:	41 e0       	ldi	r20, 0x01	; 1
    400e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
    4012:	05 c0       	rjmp	.+10     	; 0x401e <Shift+0x7a>
		else
			DIO_SetPin_Value(port,data_pin,0);
    4014:	8a 81       	ldd	r24, Y+2	; 0x02
    4016:	6c 81       	ldd	r22, Y+4	; 0x04
    4018:	40 e0       	ldi	r20, 0x00	; 0
    401a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
		//clock trigger
		DIO_SetPin_Value(port,clk_pin,0);
    401e:	8a 81       	ldd	r24, Y+2	; 0x02
    4020:	6d 81       	ldd	r22, Y+5	; 0x05
    4022:	40 e0       	ldi	r20, 0x00	; 0
    4024:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
		DIO_SetPin_Value(port,clk_pin,1);
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	6d 81       	ldd	r22, Y+5	; 0x05
    402c:	41 e0       	ldi	r20, 0x01	; 1
    402e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
	DIO_SetPin_Value(port,clk_pin,1);
	for(u8 i =0;i<16;i++){
    4032:	89 81       	ldd	r24, Y+1	; 0x01
    4034:	8f 5f       	subi	r24, 0xFF	; 255
    4036:	89 83       	std	Y+1, r24	; 0x01
    4038:	89 81       	ldd	r24, Y+1	; 0x01
    403a:	80 31       	cpi	r24, 0x10	; 16
    403c:	b0 f2       	brcs	.-84     	; 0x3fea <Shift+0x46>
		DIO_SetPin_Value(port,clk_pin,1);

	}

   //latch high
	DIO_SetPin_Value(port,latch_pin,1);
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	6b 81       	ldd	r22, Y+3	; 0x03
    4042:	41 e0       	ldi	r20, 0x01	; 1
    4044:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>

}
    4048:	27 96       	adiw	r28, 0x07	; 7
    404a:	0f b6       	in	r0, 0x3f	; 63
    404c:	f8 94       	cli
    404e:	de bf       	out	0x3e, r29	; 62
    4050:	0f be       	out	0x3f, r0	; 63
    4052:	cd bf       	out	0x3d, r28	; 61
    4054:	cf 91       	pop	r28
    4056:	df 91       	pop	r29
    4058:	1f 91       	pop	r17
    405a:	0f 91       	pop	r16
    405c:	08 95       	ret

0000405e <Motor_PWM_8BIT>:
 *      Author: Mustapha
 */
#include "../../MCAL/Timer/TIMER_INTERFACE.h"
#include"../../UTILS/STD_TYPES.h"

void Motor_PWM_8BIT(u8 value){
    405e:	df 93       	push	r29
    4060:	cf 93       	push	r28
    4062:	0f 92       	push	r0
    4064:	cd b7       	in	r28, 0x3d	; 61
    4066:	de b7       	in	r29, 0x3e	; 62
    4068:	89 83       	std	Y+1, r24	; 0x01
    SET_OCR0(value);
    406a:	89 81       	ldd	r24, Y+1	; 0x01
    406c:	0e 94 39 1b 	call	0x3672	; 0x3672 <SET_OCR0>

}
    4070:	0f 90       	pop	r0
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <Motor_MAXSPEED_8BIT>:
void Motor_MAXSPEED_8BIT(){
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	cd b7       	in	r28, 0x3d	; 61
    407e:	de b7       	in	r29, 0x3e	; 62
    SET_OCR0(255);
    4080:	8f ef       	ldi	r24, 0xFF	; 255
    4082:	0e 94 39 1b 	call	0x3672	; 0x3672 <SET_OCR0>
}
    4086:	cf 91       	pop	r28
    4088:	df 91       	pop	r29
    408a:	08 95       	ret

0000408c <Motor_PWM_16BIT>:
void Motor_PWM_16BIT(u16 value){
    408c:	df 93       	push	r29
    408e:	cf 93       	push	r28
    4090:	00 d0       	rcall	.+0      	; 0x4092 <Motor_PWM_16BIT+0x6>
    4092:	cd b7       	in	r28, 0x3d	; 61
    4094:	de b7       	in	r29, 0x3e	; 62
    4096:	9a 83       	std	Y+2, r25	; 0x02
    4098:	89 83       	std	Y+1, r24	; 0x01
	SET_OCR1A(value);
    409a:	89 81       	ldd	r24, Y+1	; 0x01
    409c:	9a 81       	ldd	r25, Y+2	; 0x02
    409e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SET_OCR1A>
}
    40a2:	0f 90       	pop	r0
    40a4:	0f 90       	pop	r0
    40a6:	cf 91       	pop	r28
    40a8:	df 91       	pop	r29
    40aa:	08 95       	ret

000040ac <Motor_MAXSPEED_16BIT>:
void Motor_MAXSPEED_16BIT(){
    40ac:	df 93       	push	r29
    40ae:	cf 93       	push	r28
    40b0:	cd b7       	in	r28, 0x3d	; 61
    40b2:	de b7       	in	r29, 0x3e	; 62
	SET_OCR1A(65535);
    40b4:	8f ef       	ldi	r24, 0xFF	; 255
    40b6:	9f ef       	ldi	r25, 0xFF	; 255
    40b8:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SET_OCR1A>
}
    40bc:	cf 91       	pop	r28
    40be:	df 91       	pop	r29
    40c0:	08 95       	ret

000040c2 <LCD8Bit_Send_Command>:
#include "../CLCD1602/CLCD_INTERFACE.h"

/**************/
/* 8-BIT MODE */
/**************/
void LCD8Bit_Send_Command(u8 command){
    40c2:	df 93       	push	r29
    40c4:	cf 93       	push	r28
    40c6:	cd b7       	in	r28, 0x3d	; 61
    40c8:	de b7       	in	r29, 0x3e	; 62
    40ca:	6d 97       	sbiw	r28, 0x1d	; 29
    40cc:	0f b6       	in	r0, 0x3f	; 63
    40ce:	f8 94       	cli
    40d0:	de bf       	out	0x3e, r29	; 62
    40d2:	0f be       	out	0x3f, r0	; 63
    40d4:	cd bf       	out	0x3d, r28	; 61
    40d6:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send COMMAND
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,LOW);
    40d8:	80 e0       	ldi	r24, 0x00	; 0
    40da:	60 e0       	ldi	r22, 0x00	; 0
    40dc:	40 e0       	ldi	r20, 0x00	; 0
    40de:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,command);
    40e2:	82 e0       	ldi	r24, 0x02	; 2
    40e4:	6d 8d       	ldd	r22, Y+29	; 0x1d
    40e6:	0e 94 56 1e 	call	0x3cac	; 0x3cac <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    40ea:	80 e0       	ldi	r24, 0x00	; 0
    40ec:	61 e0       	ldi	r22, 0x01	; 1
    40ee:	41 e0       	ldi	r20, 0x01	; 1
    40f0:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	90 e0       	ldi	r25, 0x00	; 0
    40f8:	a0 e0       	ldi	r26, 0x00	; 0
    40fa:	b0 e4       	ldi	r27, 0x40	; 64
    40fc:	89 8f       	std	Y+25, r24	; 0x19
    40fe:	9a 8f       	std	Y+26, r25	; 0x1a
    4100:	ab 8f       	std	Y+27, r26	; 0x1b
    4102:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4104:	69 8d       	ldd	r22, Y+25	; 0x19
    4106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    410a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    410c:	20 e0       	ldi	r18, 0x00	; 0
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	4a ef       	ldi	r20, 0xFA	; 250
    4112:	54 e4       	ldi	r21, 0x44	; 68
    4114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4118:	dc 01       	movw	r26, r24
    411a:	cb 01       	movw	r24, r22
    411c:	8d 8b       	std	Y+21, r24	; 0x15
    411e:	9e 8b       	std	Y+22, r25	; 0x16
    4120:	af 8b       	std	Y+23, r26	; 0x17
    4122:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4124:	6d 89       	ldd	r22, Y+21	; 0x15
    4126:	7e 89       	ldd	r23, Y+22	; 0x16
    4128:	8f 89       	ldd	r24, Y+23	; 0x17
    412a:	98 8d       	ldd	r25, Y+24	; 0x18
    412c:	20 e0       	ldi	r18, 0x00	; 0
    412e:	30 e0       	ldi	r19, 0x00	; 0
    4130:	40 e8       	ldi	r20, 0x80	; 128
    4132:	5f e3       	ldi	r21, 0x3F	; 63
    4134:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4138:	88 23       	and	r24, r24
    413a:	2c f4       	brge	.+10     	; 0x4146 <LCD8Bit_Send_Command+0x84>
		__ticks = 1;
    413c:	81 e0       	ldi	r24, 0x01	; 1
    413e:	90 e0       	ldi	r25, 0x00	; 0
    4140:	9c 8b       	std	Y+20, r25	; 0x14
    4142:	8b 8b       	std	Y+19, r24	; 0x13
    4144:	3f c0       	rjmp	.+126    	; 0x41c4 <LCD8Bit_Send_Command+0x102>
	else if (__tmp > 65535)
    4146:	6d 89       	ldd	r22, Y+21	; 0x15
    4148:	7e 89       	ldd	r23, Y+22	; 0x16
    414a:	8f 89       	ldd	r24, Y+23	; 0x17
    414c:	98 8d       	ldd	r25, Y+24	; 0x18
    414e:	20 e0       	ldi	r18, 0x00	; 0
    4150:	3f ef       	ldi	r19, 0xFF	; 255
    4152:	4f e7       	ldi	r20, 0x7F	; 127
    4154:	57 e4       	ldi	r21, 0x47	; 71
    4156:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    415a:	18 16       	cp	r1, r24
    415c:	4c f5       	brge	.+82     	; 0x41b0 <LCD8Bit_Send_Command+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    415e:	69 8d       	ldd	r22, Y+25	; 0x19
    4160:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4162:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4164:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	40 e2       	ldi	r20, 0x20	; 32
    416c:	51 e4       	ldi	r21, 0x41	; 65
    416e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4172:	dc 01       	movw	r26, r24
    4174:	cb 01       	movw	r24, r22
    4176:	bc 01       	movw	r22, r24
    4178:	cd 01       	movw	r24, r26
    417a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	9c 8b       	std	Y+20, r25	; 0x14
    4184:	8b 8b       	std	Y+19, r24	; 0x13
    4186:	0f c0       	rjmp	.+30     	; 0x41a6 <LCD8Bit_Send_Command+0xe4>
    4188:	88 ec       	ldi	r24, 0xC8	; 200
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	9a 8b       	std	Y+18, r25	; 0x12
    418e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4190:	89 89       	ldd	r24, Y+17	; 0x11
    4192:	9a 89       	ldd	r25, Y+18	; 0x12
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	f1 f7       	brne	.-4      	; 0x4194 <LCD8Bit_Send_Command+0xd2>
    4198:	9a 8b       	std	Y+18, r25	; 0x12
    419a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    419c:	8b 89       	ldd	r24, Y+19	; 0x13
    419e:	9c 89       	ldd	r25, Y+20	; 0x14
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	9c 8b       	std	Y+20, r25	; 0x14
    41a4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41a6:	8b 89       	ldd	r24, Y+19	; 0x13
    41a8:	9c 89       	ldd	r25, Y+20	; 0x14
    41aa:	00 97       	sbiw	r24, 0x00	; 0
    41ac:	69 f7       	brne	.-38     	; 0x4188 <LCD8Bit_Send_Command+0xc6>
    41ae:	14 c0       	rjmp	.+40     	; 0x41d8 <LCD8Bit_Send_Command+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41b0:	6d 89       	ldd	r22, Y+21	; 0x15
    41b2:	7e 89       	ldd	r23, Y+22	; 0x16
    41b4:	8f 89       	ldd	r24, Y+23	; 0x17
    41b6:	98 8d       	ldd	r25, Y+24	; 0x18
    41b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41bc:	dc 01       	movw	r26, r24
    41be:	cb 01       	movw	r24, r22
    41c0:	9c 8b       	std	Y+20, r25	; 0x14
    41c2:	8b 8b       	std	Y+19, r24	; 0x13
    41c4:	8b 89       	ldd	r24, Y+19	; 0x13
    41c6:	9c 89       	ldd	r25, Y+20	; 0x14
    41c8:	98 8b       	std	Y+16, r25	; 0x10
    41ca:	8f 87       	std	Y+15, r24	; 0x0f
    41cc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41ce:	98 89       	ldd	r25, Y+16	; 0x10
    41d0:	01 97       	sbiw	r24, 0x01	; 1
    41d2:	f1 f7       	brne	.-4      	; 0x41d0 <LCD8Bit_Send_Command+0x10e>
    41d4:	98 8b       	std	Y+16, r25	; 0x10
    41d6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	61 e0       	ldi	r22, 0x01	; 1
    41dc:	40 e0       	ldi	r20, 0x00	; 0
    41de:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
    41e2:	80 e0       	ldi	r24, 0x00	; 0
    41e4:	90 e0       	ldi	r25, 0x00	; 0
    41e6:	a0 e0       	ldi	r26, 0x00	; 0
    41e8:	b0 e4       	ldi	r27, 0x40	; 64
    41ea:	8b 87       	std	Y+11, r24	; 0x0b
    41ec:	9c 87       	std	Y+12, r25	; 0x0c
    41ee:	ad 87       	std	Y+13, r26	; 0x0d
    41f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    41f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    41f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    41f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    41fa:	20 e0       	ldi	r18, 0x00	; 0
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	4a ef       	ldi	r20, 0xFA	; 250
    4200:	54 e4       	ldi	r21, 0x44	; 68
    4202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4206:	dc 01       	movw	r26, r24
    4208:	cb 01       	movw	r24, r22
    420a:	8f 83       	std	Y+7, r24	; 0x07
    420c:	98 87       	std	Y+8, r25	; 0x08
    420e:	a9 87       	std	Y+9, r26	; 0x09
    4210:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4212:	6f 81       	ldd	r22, Y+7	; 0x07
    4214:	78 85       	ldd	r23, Y+8	; 0x08
    4216:	89 85       	ldd	r24, Y+9	; 0x09
    4218:	9a 85       	ldd	r25, Y+10	; 0x0a
    421a:	20 e0       	ldi	r18, 0x00	; 0
    421c:	30 e0       	ldi	r19, 0x00	; 0
    421e:	40 e8       	ldi	r20, 0x80	; 128
    4220:	5f e3       	ldi	r21, 0x3F	; 63
    4222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4226:	88 23       	and	r24, r24
    4228:	2c f4       	brge	.+10     	; 0x4234 <LCD8Bit_Send_Command+0x172>
		__ticks = 1;
    422a:	81 e0       	ldi	r24, 0x01	; 1
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	9e 83       	std	Y+6, r25	; 0x06
    4230:	8d 83       	std	Y+5, r24	; 0x05
    4232:	3f c0       	rjmp	.+126    	; 0x42b2 <LCD8Bit_Send_Command+0x1f0>
	else if (__tmp > 65535)
    4234:	6f 81       	ldd	r22, Y+7	; 0x07
    4236:	78 85       	ldd	r23, Y+8	; 0x08
    4238:	89 85       	ldd	r24, Y+9	; 0x09
    423a:	9a 85       	ldd	r25, Y+10	; 0x0a
    423c:	20 e0       	ldi	r18, 0x00	; 0
    423e:	3f ef       	ldi	r19, 0xFF	; 255
    4240:	4f e7       	ldi	r20, 0x7F	; 127
    4242:	57 e4       	ldi	r21, 0x47	; 71
    4244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4248:	18 16       	cp	r1, r24
    424a:	4c f5       	brge	.+82     	; 0x429e <LCD8Bit_Send_Command+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    424c:	6b 85       	ldd	r22, Y+11	; 0x0b
    424e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4250:	8d 85       	ldd	r24, Y+13	; 0x0d
    4252:	9e 85       	ldd	r25, Y+14	; 0x0e
    4254:	20 e0       	ldi	r18, 0x00	; 0
    4256:	30 e0       	ldi	r19, 0x00	; 0
    4258:	40 e2       	ldi	r20, 0x20	; 32
    425a:	51 e4       	ldi	r21, 0x41	; 65
    425c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4260:	dc 01       	movw	r26, r24
    4262:	cb 01       	movw	r24, r22
    4264:	bc 01       	movw	r22, r24
    4266:	cd 01       	movw	r24, r26
    4268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    426c:	dc 01       	movw	r26, r24
    426e:	cb 01       	movw	r24, r22
    4270:	9e 83       	std	Y+6, r25	; 0x06
    4272:	8d 83       	std	Y+5, r24	; 0x05
    4274:	0f c0       	rjmp	.+30     	; 0x4294 <LCD8Bit_Send_Command+0x1d2>
    4276:	88 ec       	ldi	r24, 0xC8	; 200
    4278:	90 e0       	ldi	r25, 0x00	; 0
    427a:	9c 83       	std	Y+4, r25	; 0x04
    427c:	8b 83       	std	Y+3, r24	; 0x03
    427e:	8b 81       	ldd	r24, Y+3	; 0x03
    4280:	9c 81       	ldd	r25, Y+4	; 0x04
    4282:	01 97       	sbiw	r24, 0x01	; 1
    4284:	f1 f7       	brne	.-4      	; 0x4282 <LCD8Bit_Send_Command+0x1c0>
    4286:	9c 83       	std	Y+4, r25	; 0x04
    4288:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    428a:	8d 81       	ldd	r24, Y+5	; 0x05
    428c:	9e 81       	ldd	r25, Y+6	; 0x06
    428e:	01 97       	sbiw	r24, 0x01	; 1
    4290:	9e 83       	std	Y+6, r25	; 0x06
    4292:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4294:	8d 81       	ldd	r24, Y+5	; 0x05
    4296:	9e 81       	ldd	r25, Y+6	; 0x06
    4298:	00 97       	sbiw	r24, 0x00	; 0
    429a:	69 f7       	brne	.-38     	; 0x4276 <LCD8Bit_Send_Command+0x1b4>
    429c:	14 c0       	rjmp	.+40     	; 0x42c6 <LCD8Bit_Send_Command+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    429e:	6f 81       	ldd	r22, Y+7	; 0x07
    42a0:	78 85       	ldd	r23, Y+8	; 0x08
    42a2:	89 85       	ldd	r24, Y+9	; 0x09
    42a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    42a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9e 83       	std	Y+6, r25	; 0x06
    42b0:	8d 83       	std	Y+5, r24	; 0x05
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	9a 83       	std	Y+2, r25	; 0x02
    42b8:	89 83       	std	Y+1, r24	; 0x01
    42ba:	89 81       	ldd	r24, Y+1	; 0x01
    42bc:	9a 81       	ldd	r25, Y+2	; 0x02
    42be:	01 97       	sbiw	r24, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <LCD8Bit_Send_Command+0x1fc>
    42c2:	9a 83       	std	Y+2, r25	; 0x02
    42c4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    42c6:	6d 96       	adiw	r28, 0x1d	; 29
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	f8 94       	cli
    42cc:	de bf       	out	0x3e, r29	; 62
    42ce:	0f be       	out	0x3f, r0	; 63
    42d0:	cd bf       	out	0x3d, r28	; 61
    42d2:	cf 91       	pop	r28
    42d4:	df 91       	pop	r29
    42d6:	08 95       	ret

000042d8 <LCD8Bit_Send_Data>:

void LCD8Bit_Send_Data(u8 data){
    42d8:	df 93       	push	r29
    42da:	cf 93       	push	r28
    42dc:	cd b7       	in	r28, 0x3d	; 61
    42de:	de b7       	in	r29, 0x3e	; 62
    42e0:	6d 97       	sbiw	r28, 0x1d	; 29
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	f8 94       	cli
    42e6:	de bf       	out	0x3e, r29	; 62
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	cd bf       	out	0x3d, r28	; 61
    42ec:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send DATA
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,HIGH);
    42ee:	80 e0       	ldi	r24, 0x00	; 0
    42f0:	60 e0       	ldi	r22, 0x00	; 0
    42f2:	41 e0       	ldi	r20, 0x01	; 1
    42f4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,data);
    42f8:	82 e0       	ldi	r24, 0x02	; 2
    42fa:	6d 8d       	ldd	r22, Y+29	; 0x1d
    42fc:	0e 94 56 1e 	call	0x3cac	; 0x3cac <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    4300:	80 e0       	ldi	r24, 0x00	; 0
    4302:	61 e0       	ldi	r22, 0x01	; 1
    4304:	41 e0       	ldi	r20, 0x01	; 1
    4306:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
    430a:	80 e0       	ldi	r24, 0x00	; 0
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	a0 e0       	ldi	r26, 0x00	; 0
    4310:	b0 e4       	ldi	r27, 0x40	; 64
    4312:	89 8f       	std	Y+25, r24	; 0x19
    4314:	9a 8f       	std	Y+26, r25	; 0x1a
    4316:	ab 8f       	std	Y+27, r26	; 0x1b
    4318:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431a:	69 8d       	ldd	r22, Y+25	; 0x19
    431c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    431e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4320:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4322:	20 e0       	ldi	r18, 0x00	; 0
    4324:	30 e0       	ldi	r19, 0x00	; 0
    4326:	4a ef       	ldi	r20, 0xFA	; 250
    4328:	54 e4       	ldi	r21, 0x44	; 68
    432a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    432e:	dc 01       	movw	r26, r24
    4330:	cb 01       	movw	r24, r22
    4332:	8d 8b       	std	Y+21, r24	; 0x15
    4334:	9e 8b       	std	Y+22, r25	; 0x16
    4336:	af 8b       	std	Y+23, r26	; 0x17
    4338:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    433a:	6d 89       	ldd	r22, Y+21	; 0x15
    433c:	7e 89       	ldd	r23, Y+22	; 0x16
    433e:	8f 89       	ldd	r24, Y+23	; 0x17
    4340:	98 8d       	ldd	r25, Y+24	; 0x18
    4342:	20 e0       	ldi	r18, 0x00	; 0
    4344:	30 e0       	ldi	r19, 0x00	; 0
    4346:	40 e8       	ldi	r20, 0x80	; 128
    4348:	5f e3       	ldi	r21, 0x3F	; 63
    434a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    434e:	88 23       	and	r24, r24
    4350:	2c f4       	brge	.+10     	; 0x435c <LCD8Bit_Send_Data+0x84>
		__ticks = 1;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	90 e0       	ldi	r25, 0x00	; 0
    4356:	9c 8b       	std	Y+20, r25	; 0x14
    4358:	8b 8b       	std	Y+19, r24	; 0x13
    435a:	3f c0       	rjmp	.+126    	; 0x43da <LCD8Bit_Send_Data+0x102>
	else if (__tmp > 65535)
    435c:	6d 89       	ldd	r22, Y+21	; 0x15
    435e:	7e 89       	ldd	r23, Y+22	; 0x16
    4360:	8f 89       	ldd	r24, Y+23	; 0x17
    4362:	98 8d       	ldd	r25, Y+24	; 0x18
    4364:	20 e0       	ldi	r18, 0x00	; 0
    4366:	3f ef       	ldi	r19, 0xFF	; 255
    4368:	4f e7       	ldi	r20, 0x7F	; 127
    436a:	57 e4       	ldi	r21, 0x47	; 71
    436c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4370:	18 16       	cp	r1, r24
    4372:	4c f5       	brge	.+82     	; 0x43c6 <LCD8Bit_Send_Data+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4374:	69 8d       	ldd	r22, Y+25	; 0x19
    4376:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4378:	8b 8d       	ldd	r24, Y+27	; 0x1b
    437a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e2       	ldi	r20, 0x20	; 32
    4382:	51 e4       	ldi	r21, 0x41	; 65
    4384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4388:	dc 01       	movw	r26, r24
    438a:	cb 01       	movw	r24, r22
    438c:	bc 01       	movw	r22, r24
    438e:	cd 01       	movw	r24, r26
    4390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4394:	dc 01       	movw	r26, r24
    4396:	cb 01       	movw	r24, r22
    4398:	9c 8b       	std	Y+20, r25	; 0x14
    439a:	8b 8b       	std	Y+19, r24	; 0x13
    439c:	0f c0       	rjmp	.+30     	; 0x43bc <LCD8Bit_Send_Data+0xe4>
    439e:	88 ec       	ldi	r24, 0xC8	; 200
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	9a 8b       	std	Y+18, r25	; 0x12
    43a4:	89 8b       	std	Y+17, r24	; 0x11
    43a6:	89 89       	ldd	r24, Y+17	; 0x11
    43a8:	9a 89       	ldd	r25, Y+18	; 0x12
    43aa:	01 97       	sbiw	r24, 0x01	; 1
    43ac:	f1 f7       	brne	.-4      	; 0x43aa <LCD8Bit_Send_Data+0xd2>
    43ae:	9a 8b       	std	Y+18, r25	; 0x12
    43b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b2:	8b 89       	ldd	r24, Y+19	; 0x13
    43b4:	9c 89       	ldd	r25, Y+20	; 0x14
    43b6:	01 97       	sbiw	r24, 0x01	; 1
    43b8:	9c 8b       	std	Y+20, r25	; 0x14
    43ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43bc:	8b 89       	ldd	r24, Y+19	; 0x13
    43be:	9c 89       	ldd	r25, Y+20	; 0x14
    43c0:	00 97       	sbiw	r24, 0x00	; 0
    43c2:	69 f7       	brne	.-38     	; 0x439e <LCD8Bit_Send_Data+0xc6>
    43c4:	14 c0       	rjmp	.+40     	; 0x43ee <LCD8Bit_Send_Data+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43c6:	6d 89       	ldd	r22, Y+21	; 0x15
    43c8:	7e 89       	ldd	r23, Y+22	; 0x16
    43ca:	8f 89       	ldd	r24, Y+23	; 0x17
    43cc:	98 8d       	ldd	r25, Y+24	; 0x18
    43ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d2:	dc 01       	movw	r26, r24
    43d4:	cb 01       	movw	r24, r22
    43d6:	9c 8b       	std	Y+20, r25	; 0x14
    43d8:	8b 8b       	std	Y+19, r24	; 0x13
    43da:	8b 89       	ldd	r24, Y+19	; 0x13
    43dc:	9c 89       	ldd	r25, Y+20	; 0x14
    43de:	98 8b       	std	Y+16, r25	; 0x10
    43e0:	8f 87       	std	Y+15, r24	; 0x0f
    43e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    43e4:	98 89       	ldd	r25, Y+16	; 0x10
    43e6:	01 97       	sbiw	r24, 0x01	; 1
    43e8:	f1 f7       	brne	.-4      	; 0x43e6 <LCD8Bit_Send_Data+0x10e>
    43ea:	98 8b       	std	Y+16, r25	; 0x10
    43ec:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    43ee:	80 e0       	ldi	r24, 0x00	; 0
    43f0:	61 e0       	ldi	r22, 0x01	; 1
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	90 e0       	ldi	r25, 0x00	; 0
    43fc:	a0 e0       	ldi	r26, 0x00	; 0
    43fe:	b0 e4       	ldi	r27, 0x40	; 64
    4400:	8b 87       	std	Y+11, r24	; 0x0b
    4402:	9c 87       	std	Y+12, r25	; 0x0c
    4404:	ad 87       	std	Y+13, r26	; 0x0d
    4406:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4408:	6b 85       	ldd	r22, Y+11	; 0x0b
    440a:	7c 85       	ldd	r23, Y+12	; 0x0c
    440c:	8d 85       	ldd	r24, Y+13	; 0x0d
    440e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	4a ef       	ldi	r20, 0xFA	; 250
    4416:	54 e4       	ldi	r21, 0x44	; 68
    4418:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	8f 83       	std	Y+7, r24	; 0x07
    4422:	98 87       	std	Y+8, r25	; 0x08
    4424:	a9 87       	std	Y+9, r26	; 0x09
    4426:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4428:	6f 81       	ldd	r22, Y+7	; 0x07
    442a:	78 85       	ldd	r23, Y+8	; 0x08
    442c:	89 85       	ldd	r24, Y+9	; 0x09
    442e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	30 e0       	ldi	r19, 0x00	; 0
    4434:	40 e8       	ldi	r20, 0x80	; 128
    4436:	5f e3       	ldi	r21, 0x3F	; 63
    4438:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    443c:	88 23       	and	r24, r24
    443e:	2c f4       	brge	.+10     	; 0x444a <LCD8Bit_Send_Data+0x172>
		__ticks = 1;
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	90 e0       	ldi	r25, 0x00	; 0
    4444:	9e 83       	std	Y+6, r25	; 0x06
    4446:	8d 83       	std	Y+5, r24	; 0x05
    4448:	3f c0       	rjmp	.+126    	; 0x44c8 <LCD8Bit_Send_Data+0x1f0>
	else if (__tmp > 65535)
    444a:	6f 81       	ldd	r22, Y+7	; 0x07
    444c:	78 85       	ldd	r23, Y+8	; 0x08
    444e:	89 85       	ldd	r24, Y+9	; 0x09
    4450:	9a 85       	ldd	r25, Y+10	; 0x0a
    4452:	20 e0       	ldi	r18, 0x00	; 0
    4454:	3f ef       	ldi	r19, 0xFF	; 255
    4456:	4f e7       	ldi	r20, 0x7F	; 127
    4458:	57 e4       	ldi	r21, 0x47	; 71
    445a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    445e:	18 16       	cp	r1, r24
    4460:	4c f5       	brge	.+82     	; 0x44b4 <LCD8Bit_Send_Data+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4462:	6b 85       	ldd	r22, Y+11	; 0x0b
    4464:	7c 85       	ldd	r23, Y+12	; 0x0c
    4466:	8d 85       	ldd	r24, Y+13	; 0x0d
    4468:	9e 85       	ldd	r25, Y+14	; 0x0e
    446a:	20 e0       	ldi	r18, 0x00	; 0
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	40 e2       	ldi	r20, 0x20	; 32
    4470:	51 e4       	ldi	r21, 0x41	; 65
    4472:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4476:	dc 01       	movw	r26, r24
    4478:	cb 01       	movw	r24, r22
    447a:	bc 01       	movw	r22, r24
    447c:	cd 01       	movw	r24, r26
    447e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4482:	dc 01       	movw	r26, r24
    4484:	cb 01       	movw	r24, r22
    4486:	9e 83       	std	Y+6, r25	; 0x06
    4488:	8d 83       	std	Y+5, r24	; 0x05
    448a:	0f c0       	rjmp	.+30     	; 0x44aa <LCD8Bit_Send_Data+0x1d2>
    448c:	88 ec       	ldi	r24, 0xC8	; 200
    448e:	90 e0       	ldi	r25, 0x00	; 0
    4490:	9c 83       	std	Y+4, r25	; 0x04
    4492:	8b 83       	std	Y+3, r24	; 0x03
    4494:	8b 81       	ldd	r24, Y+3	; 0x03
    4496:	9c 81       	ldd	r25, Y+4	; 0x04
    4498:	01 97       	sbiw	r24, 0x01	; 1
    449a:	f1 f7       	brne	.-4      	; 0x4498 <LCD8Bit_Send_Data+0x1c0>
    449c:	9c 83       	std	Y+4, r25	; 0x04
    449e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44a0:	8d 81       	ldd	r24, Y+5	; 0x05
    44a2:	9e 81       	ldd	r25, Y+6	; 0x06
    44a4:	01 97       	sbiw	r24, 0x01	; 1
    44a6:	9e 83       	std	Y+6, r25	; 0x06
    44a8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44aa:	8d 81       	ldd	r24, Y+5	; 0x05
    44ac:	9e 81       	ldd	r25, Y+6	; 0x06
    44ae:	00 97       	sbiw	r24, 0x00	; 0
    44b0:	69 f7       	brne	.-38     	; 0x448c <LCD8Bit_Send_Data+0x1b4>
    44b2:	14 c0       	rjmp	.+40     	; 0x44dc <LCD8Bit_Send_Data+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44b4:	6f 81       	ldd	r22, Y+7	; 0x07
    44b6:	78 85       	ldd	r23, Y+8	; 0x08
    44b8:	89 85       	ldd	r24, Y+9	; 0x09
    44ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    44bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44c0:	dc 01       	movw	r26, r24
    44c2:	cb 01       	movw	r24, r22
    44c4:	9e 83       	std	Y+6, r25	; 0x06
    44c6:	8d 83       	std	Y+5, r24	; 0x05
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	9a 83       	std	Y+2, r25	; 0x02
    44ce:	89 83       	std	Y+1, r24	; 0x01
    44d0:	89 81       	ldd	r24, Y+1	; 0x01
    44d2:	9a 81       	ldd	r25, Y+2	; 0x02
    44d4:	01 97       	sbiw	r24, 0x01	; 1
    44d6:	f1 f7       	brne	.-4      	; 0x44d4 <LCD8Bit_Send_Data+0x1fc>
    44d8:	9a 83       	std	Y+2, r25	; 0x02
    44da:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);


}
    44dc:	6d 96       	adiw	r28, 0x1d	; 29
    44de:	0f b6       	in	r0, 0x3f	; 63
    44e0:	f8 94       	cli
    44e2:	de bf       	out	0x3e, r29	; 62
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	cd bf       	out	0x3d, r28	; 61
    44e8:	cf 91       	pop	r28
    44ea:	df 91       	pop	r29
    44ec:	08 95       	ret

000044ee <LCD8Bit_init>:
void LCD8Bit_init(){
    44ee:	df 93       	push	r29
    44f0:	cf 93       	push	r28
    44f2:	cd b7       	in	r28, 0x3d	; 61
    44f4:	de b7       	in	r29, 0x3e	; 62
    44f6:	2e 97       	sbiw	r28, 0x0e	; 14
    44f8:	0f b6       	in	r0, 0x3f	; 63
    44fa:	f8 94       	cli
    44fc:	de bf       	out	0x3e, r29	; 62
    44fe:	0f be       	out	0x3f, r0	; 63
    4500:	cd bf       	out	0x3d, r28	; 61
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	a0 e2       	ldi	r26, 0x20	; 32
    4508:	b2 e4       	ldi	r27, 0x42	; 66
    450a:	8b 87       	std	Y+11, r24	; 0x0b
    450c:	9c 87       	std	Y+12, r25	; 0x0c
    450e:	ad 87       	std	Y+13, r26	; 0x0d
    4510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4512:	6b 85       	ldd	r22, Y+11	; 0x0b
    4514:	7c 85       	ldd	r23, Y+12	; 0x0c
    4516:	8d 85       	ldd	r24, Y+13	; 0x0d
    4518:	9e 85       	ldd	r25, Y+14	; 0x0e
    451a:	20 e0       	ldi	r18, 0x00	; 0
    451c:	30 e0       	ldi	r19, 0x00	; 0
    451e:	4a ef       	ldi	r20, 0xFA	; 250
    4520:	54 e4       	ldi	r21, 0x44	; 68
    4522:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4526:	dc 01       	movw	r26, r24
    4528:	cb 01       	movw	r24, r22
    452a:	8f 83       	std	Y+7, r24	; 0x07
    452c:	98 87       	std	Y+8, r25	; 0x08
    452e:	a9 87       	std	Y+9, r26	; 0x09
    4530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4532:	6f 81       	ldd	r22, Y+7	; 0x07
    4534:	78 85       	ldd	r23, Y+8	; 0x08
    4536:	89 85       	ldd	r24, Y+9	; 0x09
    4538:	9a 85       	ldd	r25, Y+10	; 0x0a
    453a:	20 e0       	ldi	r18, 0x00	; 0
    453c:	30 e0       	ldi	r19, 0x00	; 0
    453e:	40 e8       	ldi	r20, 0x80	; 128
    4540:	5f e3       	ldi	r21, 0x3F	; 63
    4542:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4546:	88 23       	and	r24, r24
    4548:	2c f4       	brge	.+10     	; 0x4554 <LCD8Bit_init+0x66>
		__ticks = 1;
    454a:	81 e0       	ldi	r24, 0x01	; 1
    454c:	90 e0       	ldi	r25, 0x00	; 0
    454e:	9e 83       	std	Y+6, r25	; 0x06
    4550:	8d 83       	std	Y+5, r24	; 0x05
    4552:	3f c0       	rjmp	.+126    	; 0x45d2 <LCD8Bit_init+0xe4>
	else if (__tmp > 65535)
    4554:	6f 81       	ldd	r22, Y+7	; 0x07
    4556:	78 85       	ldd	r23, Y+8	; 0x08
    4558:	89 85       	ldd	r24, Y+9	; 0x09
    455a:	9a 85       	ldd	r25, Y+10	; 0x0a
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	3f ef       	ldi	r19, 0xFF	; 255
    4560:	4f e7       	ldi	r20, 0x7F	; 127
    4562:	57 e4       	ldi	r21, 0x47	; 71
    4564:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4568:	18 16       	cp	r1, r24
    456a:	4c f5       	brge	.+82     	; 0x45be <LCD8Bit_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    456c:	6b 85       	ldd	r22, Y+11	; 0x0b
    456e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4570:	8d 85       	ldd	r24, Y+13	; 0x0d
    4572:	9e 85       	ldd	r25, Y+14	; 0x0e
    4574:	20 e0       	ldi	r18, 0x00	; 0
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	40 e2       	ldi	r20, 0x20	; 32
    457a:	51 e4       	ldi	r21, 0x41	; 65
    457c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4580:	dc 01       	movw	r26, r24
    4582:	cb 01       	movw	r24, r22
    4584:	bc 01       	movw	r22, r24
    4586:	cd 01       	movw	r24, r26
    4588:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    458c:	dc 01       	movw	r26, r24
    458e:	cb 01       	movw	r24, r22
    4590:	9e 83       	std	Y+6, r25	; 0x06
    4592:	8d 83       	std	Y+5, r24	; 0x05
    4594:	0f c0       	rjmp	.+30     	; 0x45b4 <LCD8Bit_init+0xc6>
    4596:	88 ec       	ldi	r24, 0xC8	; 200
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	9c 83       	std	Y+4, r25	; 0x04
    459c:	8b 83       	std	Y+3, r24	; 0x03
    459e:	8b 81       	ldd	r24, Y+3	; 0x03
    45a0:	9c 81       	ldd	r25, Y+4	; 0x04
    45a2:	01 97       	sbiw	r24, 0x01	; 1
    45a4:	f1 f7       	brne	.-4      	; 0x45a2 <LCD8Bit_init+0xb4>
    45a6:	9c 83       	std	Y+4, r25	; 0x04
    45a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45aa:	8d 81       	ldd	r24, Y+5	; 0x05
    45ac:	9e 81       	ldd	r25, Y+6	; 0x06
    45ae:	01 97       	sbiw	r24, 0x01	; 1
    45b0:	9e 83       	std	Y+6, r25	; 0x06
    45b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b4:	8d 81       	ldd	r24, Y+5	; 0x05
    45b6:	9e 81       	ldd	r25, Y+6	; 0x06
    45b8:	00 97       	sbiw	r24, 0x00	; 0
    45ba:	69 f7       	brne	.-38     	; 0x4596 <LCD8Bit_init+0xa8>
    45bc:	14 c0       	rjmp	.+40     	; 0x45e6 <LCD8Bit_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45be:	6f 81       	ldd	r22, Y+7	; 0x07
    45c0:	78 85       	ldd	r23, Y+8	; 0x08
    45c2:	89 85       	ldd	r24, Y+9	; 0x09
    45c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ca:	dc 01       	movw	r26, r24
    45cc:	cb 01       	movw	r24, r22
    45ce:	9e 83       	std	Y+6, r25	; 0x06
    45d0:	8d 83       	std	Y+5, r24	; 0x05
    45d2:	8d 81       	ldd	r24, Y+5	; 0x05
    45d4:	9e 81       	ldd	r25, Y+6	; 0x06
    45d6:	9a 83       	std	Y+2, r25	; 0x02
    45d8:	89 83       	std	Y+1, r24	; 0x01
    45da:	89 81       	ldd	r24, Y+1	; 0x01
    45dc:	9a 81       	ldd	r25, Y+2	; 0x02
    45de:	01 97       	sbiw	r24, 0x01	; 1
    45e0:	f1 f7       	brne	.-4      	; 0x45de <LCD8Bit_init+0xf0>
    45e2:	9a 83       	std	Y+2, r25	; 0x02
    45e4:	89 83       	std	Y+1, r24	; 0x01
    //Wait more than 30 ms
	_delay_ms(40);
	//Function Set
	LCD8Bit_Send_Command(FUNC_SET);
    45e6:	88 e3       	ldi	r24, 0x38	; 56
    45e8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	//ON OFF Control
	LCD8Bit_Send_Command(ON_OFF);
    45ec:	8c e0       	ldi	r24, 0x0C	; 12
    45ee:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	//Clear
	LCD8Bit_Send_Command(LCD8Bit_CLEAR);
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
}
    45f8:	2e 96       	adiw	r28, 0x0e	; 14
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	cf 91       	pop	r28
    4606:	df 91       	pop	r29
    4608:	08 95       	ret

0000460a <LCD_Send_String>:


/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
    460a:	df 93       	push	r29
    460c:	cf 93       	push	r28
    460e:	00 d0       	rcall	.+0      	; 0x4610 <LCD_Send_String+0x6>
    4610:	0f 92       	push	r0
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	9b 83       	std	Y+3, r25	; 0x03
    4618:	8a 83       	std	Y+2, r24	; 0x02
	u8 cnt = 0;
    461a:	19 82       	std	Y+1, r1	; 0x01
    461c:	0e c0       	rjmp	.+28     	; 0x463a <LCD_Send_String+0x30>
	while(word[cnt] != '\0'){
		LCD8Bit_Send_Data(word[cnt]);
    461e:	89 81       	ldd	r24, Y+1	; 0x01
    4620:	28 2f       	mov	r18, r24
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	8a 81       	ldd	r24, Y+2	; 0x02
    4626:	9b 81       	ldd	r25, Y+3	; 0x03
    4628:	fc 01       	movw	r30, r24
    462a:	e2 0f       	add	r30, r18
    462c:	f3 1f       	adc	r31, r19
    462e:	80 81       	ld	r24, Z
    4630:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
		cnt++;
    4634:	89 81       	ldd	r24, Y+1	; 0x01
    4636:	8f 5f       	subi	r24, 0xFF	; 255
    4638:	89 83       	std	Y+1, r24	; 0x01
/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
	u8 cnt = 0;
	while(word[cnt] != '\0'){
    463a:	89 81       	ldd	r24, Y+1	; 0x01
    463c:	28 2f       	mov	r18, r24
    463e:	30 e0       	ldi	r19, 0x00	; 0
    4640:	8a 81       	ldd	r24, Y+2	; 0x02
    4642:	9b 81       	ldd	r25, Y+3	; 0x03
    4644:	fc 01       	movw	r30, r24
    4646:	e2 0f       	add	r30, r18
    4648:	f3 1f       	adc	r31, r19
    464a:	80 81       	ld	r24, Z
    464c:	88 23       	and	r24, r24
    464e:	39 f7       	brne	.-50     	; 0x461e <LCD_Send_String+0x14>
		LCD8Bit_Send_Data(word[cnt]);
		cnt++;
	}
}
    4650:	0f 90       	pop	r0
    4652:	0f 90       	pop	r0
    4654:	0f 90       	pop	r0
    4656:	cf 91       	pop	r28
    4658:	df 91       	pop	r29
    465a:	08 95       	ret

0000465c <LCD_Send_Int>:

void LCD_Send_Int(u32 num){
    465c:	df 93       	push	r29
    465e:	cf 93       	push	r28
    4660:	cd b7       	in	r28, 0x3d	; 61
    4662:	de b7       	in	r29, 0x3e	; 62
    4664:	2c 97       	sbiw	r28, 0x0c	; 12
    4666:	0f b6       	in	r0, 0x3f	; 63
    4668:	f8 94       	cli
    466a:	de bf       	out	0x3e, r29	; 62
    466c:	0f be       	out	0x3f, r0	; 63
    466e:	cd bf       	out	0x3d, r28	; 61
    4670:	9c 87       	std	Y+12, r25	; 0x0c
    4672:	8b 87       	std	Y+11, r24	; 0x0b
	char arr[10];
	itoa(num,arr,10);
    4674:	8b 85       	ldd	r24, Y+11	; 0x0b
    4676:	9c 85       	ldd	r25, Y+12	; 0x0c
    4678:	9e 01       	movw	r18, r28
    467a:	2f 5f       	subi	r18, 0xFF	; 255
    467c:	3f 4f       	sbci	r19, 0xFF	; 255
    467e:	b9 01       	movw	r22, r18
    4680:	4a e0       	ldi	r20, 0x0A	; 10
    4682:	50 e0       	ldi	r21, 0x00	; 0
    4684:	0e 94 5d 30 	call	0x60ba	; 0x60ba <itoa>
	LCD_Send_String(arr);
    4688:	ce 01       	movw	r24, r28
    468a:	01 96       	adiw	r24, 0x01	; 1
    468c:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>

}
    4690:	2c 96       	adiw	r28, 0x0c	; 12
    4692:	0f b6       	in	r0, 0x3f	; 63
    4694:	f8 94       	cli
    4696:	de bf       	out	0x3e, r29	; 62
    4698:	0f be       	out	0x3f, r0	; 63
    469a:	cd bf       	out	0x3d, r28	; 61
    469c:	cf 91       	pop	r28
    469e:	df 91       	pop	r29
    46a0:	08 95       	ret

000046a2 <LCD_GOTOXY>:


void LCD_GOTOXY(u8 x, u8 y){
    46a2:	df 93       	push	r29
    46a4:	cf 93       	push	r28
    46a6:	00 d0       	rcall	.+0      	; 0x46a8 <LCD_GOTOXY+0x6>
    46a8:	0f 92       	push	r0
    46aa:	cd b7       	in	r28, 0x3d	; 61
    46ac:	de b7       	in	r29, 0x3e	; 62
    46ae:	8a 83       	std	Y+2, r24	; 0x02
    46b0:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_ADDRESS = 0;
    46b2:	19 82       	std	Y+1, r1	; 0x01
	if(y == 0){
    46b4:	8b 81       	ldd	r24, Y+3	; 0x03
    46b6:	88 23       	and	r24, r24
    46b8:	11 f4       	brne	.+4      	; 0x46be <LCD_GOTOXY+0x1c>
		DDRAM_ADDRESS = x;
    46ba:	8a 81       	ldd	r24, Y+2	; 0x02
    46bc:	89 83       	std	Y+1, r24	; 0x01
	}
	if(y == 1){
    46be:	8b 81       	ldd	r24, Y+3	; 0x03
    46c0:	81 30       	cpi	r24, 0x01	; 1
    46c2:	19 f4       	brne	.+6      	; 0x46ca <LCD_GOTOXY+0x28>
	    DDRAM_ADDRESS = x + 0x40;
    46c4:	8a 81       	ldd	r24, Y+2	; 0x02
    46c6:	80 5c       	subi	r24, 0xC0	; 192
    46c8:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD8Bit_Send_Command(DDRAM_ADDRESS + 128);
    46ca:	89 81       	ldd	r24, Y+1	; 0x01
    46cc:	80 58       	subi	r24, 0x80	; 128
    46ce:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
}
    46d2:	0f 90       	pop	r0
    46d4:	0f 90       	pop	r0
    46d6:	0f 90       	pop	r0
    46d8:	cf 91       	pop	r28
    46da:	df 91       	pop	r29
    46dc:	08 95       	ret

000046de <LCD_Save_Character>:

void LCD_Save_Character(u8* arr,u8 BlockNumber){
    46de:	df 93       	push	r29
    46e0:	cf 93       	push	r28
    46e2:	00 d0       	rcall	.+0      	; 0x46e4 <LCD_Save_Character+0x6>
    46e4:	00 d0       	rcall	.+0      	; 0x46e6 <LCD_Save_Character+0x8>
    46e6:	0f 92       	push	r0
    46e8:	cd b7       	in	r28, 0x3d	; 61
    46ea:	de b7       	in	r29, 0x3e	; 62
    46ec:	9c 83       	std	Y+4, r25	; 0x04
    46ee:	8b 83       	std	Y+3, r24	; 0x03
    46f0:	6d 83       	std	Y+5, r22	; 0x05
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    46f2:	1a 82       	std	Y+2, r1	; 0x02
	CGRAM = BlockNumber * 8;
    46f4:	8d 81       	ldd	r24, Y+5	; 0x05
    46f6:	88 2f       	mov	r24, r24
    46f8:	90 e0       	ldi	r25, 0x00	; 0
    46fa:	88 0f       	add	r24, r24
    46fc:	99 1f       	adc	r25, r25
    46fe:	88 0f       	add	r24, r24
    4700:	99 1f       	adc	r25, r25
    4702:	88 0f       	add	r24, r24
    4704:	99 1f       	adc	r25, r25
    4706:	8a 83       	std	Y+2, r24	; 0x02
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    4708:	8a 81       	ldd	r24, Y+2	; 0x02
    470a:	80 5c       	subi	r24, 0xC0	; 192
    470c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	for(u8 i = 0 ;i<8;i++){
    4710:	19 82       	std	Y+1, r1	; 0x01
    4712:	0e c0       	rjmp	.+28     	; 0x4730 <LCD_Save_Character+0x52>
		LCD8Bit_Send_Data(arr[i]);
    4714:	89 81       	ldd	r24, Y+1	; 0x01
    4716:	28 2f       	mov	r18, r24
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	8b 81       	ldd	r24, Y+3	; 0x03
    471c:	9c 81       	ldd	r25, Y+4	; 0x04
    471e:	fc 01       	movw	r30, r24
    4720:	e2 0f       	add	r30, r18
    4722:	f3 1f       	adc	r31, r19
    4724:	80 81       	ld	r24, Z
    4726:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
	CGRAM = BlockNumber * 8;
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
	for(u8 i = 0 ;i<8;i++){
    472a:	89 81       	ldd	r24, Y+1	; 0x01
    472c:	8f 5f       	subi	r24, 0xFF	; 255
    472e:	89 83       	std	Y+1, r24	; 0x01
    4730:	89 81       	ldd	r24, Y+1	; 0x01
    4732:	88 30       	cpi	r24, 0x08	; 8
    4734:	78 f3       	brcs	.-34     	; 0x4714 <LCD_Save_Character+0x36>
		LCD8Bit_Send_Data(arr[i]);
	}

}
    4736:	0f 90       	pop	r0
    4738:	0f 90       	pop	r0
    473a:	0f 90       	pop	r0
    473c:	0f 90       	pop	r0
    473e:	0f 90       	pop	r0
    4740:	cf 91       	pop	r28
    4742:	df 91       	pop	r29
    4744:	08 95       	ret

00004746 <LCD_Display_Character>:


void LCD_Display_Character(u8 BlockNumber ,u8 x ,u8 y){
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <LCD_Display_Character+0x6>
    474c:	00 d0       	rcall	.+0      	; 0x474e <LCD_Display_Character+0x8>
    474e:	cd b7       	in	r28, 0x3d	; 61
    4750:	de b7       	in	r29, 0x3e	; 62
    4752:	8a 83       	std	Y+2, r24	; 0x02
    4754:	6b 83       	std	Y+3, r22	; 0x03
    4756:	4c 83       	std	Y+4, r20	; 0x04
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    4758:	19 82       	std	Y+1, r1	; 0x01
	CGRAM = BlockNumber * 8;
    475a:	8a 81       	ldd	r24, Y+2	; 0x02
    475c:	88 2f       	mov	r24, r24
    475e:	90 e0       	ldi	r25, 0x00	; 0
    4760:	88 0f       	add	r24, r24
    4762:	99 1f       	adc	r25, r25
    4764:	88 0f       	add	r24, r24
    4766:	99 1f       	adc	r25, r25
    4768:	88 0f       	add	r24, r24
    476a:	99 1f       	adc	r25, r25
    476c:	89 83       	std	Y+1, r24	; 0x01
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    476e:	89 81       	ldd	r24, Y+1	; 0x01
    4770:	80 5c       	subi	r24, 0xC0	; 192
    4772:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	//Goto to print position
	LCD_GOTOXY(x,y);
    4776:	8b 81       	ldd	r24, Y+3	; 0x03
    4778:	6c 81       	ldd	r22, Y+4	; 0x04
    477a:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
	//Write the character on the DDRAM (LCD)
	LCD8Bit_Send_Data(BlockNumber);
    477e:	8a 81       	ldd	r24, Y+2	; 0x02
    4780:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
    }
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	0f 90       	pop	r0
    478a:	0f 90       	pop	r0
    478c:	cf 91       	pop	r28
    478e:	df 91       	pop	r29
    4790:	08 95       	ret

00004792 <BuzzerON>:
#include <avr/delay.h>

#include "../../Config.h"


void BuzzerON(){
    4792:	df 93       	push	r29
    4794:	cf 93       	push	r28
    4796:	cd b7       	in	r28, 0x3d	; 61
    4798:	de b7       	in	r29, 0x3e	; 62
  DIO_SetPin_Value(BuzzerPort,BuzzerPin,HIGH);
    479a:	81 e0       	ldi	r24, 0x01	; 1
    479c:	64 e0       	ldi	r22, 0x04	; 4
    479e:	41 e0       	ldi	r20, 0x01	; 1
    47a0:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
}
    47a4:	cf 91       	pop	r28
    47a6:	df 91       	pop	r29
    47a8:	08 95       	ret

000047aa <BuzzerOFF>:
void BuzzerOFF(){
    47aa:	df 93       	push	r29
    47ac:	cf 93       	push	r28
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
	  DIO_SetPin_Value(BuzzerPort,BuzzerPin,LOW);
    47b2:	81 e0       	ldi	r24, 0x01	; 1
    47b4:	64 e0       	ldi	r22, 0x04	; 4
    47b6:	40 e0       	ldi	r20, 0x00	; 0
    47b8:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>

}
    47bc:	cf 91       	pop	r28
    47be:	df 91       	pop	r29
    47c0:	08 95       	ret

000047c2 <BuzzerTOGGLE>:
void BuzzerTOGGLE(u32 ontime){
    47c2:	df 93       	push	r29
    47c4:	cf 93       	push	r28
    47c6:	cd b7       	in	r28, 0x3d	; 61
    47c8:	de b7       	in	r29, 0x3e	; 62
    47ca:	60 97       	sbiw	r28, 0x10	; 16
    47cc:	0f b6       	in	r0, 0x3f	; 63
    47ce:	f8 94       	cli
    47d0:	de bf       	out	0x3e, r29	; 62
    47d2:	0f be       	out	0x3f, r0	; 63
    47d4:	cd bf       	out	0x3d, r28	; 61
    47d6:	98 8b       	std	Y+16, r25	; 0x10
    47d8:	8f 87       	std	Y+15, r24	; 0x0f
	BuzzerON();
    47da:	0e 94 c9 23 	call	0x4792	; 0x4792 <BuzzerON>
    _delay_ms(ontime);
    47de:	8f 85       	ldd	r24, Y+15	; 0x0f
    47e0:	98 89       	ldd	r25, Y+16	; 0x10
    47e2:	cc 01       	movw	r24, r24
    47e4:	a0 e0       	ldi	r26, 0x00	; 0
    47e6:	b0 e0       	ldi	r27, 0x00	; 0
    47e8:	bc 01       	movw	r22, r24
    47ea:	cd 01       	movw	r24, r26
    47ec:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    47f0:	dc 01       	movw	r26, r24
    47f2:	cb 01       	movw	r24, r22
    47f4:	8b 87       	std	Y+11, r24	; 0x0b
    47f6:	9c 87       	std	Y+12, r25	; 0x0c
    47f8:	ad 87       	std	Y+13, r26	; 0x0d
    47fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    47fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4800:	8d 85       	ldd	r24, Y+13	; 0x0d
    4802:	9e 85       	ldd	r25, Y+14	; 0x0e
    4804:	20 e0       	ldi	r18, 0x00	; 0
    4806:	30 e0       	ldi	r19, 0x00	; 0
    4808:	4a ef       	ldi	r20, 0xFA	; 250
    480a:	54 e4       	ldi	r21, 0x44	; 68
    480c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4810:	dc 01       	movw	r26, r24
    4812:	cb 01       	movw	r24, r22
    4814:	8f 83       	std	Y+7, r24	; 0x07
    4816:	98 87       	std	Y+8, r25	; 0x08
    4818:	a9 87       	std	Y+9, r26	; 0x09
    481a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    481c:	6f 81       	ldd	r22, Y+7	; 0x07
    481e:	78 85       	ldd	r23, Y+8	; 0x08
    4820:	89 85       	ldd	r24, Y+9	; 0x09
    4822:	9a 85       	ldd	r25, Y+10	; 0x0a
    4824:	20 e0       	ldi	r18, 0x00	; 0
    4826:	30 e0       	ldi	r19, 0x00	; 0
    4828:	40 e8       	ldi	r20, 0x80	; 128
    482a:	5f e3       	ldi	r21, 0x3F	; 63
    482c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4830:	88 23       	and	r24, r24
    4832:	2c f4       	brge	.+10     	; 0x483e <BuzzerTOGGLE+0x7c>
		__ticks = 1;
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	9e 83       	std	Y+6, r25	; 0x06
    483a:	8d 83       	std	Y+5, r24	; 0x05
    483c:	3f c0       	rjmp	.+126    	; 0x48bc <BuzzerTOGGLE+0xfa>
	else if (__tmp > 65535)
    483e:	6f 81       	ldd	r22, Y+7	; 0x07
    4840:	78 85       	ldd	r23, Y+8	; 0x08
    4842:	89 85       	ldd	r24, Y+9	; 0x09
    4844:	9a 85       	ldd	r25, Y+10	; 0x0a
    4846:	20 e0       	ldi	r18, 0x00	; 0
    4848:	3f ef       	ldi	r19, 0xFF	; 255
    484a:	4f e7       	ldi	r20, 0x7F	; 127
    484c:	57 e4       	ldi	r21, 0x47	; 71
    484e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4852:	18 16       	cp	r1, r24
    4854:	4c f5       	brge	.+82     	; 0x48a8 <BuzzerTOGGLE+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4856:	6b 85       	ldd	r22, Y+11	; 0x0b
    4858:	7c 85       	ldd	r23, Y+12	; 0x0c
    485a:	8d 85       	ldd	r24, Y+13	; 0x0d
    485c:	9e 85       	ldd	r25, Y+14	; 0x0e
    485e:	20 e0       	ldi	r18, 0x00	; 0
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	40 e2       	ldi	r20, 0x20	; 32
    4864:	51 e4       	ldi	r21, 0x41	; 65
    4866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486a:	dc 01       	movw	r26, r24
    486c:	cb 01       	movw	r24, r22
    486e:	bc 01       	movw	r22, r24
    4870:	cd 01       	movw	r24, r26
    4872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4876:	dc 01       	movw	r26, r24
    4878:	cb 01       	movw	r24, r22
    487a:	9e 83       	std	Y+6, r25	; 0x06
    487c:	8d 83       	std	Y+5, r24	; 0x05
    487e:	0f c0       	rjmp	.+30     	; 0x489e <BuzzerTOGGLE+0xdc>
    4880:	88 ec       	ldi	r24, 0xC8	; 200
    4882:	90 e0       	ldi	r25, 0x00	; 0
    4884:	9c 83       	std	Y+4, r25	; 0x04
    4886:	8b 83       	std	Y+3, r24	; 0x03
    4888:	8b 81       	ldd	r24, Y+3	; 0x03
    488a:	9c 81       	ldd	r25, Y+4	; 0x04
    488c:	01 97       	sbiw	r24, 0x01	; 1
    488e:	f1 f7       	brne	.-4      	; 0x488c <BuzzerTOGGLE+0xca>
    4890:	9c 83       	std	Y+4, r25	; 0x04
    4892:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4894:	8d 81       	ldd	r24, Y+5	; 0x05
    4896:	9e 81       	ldd	r25, Y+6	; 0x06
    4898:	01 97       	sbiw	r24, 0x01	; 1
    489a:	9e 83       	std	Y+6, r25	; 0x06
    489c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    489e:	8d 81       	ldd	r24, Y+5	; 0x05
    48a0:	9e 81       	ldd	r25, Y+6	; 0x06
    48a2:	00 97       	sbiw	r24, 0x00	; 0
    48a4:	69 f7       	brne	.-38     	; 0x4880 <BuzzerTOGGLE+0xbe>
    48a6:	14 c0       	rjmp	.+40     	; 0x48d0 <BuzzerTOGGLE+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48a8:	6f 81       	ldd	r22, Y+7	; 0x07
    48aa:	78 85       	ldd	r23, Y+8	; 0x08
    48ac:	89 85       	ldd	r24, Y+9	; 0x09
    48ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b4:	dc 01       	movw	r26, r24
    48b6:	cb 01       	movw	r24, r22
    48b8:	9e 83       	std	Y+6, r25	; 0x06
    48ba:	8d 83       	std	Y+5, r24	; 0x05
    48bc:	8d 81       	ldd	r24, Y+5	; 0x05
    48be:	9e 81       	ldd	r25, Y+6	; 0x06
    48c0:	9a 83       	std	Y+2, r25	; 0x02
    48c2:	89 83       	std	Y+1, r24	; 0x01
    48c4:	89 81       	ldd	r24, Y+1	; 0x01
    48c6:	9a 81       	ldd	r25, Y+2	; 0x02
    48c8:	01 97       	sbiw	r24, 0x01	; 1
    48ca:	f1 f7       	brne	.-4      	; 0x48c8 <BuzzerTOGGLE+0x106>
    48cc:	9a 83       	std	Y+2, r25	; 0x02
    48ce:	89 83       	std	Y+1, r24	; 0x01
	BuzzerOFF();
    48d0:	0e 94 d5 23 	call	0x47aa	; 0x47aa <BuzzerOFF>
}
    48d4:	60 96       	adiw	r28, 0x10	; 16
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	f8 94       	cli
    48da:	de bf       	out	0x3e, r29	; 62
    48dc:	0f be       	out	0x3f, r0	; 63
    48de:	cd bf       	out	0x3d, r28	; 61
    48e0:	cf 91       	pop	r28
    48e2:	df 91       	pop	r29
    48e4:	08 95       	ret

000048e6 <main>:
void SensorsReadings(u16* SensorsPtr);
void SensorsDisplay1(u16* SensorsPtr);
void SensorsDisplay2(u16* SensorsPtr);
void Cases(u16* SensorsPtr);
void UserDemand(char *command);
int main() {
    48e6:	af 92       	push	r10
    48e8:	bf 92       	push	r11
    48ea:	cf 92       	push	r12
    48ec:	df 92       	push	r13
    48ee:	ef 92       	push	r14
    48f0:	ff 92       	push	r15
    48f2:	0f 93       	push	r16
    48f4:	1f 93       	push	r17
    48f6:	df 93       	push	r29
    48f8:	cf 93       	push	r28
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
    48fe:	c0 5a       	subi	r28, 0xA0	; 160
    4900:	d0 40       	sbci	r29, 0x00	; 0
    4902:	0f b6       	in	r0, 0x3f	; 63
    4904:	f8 94       	cli
    4906:	de bf       	out	0x3e, r29	; 62
    4908:	0f be       	out	0x3f, r0	; 63
    490a:	cd bf       	out	0x3d, r28	; 61

	/*Pin Directions*/
	DDRA = 0b00000011;
    490c:	ea e3       	ldi	r30, 0x3A	; 58
    490e:	f0 e0       	ldi	r31, 0x00	; 0
    4910:	83 e0       	ldi	r24, 0x03	; 3
    4912:	80 83       	st	Z, r24
	DDRB = 0b11111111;
    4914:	e7 e3       	ldi	r30, 0x37	; 55
    4916:	f0 e0       	ldi	r31, 0x00	; 0
    4918:	8f ef       	ldi	r24, 0xFF	; 255
    491a:	80 83       	st	Z, r24
	DDRC = 0b11111111;
    491c:	e4 e3       	ldi	r30, 0x34	; 52
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	8f ef       	ldi	r24, 0xFF	; 255
    4922:	80 83       	st	Z, r24
	DDRD = 0b11110010;
    4924:	e1 e3       	ldi	r30, 0x31	; 49
    4926:	f0 e0       	ldi	r31, 0x00	; 0
    4928:	82 ef       	ldi	r24, 0xF2	; 242
    492a:	80 83       	st	Z, r24
	//Pulling-up emergency bottoms
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN , OUTPUT);
    492c:	83 e0       	ldi	r24, 0x03	; 3
    492e:	62 e0       	ldi	r22, 0x02	; 2
    4930:	41 e0       	ldi	r20, 0x01	; 1
    4932:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN_STOP , OUTPUT);
    4936:	83 e0       	ldi	r24, 0x03	; 3
    4938:	63 e0       	ldi	r22, 0x03	; 3
    493a:	41 e0       	ldi	r20, 0x01	; 1
    493c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>


	//Peripherals initialization
	Globle_Intrrupt_Enable();
    4940:	0e 94 ed 1b 	call	0x37da	; 0x37da <Globle_Intrrupt_Enable>
	INT0_init();
    4944:	0e 94 09 1c 	call	0x3812	; 0x3812 <INT0_init>
	INT1_init();
    4948:	0e 94 25 1c 	call	0x384a	; 0x384a <INT1_init>
	LCD8Bit_init();
    494c:	0e 94 77 22 	call	0x44ee	; 0x44ee <LCD8Bit_init>
	UART_init();
    4950:	0e 94 86 19 	call	0x330c	; 0x330c <UART_init>
	ADC_init();
    4954:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <ADC_init>
    Timer1_init();
    4958:	0e 94 a7 1a 	call	0x354e	; 0x354e <Timer1_init>
    Timer2_init();
    495c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <Timer2_init>
	/******************   Enter the system   *******************/
	/***********************************************************/
	//Entering the username (username phase)

	//Servo close (door)
    ServoAngle(closeangle);
    4960:	80 e0       	ldi	r24, 0x00	; 0
    4962:	90 e0       	ldi	r25, 0x00	; 0
    4964:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <ServoAngle>

	for(u8 j=1;j<4;j++){
    4968:	fe 01       	movw	r30, r28
    496a:	e0 56       	subi	r30, 0x60	; 96
    496c:	ff 4f       	sbci	r31, 0xFF	; 255
    496e:	81 e0       	ldi	r24, 0x01	; 1
    4970:	80 83       	st	Z, r24
    4972:	5d c4       	rjmp	.+2234   	; 0x522e <main+0x948>
    LCD_Send_String("Enter your");
    4974:	85 e6       	ldi	r24, 0x65	; 101
    4976:	90 e0       	ldi	r25, 0x00	; 0
    4978:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
	LCD_GOTOXY(0,1);
    497c:	80 e0       	ldi	r24, 0x00	; 0
    497e:	61 e0       	ldi	r22, 0x01	; 1
    4980:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
    LCD_Send_String("Username");
    4984:	80 e7       	ldi	r24, 0x70	; 112
    4986:	90 e0       	ldi	r25, 0x00	; 0
    4988:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    498c:	fe 01       	movw	r30, r28
    498e:	e9 56       	subi	r30, 0x69	; 105
    4990:	ff 4f       	sbci	r31, 0xFF	; 255
    4992:	80 e0       	ldi	r24, 0x00	; 0
    4994:	90 e8       	ldi	r25, 0x80	; 128
    4996:	ab e3       	ldi	r26, 0x3B	; 59
    4998:	b5 e4       	ldi	r27, 0x45	; 69
    499a:	80 83       	st	Z, r24
    499c:	91 83       	std	Z+1, r25	; 0x01
    499e:	a2 83       	std	Z+2, r26	; 0x02
    49a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    49a2:	8e 01       	movw	r16, r28
    49a4:	0d 56       	subi	r16, 0x6D	; 109
    49a6:	1f 4f       	sbci	r17, 0xFF	; 255
    49a8:	fe 01       	movw	r30, r28
    49aa:	e9 56       	subi	r30, 0x69	; 105
    49ac:	ff 4f       	sbci	r31, 0xFF	; 255
    49ae:	60 81       	ld	r22, Z
    49b0:	71 81       	ldd	r23, Z+1	; 0x01
    49b2:	82 81       	ldd	r24, Z+2	; 0x02
    49b4:	93 81       	ldd	r25, Z+3	; 0x03
    49b6:	20 e0       	ldi	r18, 0x00	; 0
    49b8:	30 e0       	ldi	r19, 0x00	; 0
    49ba:	4a ef       	ldi	r20, 0xFA	; 250
    49bc:	54 e4       	ldi	r21, 0x44	; 68
    49be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49c2:	dc 01       	movw	r26, r24
    49c4:	cb 01       	movw	r24, r22
    49c6:	f8 01       	movw	r30, r16
    49c8:	80 83       	st	Z, r24
    49ca:	91 83       	std	Z+1, r25	; 0x01
    49cc:	a2 83       	std	Z+2, r26	; 0x02
    49ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49d0:	fe 01       	movw	r30, r28
    49d2:	ed 56       	subi	r30, 0x6D	; 109
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	60 81       	ld	r22, Z
    49d8:	71 81       	ldd	r23, Z+1	; 0x01
    49da:	82 81       	ldd	r24, Z+2	; 0x02
    49dc:	93 81       	ldd	r25, Z+3	; 0x03
    49de:	20 e0       	ldi	r18, 0x00	; 0
    49e0:	30 e0       	ldi	r19, 0x00	; 0
    49e2:	40 e8       	ldi	r20, 0x80	; 128
    49e4:	5f e3       	ldi	r21, 0x3F	; 63
    49e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49ea:	88 23       	and	r24, r24
    49ec:	44 f4       	brge	.+16     	; 0x49fe <main+0x118>
		__ticks = 1;
    49ee:	fe 01       	movw	r30, r28
    49f0:	ef 56       	subi	r30, 0x6F	; 111
    49f2:	ff 4f       	sbci	r31, 0xFF	; 255
    49f4:	81 e0       	ldi	r24, 0x01	; 1
    49f6:	90 e0       	ldi	r25, 0x00	; 0
    49f8:	91 83       	std	Z+1, r25	; 0x01
    49fa:	80 83       	st	Z, r24
    49fc:	64 c0       	rjmp	.+200    	; 0x4ac6 <main+0x1e0>
	else if (__tmp > 65535)
    49fe:	fe 01       	movw	r30, r28
    4a00:	ed 56       	subi	r30, 0x6D	; 109
    4a02:	ff 4f       	sbci	r31, 0xFF	; 255
    4a04:	60 81       	ld	r22, Z
    4a06:	71 81       	ldd	r23, Z+1	; 0x01
    4a08:	82 81       	ldd	r24, Z+2	; 0x02
    4a0a:	93 81       	ldd	r25, Z+3	; 0x03
    4a0c:	20 e0       	ldi	r18, 0x00	; 0
    4a0e:	3f ef       	ldi	r19, 0xFF	; 255
    4a10:	4f e7       	ldi	r20, 0x7F	; 127
    4a12:	57 e4       	ldi	r21, 0x47	; 71
    4a14:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a18:	18 16       	cp	r1, r24
    4a1a:	0c f0       	brlt	.+2      	; 0x4a1e <main+0x138>
    4a1c:	43 c0       	rjmp	.+134    	; 0x4aa4 <main+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a1e:	fe 01       	movw	r30, r28
    4a20:	e9 56       	subi	r30, 0x69	; 105
    4a22:	ff 4f       	sbci	r31, 0xFF	; 255
    4a24:	60 81       	ld	r22, Z
    4a26:	71 81       	ldd	r23, Z+1	; 0x01
    4a28:	82 81       	ldd	r24, Z+2	; 0x02
    4a2a:	93 81       	ldd	r25, Z+3	; 0x03
    4a2c:	20 e0       	ldi	r18, 0x00	; 0
    4a2e:	30 e0       	ldi	r19, 0x00	; 0
    4a30:	40 e2       	ldi	r20, 0x20	; 32
    4a32:	51 e4       	ldi	r21, 0x41	; 65
    4a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a38:	dc 01       	movw	r26, r24
    4a3a:	cb 01       	movw	r24, r22
    4a3c:	8e 01       	movw	r16, r28
    4a3e:	0f 56       	subi	r16, 0x6F	; 111
    4a40:	1f 4f       	sbci	r17, 0xFF	; 255
    4a42:	bc 01       	movw	r22, r24
    4a44:	cd 01       	movw	r24, r26
    4a46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a4a:	dc 01       	movw	r26, r24
    4a4c:	cb 01       	movw	r24, r22
    4a4e:	f8 01       	movw	r30, r16
    4a50:	91 83       	std	Z+1, r25	; 0x01
    4a52:	80 83       	st	Z, r24
    4a54:	1f c0       	rjmp	.+62     	; 0x4a94 <main+0x1ae>
    4a56:	fe 01       	movw	r30, r28
    4a58:	e1 57       	subi	r30, 0x71	; 113
    4a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5c:	88 ec       	ldi	r24, 0xC8	; 200
    4a5e:	90 e0       	ldi	r25, 0x00	; 0
    4a60:	91 83       	std	Z+1, r25	; 0x01
    4a62:	80 83       	st	Z, r24
    4a64:	fe 01       	movw	r30, r28
    4a66:	e1 57       	subi	r30, 0x71	; 113
    4a68:	ff 4f       	sbci	r31, 0xFF	; 255
    4a6a:	80 81       	ld	r24, Z
    4a6c:	91 81       	ldd	r25, Z+1	; 0x01
    4a6e:	01 97       	sbiw	r24, 0x01	; 1
    4a70:	f1 f7       	brne	.-4      	; 0x4a6e <main+0x188>
    4a72:	fe 01       	movw	r30, r28
    4a74:	e1 57       	subi	r30, 0x71	; 113
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	91 83       	std	Z+1, r25	; 0x01
    4a7a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a7c:	de 01       	movw	r26, r28
    4a7e:	af 56       	subi	r26, 0x6F	; 111
    4a80:	bf 4f       	sbci	r27, 0xFF	; 255
    4a82:	fe 01       	movw	r30, r28
    4a84:	ef 56       	subi	r30, 0x6F	; 111
    4a86:	ff 4f       	sbci	r31, 0xFF	; 255
    4a88:	80 81       	ld	r24, Z
    4a8a:	91 81       	ldd	r25, Z+1	; 0x01
    4a8c:	01 97       	sbiw	r24, 0x01	; 1
    4a8e:	11 96       	adiw	r26, 0x01	; 1
    4a90:	9c 93       	st	X, r25
    4a92:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a94:	fe 01       	movw	r30, r28
    4a96:	ef 56       	subi	r30, 0x6F	; 111
    4a98:	ff 4f       	sbci	r31, 0xFF	; 255
    4a9a:	80 81       	ld	r24, Z
    4a9c:	91 81       	ldd	r25, Z+1	; 0x01
    4a9e:	00 97       	sbiw	r24, 0x00	; 0
    4aa0:	d1 f6       	brne	.-76     	; 0x4a56 <main+0x170>
    4aa2:	27 c0       	rjmp	.+78     	; 0x4af2 <main+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4aa4:	8e 01       	movw	r16, r28
    4aa6:	0f 56       	subi	r16, 0x6F	; 111
    4aa8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aaa:	fe 01       	movw	r30, r28
    4aac:	ed 56       	subi	r30, 0x6D	; 109
    4aae:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab0:	60 81       	ld	r22, Z
    4ab2:	71 81       	ldd	r23, Z+1	; 0x01
    4ab4:	82 81       	ldd	r24, Z+2	; 0x02
    4ab6:	93 81       	ldd	r25, Z+3	; 0x03
    4ab8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4abc:	dc 01       	movw	r26, r24
    4abe:	cb 01       	movw	r24, r22
    4ac0:	f8 01       	movw	r30, r16
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	80 83       	st	Z, r24
    4ac6:	de 01       	movw	r26, r28
    4ac8:	a3 57       	subi	r26, 0x73	; 115
    4aca:	bf 4f       	sbci	r27, 0xFF	; 255
    4acc:	fe 01       	movw	r30, r28
    4ace:	ef 56       	subi	r30, 0x6F	; 111
    4ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad2:	80 81       	ld	r24, Z
    4ad4:	91 81       	ldd	r25, Z+1	; 0x01
    4ad6:	8d 93       	st	X+, r24
    4ad8:	9c 93       	st	X, r25
    4ada:	fe 01       	movw	r30, r28
    4adc:	e3 57       	subi	r30, 0x73	; 115
    4ade:	ff 4f       	sbci	r31, 0xFF	; 255
    4ae0:	80 81       	ld	r24, Z
    4ae2:	91 81       	ldd	r25, Z+1	; 0x01
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <main+0x1fe>
    4ae8:	fe 01       	movw	r30, r28
    4aea:	e3 57       	subi	r30, 0x73	; 115
    4aec:	ff 4f       	sbci	r31, 0xFF	; 255
    4aee:	91 83       	std	Z+1, r25	; 0x01
    4af0:	80 83       	st	Z, r24
    _delay_ms(3000);
    LCD8Bit_Send_Command(0x01);
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
    LCD_Send_String("Username:");
    4af8:	89 e7       	ldi	r24, 0x79	; 121
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
	BluetoothRead(username_input);
    4b00:	8a e3       	ldi	r24, 0x3A	; 58
    4b02:	97 e0       	ldi	r25, 0x07	; 7
    4b04:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <BluetoothRead>
	for(u8 i = 0;i<10;i++){
    4b08:	fe 01       	movw	r30, r28
    4b0a:	e1 56       	subi	r30, 0x61	; 97
    4b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0e:	10 82       	st	Z, r1
    4b10:	e5 c0       	rjmp	.+458    	; 0x4cdc <main+0x3f6>
	if(strcmp(username_input,users[i].username)==0){
    4b12:	fe 01       	movw	r30, r28
    4b14:	e1 56       	subi	r30, 0x61	; 97
    4b16:	ff 4f       	sbci	r31, 0xFF	; 255
    4b18:	80 81       	ld	r24, Z
    4b1a:	88 2f       	mov	r24, r24
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	88 0f       	add	r24, r24
    4b20:	99 1f       	adc	r25, r25
    4b22:	9c 01       	movw	r18, r24
    4b24:	22 0f       	add	r18, r18
    4b26:	33 1f       	adc	r19, r19
    4b28:	22 0f       	add	r18, r18
    4b2a:	33 1f       	adc	r19, r19
    4b2c:	82 0f       	add	r24, r18
    4b2e:	93 1f       	adc	r25, r19
    4b30:	9c 01       	movw	r18, r24
    4b32:	20 5c       	subi	r18, 0xC0	; 192
    4b34:	3d 4f       	sbci	r19, 0xFD	; 253
    4b36:	8a e3       	ldi	r24, 0x3A	; 58
    4b38:	97 e0       	ldi	r25, 0x07	; 7
    4b3a:	b9 01       	movw	r22, r18
    4b3c:	0e 94 45 30 	call	0x608a	; 0x608a <strcmp>
    4b40:	00 97       	sbiw	r24, 0x00	; 0
    4b42:	09 f0       	breq	.+2      	; 0x4b46 <main+0x260>
    4b44:	c2 c0       	rjmp	.+388    	; 0x4cca <main+0x3e4>
	    LCD8Bit_Send_Command(0x01);
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    LCD_Send_String("OK");
    4b4c:	83 e8       	ldi	r24, 0x83	; 131
    4b4e:	90 e0       	ldi	r25, 0x00	; 0
    4b50:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
	    usernum = i;
    4b54:	fe 01       	movw	r30, r28
    4b56:	e1 56       	subi	r30, 0x61	; 97
    4b58:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5a:	80 81       	ld	r24, Z
    4b5c:	80 93 a4 02 	sts	0x02A4, r24
    4b60:	fe 01       	movw	r30, r28
    4b62:	e7 57       	subi	r30, 0x77	; 119
    4b64:	ff 4f       	sbci	r31, 0xFF	; 255
    4b66:	80 e0       	ldi	r24, 0x00	; 0
    4b68:	90 e8       	ldi	r25, 0x80	; 128
    4b6a:	ab e3       	ldi	r26, 0x3B	; 59
    4b6c:	b5 e4       	ldi	r27, 0x45	; 69
    4b6e:	80 83       	st	Z, r24
    4b70:	91 83       	std	Z+1, r25	; 0x01
    4b72:	a2 83       	std	Z+2, r26	; 0x02
    4b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4b76:	8e 01       	movw	r16, r28
    4b78:	0b 57       	subi	r16, 0x7B	; 123
    4b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	e7 57       	subi	r30, 0x77	; 119
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	60 81       	ld	r22, Z
    4b84:	71 81       	ldd	r23, Z+1	; 0x01
    4b86:	82 81       	ldd	r24, Z+2	; 0x02
    4b88:	93 81       	ldd	r25, Z+3	; 0x03
    4b8a:	20 e0       	ldi	r18, 0x00	; 0
    4b8c:	30 e0       	ldi	r19, 0x00	; 0
    4b8e:	4a ef       	ldi	r20, 0xFA	; 250
    4b90:	54 e4       	ldi	r21, 0x44	; 68
    4b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b96:	dc 01       	movw	r26, r24
    4b98:	cb 01       	movw	r24, r22
    4b9a:	f8 01       	movw	r30, r16
    4b9c:	80 83       	st	Z, r24
    4b9e:	91 83       	std	Z+1, r25	; 0x01
    4ba0:	a2 83       	std	Z+2, r26	; 0x02
    4ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ba4:	fe 01       	movw	r30, r28
    4ba6:	eb 57       	subi	r30, 0x7B	; 123
    4ba8:	ff 4f       	sbci	r31, 0xFF	; 255
    4baa:	60 81       	ld	r22, Z
    4bac:	71 81       	ldd	r23, Z+1	; 0x01
    4bae:	82 81       	ldd	r24, Z+2	; 0x02
    4bb0:	93 81       	ldd	r25, Z+3	; 0x03
    4bb2:	20 e0       	ldi	r18, 0x00	; 0
    4bb4:	30 e0       	ldi	r19, 0x00	; 0
    4bb6:	40 e8       	ldi	r20, 0x80	; 128
    4bb8:	5f e3       	ldi	r21, 0x3F	; 63
    4bba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4bbe:	88 23       	and	r24, r24
    4bc0:	44 f4       	brge	.+16     	; 0x4bd2 <main+0x2ec>
		__ticks = 1;
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	ed 57       	subi	r30, 0x7D	; 125
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	81 e0       	ldi	r24, 0x01	; 1
    4bca:	90 e0       	ldi	r25, 0x00	; 0
    4bcc:	91 83       	std	Z+1, r25	; 0x01
    4bce:	80 83       	st	Z, r24
    4bd0:	64 c0       	rjmp	.+200    	; 0x4c9a <main+0x3b4>
	else if (__tmp > 65535)
    4bd2:	fe 01       	movw	r30, r28
    4bd4:	eb 57       	subi	r30, 0x7B	; 123
    4bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd8:	60 81       	ld	r22, Z
    4bda:	71 81       	ldd	r23, Z+1	; 0x01
    4bdc:	82 81       	ldd	r24, Z+2	; 0x02
    4bde:	93 81       	ldd	r25, Z+3	; 0x03
    4be0:	20 e0       	ldi	r18, 0x00	; 0
    4be2:	3f ef       	ldi	r19, 0xFF	; 255
    4be4:	4f e7       	ldi	r20, 0x7F	; 127
    4be6:	57 e4       	ldi	r21, 0x47	; 71
    4be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4bec:	18 16       	cp	r1, r24
    4bee:	0c f0       	brlt	.+2      	; 0x4bf2 <main+0x30c>
    4bf0:	43 c0       	rjmp	.+134    	; 0x4c78 <main+0x392>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e7 57       	subi	r30, 0x77	; 119
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	60 81       	ld	r22, Z
    4bfa:	71 81       	ldd	r23, Z+1	; 0x01
    4bfc:	82 81       	ldd	r24, Z+2	; 0x02
    4bfe:	93 81       	ldd	r25, Z+3	; 0x03
    4c00:	20 e0       	ldi	r18, 0x00	; 0
    4c02:	30 e0       	ldi	r19, 0x00	; 0
    4c04:	40 e2       	ldi	r20, 0x20	; 32
    4c06:	51 e4       	ldi	r21, 0x41	; 65
    4c08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c0c:	dc 01       	movw	r26, r24
    4c0e:	cb 01       	movw	r24, r22
    4c10:	8e 01       	movw	r16, r28
    4c12:	0d 57       	subi	r16, 0x7D	; 125
    4c14:	1f 4f       	sbci	r17, 0xFF	; 255
    4c16:	bc 01       	movw	r22, r24
    4c18:	cd 01       	movw	r24, r26
    4c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	f8 01       	movw	r30, r16
    4c24:	91 83       	std	Z+1, r25	; 0x01
    4c26:	80 83       	st	Z, r24
    4c28:	1f c0       	rjmp	.+62     	; 0x4c68 <main+0x382>
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ef 57       	subi	r30, 0x7F	; 127
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	88 ec       	ldi	r24, 0xC8	; 200
    4c32:	90 e0       	ldi	r25, 0x00	; 0
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	80 83       	st	Z, r24
    4c38:	fe 01       	movw	r30, r28
    4c3a:	ef 57       	subi	r30, 0x7F	; 127
    4c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c3e:	80 81       	ld	r24, Z
    4c40:	91 81       	ldd	r25, Z+1	; 0x01
    4c42:	01 97       	sbiw	r24, 0x01	; 1
    4c44:	f1 f7       	brne	.-4      	; 0x4c42 <main+0x35c>
    4c46:	fe 01       	movw	r30, r28
    4c48:	ef 57       	subi	r30, 0x7F	; 127
    4c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4c:	91 83       	std	Z+1, r25	; 0x01
    4c4e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c50:	de 01       	movw	r26, r28
    4c52:	ad 57       	subi	r26, 0x7D	; 125
    4c54:	bf 4f       	sbci	r27, 0xFF	; 255
    4c56:	fe 01       	movw	r30, r28
    4c58:	ed 57       	subi	r30, 0x7D	; 125
    4c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c5c:	80 81       	ld	r24, Z
    4c5e:	91 81       	ldd	r25, Z+1	; 0x01
    4c60:	01 97       	sbiw	r24, 0x01	; 1
    4c62:	11 96       	adiw	r26, 0x01	; 1
    4c64:	9c 93       	st	X, r25
    4c66:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c68:	fe 01       	movw	r30, r28
    4c6a:	ed 57       	subi	r30, 0x7D	; 125
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	80 81       	ld	r24, Z
    4c70:	91 81       	ldd	r25, Z+1	; 0x01
    4c72:	00 97       	sbiw	r24, 0x00	; 0
    4c74:	d1 f6       	brne	.-76     	; 0x4c2a <main+0x344>
    4c76:	39 c0       	rjmp	.+114    	; 0x4cea <main+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c78:	8e 01       	movw	r16, r28
    4c7a:	0d 57       	subi	r16, 0x7D	; 125
    4c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c7e:	fe 01       	movw	r30, r28
    4c80:	eb 57       	subi	r30, 0x7B	; 123
    4c82:	ff 4f       	sbci	r31, 0xFF	; 255
    4c84:	60 81       	ld	r22, Z
    4c86:	71 81       	ldd	r23, Z+1	; 0x01
    4c88:	82 81       	ldd	r24, Z+2	; 0x02
    4c8a:	93 81       	ldd	r25, Z+3	; 0x03
    4c8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c90:	dc 01       	movw	r26, r24
    4c92:	cb 01       	movw	r24, r22
    4c94:	f8 01       	movw	r30, r16
    4c96:	91 83       	std	Z+1, r25	; 0x01
    4c98:	80 83       	st	Z, r24
    4c9a:	de 01       	movw	r26, r28
    4c9c:	a1 58       	subi	r26, 0x81	; 129
    4c9e:	bf 4f       	sbci	r27, 0xFF	; 255
    4ca0:	fe 01       	movw	r30, r28
    4ca2:	ed 57       	subi	r30, 0x7D	; 125
    4ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ca6:	80 81       	ld	r24, Z
    4ca8:	91 81       	ldd	r25, Z+1	; 0x01
    4caa:	11 96       	adiw	r26, 0x01	; 1
    4cac:	9c 93       	st	X, r25
    4cae:	8e 93       	st	-X, r24
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	e1 58       	subi	r30, 0x81	; 129
    4cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cb6:	80 81       	ld	r24, Z
    4cb8:	91 81       	ldd	r25, Z+1	; 0x01
    4cba:	01 97       	sbiw	r24, 0x01	; 1
    4cbc:	f1 f7       	brne	.-4      	; 0x4cba <main+0x3d4>
    4cbe:	fe 01       	movw	r30, r28
    4cc0:	e1 58       	subi	r30, 0x81	; 129
    4cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cc4:	91 83       	std	Z+1, r25	; 0x01
    4cc6:	80 83       	st	Z, r24
    4cc8:	10 c0       	rjmp	.+32     	; 0x4cea <main+0x404>
    LCD_Send_String("Username");
    _delay_ms(3000);
    LCD8Bit_Send_Command(0x01);
    LCD_Send_String("Username:");
	BluetoothRead(username_input);
	for(u8 i = 0;i<10;i++){
    4cca:	de 01       	movw	r26, r28
    4ccc:	a1 56       	subi	r26, 0x61	; 97
    4cce:	bf 4f       	sbci	r27, 0xFF	; 255
    4cd0:	fe 01       	movw	r30, r28
    4cd2:	e1 56       	subi	r30, 0x61	; 97
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	80 81       	ld	r24, Z
    4cd8:	8f 5f       	subi	r24, 0xFF	; 255
    4cda:	8c 93       	st	X, r24
    4cdc:	fe 01       	movw	r30, r28
    4cde:	e1 56       	subi	r30, 0x61	; 97
    4ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ce2:	80 81       	ld	r24, Z
    4ce4:	8a 30       	cpi	r24, 0x0A	; 10
    4ce6:	08 f4       	brcc	.+2      	; 0x4cea <main+0x404>
    4ce8:	14 cf       	rjmp	.-472    	; 0x4b12 <main+0x22c>
	    usernum = i;
	    _delay_ms(3000);
	    break;
	    }
	  }
	if(usernum <10 && usernum>=0){
    4cea:	80 91 a4 02 	lds	r24, 0x02A4
    4cee:	8a 30       	cpi	r24, 0x0A	; 10
    4cf0:	08 f4       	brcc	.+2      	; 0x4cf4 <main+0x40e>
    4cf2:	a4 c2       	rjmp	.+1352   	; 0x523c <main+0x956>

      break;

	 }
	if((usernum >9 ||usernum<0) && j<3){
    4cf4:	80 91 a4 02 	lds	r24, 0x02A4
    4cf8:	8a 30       	cpi	r24, 0x0A	; 10
    4cfa:	08 f4       	brcc	.+2      	; 0x4cfe <main+0x418>
    4cfc:	d8 c0       	rjmp	.+432    	; 0x4eae <main+0x5c8>
    4cfe:	fe 01       	movw	r30, r28
    4d00:	e0 56       	subi	r30, 0x60	; 96
    4d02:	ff 4f       	sbci	r31, 0xFF	; 255
    4d04:	80 81       	ld	r24, Z
    4d06:	83 30       	cpi	r24, 0x03	; 3
    4d08:	08 f0       	brcs	.+2      	; 0x4d0c <main+0x426>
    4d0a:	d1 c0       	rjmp	.+418    	; 0x4eae <main+0x5c8>
	    LCD8Bit_Send_Command(0x01);
    4d0c:	81 e0       	ldi	r24, 0x01	; 1
    4d0e:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    LCD_Send_String("Wrong Username");
    4d12:	86 e8       	ldi	r24, 0x86	; 134
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_GOTOXY(0,1);
    4d1a:	80 e0       	ldi	r24, 0x00	; 0
    4d1c:	61 e0       	ldi	r22, 0x01	; 1
    4d1e:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
		LCD_Send_Int(3-j);
    4d22:	fe 01       	movw	r30, r28
    4d24:	e0 56       	subi	r30, 0x60	; 96
    4d26:	ff 4f       	sbci	r31, 0xFF	; 255
    4d28:	80 81       	ld	r24, Z
    4d2a:	28 2f       	mov	r18, r24
    4d2c:	30 e0       	ldi	r19, 0x00	; 0
    4d2e:	83 e0       	ldi	r24, 0x03	; 3
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	82 1b       	sub	r24, r18
    4d34:	93 0b       	sbc	r25, r19
    4d36:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
	    LCD_Send_String(" tries left!");
    4d3a:	85 e9       	ldi	r24, 0x95	; 149
    4d3c:	90 e0       	ldi	r25, 0x00	; 0
    4d3e:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    4d42:	fe 01       	movw	r30, r28
    4d44:	e5 58       	subi	r30, 0x85	; 133
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	80 e0       	ldi	r24, 0x00	; 0
    4d4a:	90 e4       	ldi	r25, 0x40	; 64
    4d4c:	ac e9       	ldi	r26, 0x9C	; 156
    4d4e:	b5 e4       	ldi	r27, 0x45	; 69
    4d50:	80 83       	st	Z, r24
    4d52:	91 83       	std	Z+1, r25	; 0x01
    4d54:	a2 83       	std	Z+2, r26	; 0x02
    4d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4d58:	8e 01       	movw	r16, r28
    4d5a:	09 58       	subi	r16, 0x89	; 137
    4d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4d5e:	fe 01       	movw	r30, r28
    4d60:	e5 58       	subi	r30, 0x85	; 133
    4d62:	ff 4f       	sbci	r31, 0xFF	; 255
    4d64:	60 81       	ld	r22, Z
    4d66:	71 81       	ldd	r23, Z+1	; 0x01
    4d68:	82 81       	ldd	r24, Z+2	; 0x02
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	20 e0       	ldi	r18, 0x00	; 0
    4d6e:	30 e0       	ldi	r19, 0x00	; 0
    4d70:	4a ef       	ldi	r20, 0xFA	; 250
    4d72:	54 e4       	ldi	r21, 0x44	; 68
    4d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d78:	dc 01       	movw	r26, r24
    4d7a:	cb 01       	movw	r24, r22
    4d7c:	f8 01       	movw	r30, r16
    4d7e:	80 83       	st	Z, r24
    4d80:	91 83       	std	Z+1, r25	; 0x01
    4d82:	a2 83       	std	Z+2, r26	; 0x02
    4d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4d86:	fe 01       	movw	r30, r28
    4d88:	e9 58       	subi	r30, 0x89	; 137
    4d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8c:	60 81       	ld	r22, Z
    4d8e:	71 81       	ldd	r23, Z+1	; 0x01
    4d90:	82 81       	ldd	r24, Z+2	; 0x02
    4d92:	93 81       	ldd	r25, Z+3	; 0x03
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	40 e8       	ldi	r20, 0x80	; 128
    4d9a:	5f e3       	ldi	r21, 0x3F	; 63
    4d9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4da0:	88 23       	and	r24, r24
    4da2:	44 f4       	brge	.+16     	; 0x4db4 <main+0x4ce>
		__ticks = 1;
    4da4:	fe 01       	movw	r30, r28
    4da6:	eb 58       	subi	r30, 0x8B	; 139
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	81 e0       	ldi	r24, 0x01	; 1
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	91 83       	std	Z+1, r25	; 0x01
    4db0:	80 83       	st	Z, r24
    4db2:	64 c0       	rjmp	.+200    	; 0x4e7c <main+0x596>
	else if (__tmp > 65535)
    4db4:	fe 01       	movw	r30, r28
    4db6:	e9 58       	subi	r30, 0x89	; 137
    4db8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dba:	60 81       	ld	r22, Z
    4dbc:	71 81       	ldd	r23, Z+1	; 0x01
    4dbe:	82 81       	ldd	r24, Z+2	; 0x02
    4dc0:	93 81       	ldd	r25, Z+3	; 0x03
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	3f ef       	ldi	r19, 0xFF	; 255
    4dc6:	4f e7       	ldi	r20, 0x7F	; 127
    4dc8:	57 e4       	ldi	r21, 0x47	; 71
    4dca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4dce:	18 16       	cp	r1, r24
    4dd0:	0c f0       	brlt	.+2      	; 0x4dd4 <main+0x4ee>
    4dd2:	43 c0       	rjmp	.+134    	; 0x4e5a <main+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e5 58       	subi	r30, 0x85	; 133
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	60 81       	ld	r22, Z
    4ddc:	71 81       	ldd	r23, Z+1	; 0x01
    4dde:	82 81       	ldd	r24, Z+2	; 0x02
    4de0:	93 81       	ldd	r25, Z+3	; 0x03
    4de2:	20 e0       	ldi	r18, 0x00	; 0
    4de4:	30 e0       	ldi	r19, 0x00	; 0
    4de6:	40 e2       	ldi	r20, 0x20	; 32
    4de8:	51 e4       	ldi	r21, 0x41	; 65
    4dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dee:	dc 01       	movw	r26, r24
    4df0:	cb 01       	movw	r24, r22
    4df2:	8e 01       	movw	r16, r28
    4df4:	0b 58       	subi	r16, 0x8B	; 139
    4df6:	1f 4f       	sbci	r17, 0xFF	; 255
    4df8:	bc 01       	movw	r22, r24
    4dfa:	cd 01       	movw	r24, r26
    4dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e00:	dc 01       	movw	r26, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	f8 01       	movw	r30, r16
    4e06:	91 83       	std	Z+1, r25	; 0x01
    4e08:	80 83       	st	Z, r24
    4e0a:	1f c0       	rjmp	.+62     	; 0x4e4a <main+0x564>
    4e0c:	fe 01       	movw	r30, r28
    4e0e:	ed 58       	subi	r30, 0x8D	; 141
    4e10:	ff 4f       	sbci	r31, 0xFF	; 255
    4e12:	88 ec       	ldi	r24, 0xC8	; 200
    4e14:	90 e0       	ldi	r25, 0x00	; 0
    4e16:	91 83       	std	Z+1, r25	; 0x01
    4e18:	80 83       	st	Z, r24
    4e1a:	fe 01       	movw	r30, r28
    4e1c:	ed 58       	subi	r30, 0x8D	; 141
    4e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e20:	80 81       	ld	r24, Z
    4e22:	91 81       	ldd	r25, Z+1	; 0x01
    4e24:	01 97       	sbiw	r24, 0x01	; 1
    4e26:	f1 f7       	brne	.-4      	; 0x4e24 <main+0x53e>
    4e28:	fe 01       	movw	r30, r28
    4e2a:	ed 58       	subi	r30, 0x8D	; 141
    4e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e2e:	91 83       	std	Z+1, r25	; 0x01
    4e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e32:	de 01       	movw	r26, r28
    4e34:	ab 58       	subi	r26, 0x8B	; 139
    4e36:	bf 4f       	sbci	r27, 0xFF	; 255
    4e38:	fe 01       	movw	r30, r28
    4e3a:	eb 58       	subi	r30, 0x8B	; 139
    4e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3e:	80 81       	ld	r24, Z
    4e40:	91 81       	ldd	r25, Z+1	; 0x01
    4e42:	01 97       	sbiw	r24, 0x01	; 1
    4e44:	11 96       	adiw	r26, 0x01	; 1
    4e46:	9c 93       	st	X, r25
    4e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e4a:	fe 01       	movw	r30, r28
    4e4c:	eb 58       	subi	r30, 0x8B	; 139
    4e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e50:	80 81       	ld	r24, Z
    4e52:	91 81       	ldd	r25, Z+1	; 0x01
    4e54:	00 97       	sbiw	r24, 0x00	; 0
    4e56:	d1 f6       	brne	.-76     	; 0x4e0c <main+0x526>
    4e58:	27 c0       	rjmp	.+78     	; 0x4ea8 <main+0x5c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e5a:	8e 01       	movw	r16, r28
    4e5c:	0b 58       	subi	r16, 0x8B	; 139
    4e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4e60:	fe 01       	movw	r30, r28
    4e62:	e9 58       	subi	r30, 0x89	; 137
    4e64:	ff 4f       	sbci	r31, 0xFF	; 255
    4e66:	60 81       	ld	r22, Z
    4e68:	71 81       	ldd	r23, Z+1	; 0x01
    4e6a:	82 81       	ldd	r24, Z+2	; 0x02
    4e6c:	93 81       	ldd	r25, Z+3	; 0x03
    4e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e72:	dc 01       	movw	r26, r24
    4e74:	cb 01       	movw	r24, r22
    4e76:	f8 01       	movw	r30, r16
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
    4e7c:	de 01       	movw	r26, r28
    4e7e:	af 58       	subi	r26, 0x8F	; 143
    4e80:	bf 4f       	sbci	r27, 0xFF	; 255
    4e82:	fe 01       	movw	r30, r28
    4e84:	eb 58       	subi	r30, 0x8B	; 139
    4e86:	ff 4f       	sbci	r31, 0xFF	; 255
    4e88:	80 81       	ld	r24, Z
    4e8a:	91 81       	ldd	r25, Z+1	; 0x01
    4e8c:	8d 93       	st	X+, r24
    4e8e:	9c 93       	st	X, r25
    4e90:	fe 01       	movw	r30, r28
    4e92:	ef 58       	subi	r30, 0x8F	; 143
    4e94:	ff 4f       	sbci	r31, 0xFF	; 255
    4e96:	80 81       	ld	r24, Z
    4e98:	91 81       	ldd	r25, Z+1	; 0x01
    4e9a:	01 97       	sbiw	r24, 0x01	; 1
    4e9c:	f1 f7       	brne	.-4      	; 0x4e9a <main+0x5b4>
    4e9e:	fe 01       	movw	r30, r28
    4ea0:	ef 58       	subi	r30, 0x8F	; 143
    4ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea4:	91 83       	std	Z+1, r25	; 0x01
    4ea6:	80 83       	st	Z, r24
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
    4ea8:	81 e0       	ldi	r24, 0x01	; 1
    4eaa:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>

	 }
	if(j==3 &&(usernum >9 ||usernum<0)){
    4eae:	fe 01       	movw	r30, r28
    4eb0:	e0 56       	subi	r30, 0x60	; 96
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	80 81       	ld	r24, Z
    4eb6:	83 30       	cpi	r24, 0x03	; 3
    4eb8:	09 f0       	breq	.+2      	; 0x4ebc <main+0x5d6>
    4eba:	b0 c1       	rjmp	.+864    	; 0x521c <main+0x936>
    4ebc:	80 91 a4 02 	lds	r24, 0x02A4
    4ec0:	8a 30       	cpi	r24, 0x0A	; 10
    4ec2:	08 f4       	brcc	.+2      	; 0x4ec6 <main+0x5e0>
    4ec4:	ab c1       	rjmp	.+854    	; 0x521c <main+0x936>
	    LCD8Bit_Send_Command(0x01);
    4ec6:	81 e0       	ldi	r24, 0x01	; 1
    4ec8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    LCD_Send_String("Wrong Username");
    4ecc:	86 e8       	ldi	r24, 0x86	; 134
    4ece:	90 e0       	ldi	r25, 0x00	; 0
    4ed0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_GOTOXY(0,1);
    4ed4:	80 e0       	ldi	r24, 0x00	; 0
    4ed6:	61 e0       	ldi	r22, 0x01	; 1
    4ed8:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
	    LCD_Send_String("No tries left!");
    4edc:	82 ea       	ldi	r24, 0xA2	; 162
    4ede:	90 e0       	ldi	r25, 0x00	; 0
    4ee0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e3 59       	subi	r30, 0x93	; 147
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	80 e0       	ldi	r24, 0x00	; 0
    4eec:	90 e4       	ldi	r25, 0x40	; 64
    4eee:	ac e9       	ldi	r26, 0x9C	; 156
    4ef0:	b5 e4       	ldi	r27, 0x45	; 69
    4ef2:	80 83       	st	Z, r24
    4ef4:	91 83       	std	Z+1, r25	; 0x01
    4ef6:	a2 83       	std	Z+2, r26	; 0x02
    4ef8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4efa:	8e 01       	movw	r16, r28
    4efc:	07 59       	subi	r16, 0x97	; 151
    4efe:	1f 4f       	sbci	r17, 0xFF	; 255
    4f00:	fe 01       	movw	r30, r28
    4f02:	e3 59       	subi	r30, 0x93	; 147
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	60 81       	ld	r22, Z
    4f08:	71 81       	ldd	r23, Z+1	; 0x01
    4f0a:	82 81       	ldd	r24, Z+2	; 0x02
    4f0c:	93 81       	ldd	r25, Z+3	; 0x03
    4f0e:	20 e0       	ldi	r18, 0x00	; 0
    4f10:	30 e0       	ldi	r19, 0x00	; 0
    4f12:	4a ef       	ldi	r20, 0xFA	; 250
    4f14:	54 e4       	ldi	r21, 0x44	; 68
    4f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f1a:	dc 01       	movw	r26, r24
    4f1c:	cb 01       	movw	r24, r22
    4f1e:	f8 01       	movw	r30, r16
    4f20:	80 83       	st	Z, r24
    4f22:	91 83       	std	Z+1, r25	; 0x01
    4f24:	a2 83       	std	Z+2, r26	; 0x02
    4f26:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f28:	fe 01       	movw	r30, r28
    4f2a:	e7 59       	subi	r30, 0x97	; 151
    4f2c:	ff 4f       	sbci	r31, 0xFF	; 255
    4f2e:	60 81       	ld	r22, Z
    4f30:	71 81       	ldd	r23, Z+1	; 0x01
    4f32:	82 81       	ldd	r24, Z+2	; 0x02
    4f34:	93 81       	ldd	r25, Z+3	; 0x03
    4f36:	20 e0       	ldi	r18, 0x00	; 0
    4f38:	30 e0       	ldi	r19, 0x00	; 0
    4f3a:	40 e8       	ldi	r20, 0x80	; 128
    4f3c:	5f e3       	ldi	r21, 0x3F	; 63
    4f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4f42:	88 23       	and	r24, r24
    4f44:	44 f4       	brge	.+16     	; 0x4f56 <main+0x670>
		__ticks = 1;
    4f46:	fe 01       	movw	r30, r28
    4f48:	e9 59       	subi	r30, 0x99	; 153
    4f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	91 83       	std	Z+1, r25	; 0x01
    4f52:	80 83       	st	Z, r24
    4f54:	64 c0       	rjmp	.+200    	; 0x501e <main+0x738>
	else if (__tmp > 65535)
    4f56:	fe 01       	movw	r30, r28
    4f58:	e7 59       	subi	r30, 0x97	; 151
    4f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5c:	60 81       	ld	r22, Z
    4f5e:	71 81       	ldd	r23, Z+1	; 0x01
    4f60:	82 81       	ldd	r24, Z+2	; 0x02
    4f62:	93 81       	ldd	r25, Z+3	; 0x03
    4f64:	20 e0       	ldi	r18, 0x00	; 0
    4f66:	3f ef       	ldi	r19, 0xFF	; 255
    4f68:	4f e7       	ldi	r20, 0x7F	; 127
    4f6a:	57 e4       	ldi	r21, 0x47	; 71
    4f6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4f70:	18 16       	cp	r1, r24
    4f72:	0c f0       	brlt	.+2      	; 0x4f76 <main+0x690>
    4f74:	43 c0       	rjmp	.+134    	; 0x4ffc <main+0x716>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f76:	fe 01       	movw	r30, r28
    4f78:	e3 59       	subi	r30, 0x93	; 147
    4f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7c:	60 81       	ld	r22, Z
    4f7e:	71 81       	ldd	r23, Z+1	; 0x01
    4f80:	82 81       	ldd	r24, Z+2	; 0x02
    4f82:	93 81       	ldd	r25, Z+3	; 0x03
    4f84:	20 e0       	ldi	r18, 0x00	; 0
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	40 e2       	ldi	r20, 0x20	; 32
    4f8a:	51 e4       	ldi	r21, 0x41	; 65
    4f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f90:	dc 01       	movw	r26, r24
    4f92:	cb 01       	movw	r24, r22
    4f94:	8e 01       	movw	r16, r28
    4f96:	09 59       	subi	r16, 0x99	; 153
    4f98:	1f 4f       	sbci	r17, 0xFF	; 255
    4f9a:	bc 01       	movw	r22, r24
    4f9c:	cd 01       	movw	r24, r26
    4f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fa2:	dc 01       	movw	r26, r24
    4fa4:	cb 01       	movw	r24, r22
    4fa6:	f8 01       	movw	r30, r16
    4fa8:	91 83       	std	Z+1, r25	; 0x01
    4faa:	80 83       	st	Z, r24
    4fac:	1f c0       	rjmp	.+62     	; 0x4fec <main+0x706>
    4fae:	fe 01       	movw	r30, r28
    4fb0:	eb 59       	subi	r30, 0x9B	; 155
    4fb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fb4:	88 ec       	ldi	r24, 0xC8	; 200
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	91 83       	std	Z+1, r25	; 0x01
    4fba:	80 83       	st	Z, r24
    4fbc:	fe 01       	movw	r30, r28
    4fbe:	eb 59       	subi	r30, 0x9B	; 155
    4fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc2:	80 81       	ld	r24, Z
    4fc4:	91 81       	ldd	r25, Z+1	; 0x01
    4fc6:	01 97       	sbiw	r24, 0x01	; 1
    4fc8:	f1 f7       	brne	.-4      	; 0x4fc6 <main+0x6e0>
    4fca:	fe 01       	movw	r30, r28
    4fcc:	eb 59       	subi	r30, 0x9B	; 155
    4fce:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd0:	91 83       	std	Z+1, r25	; 0x01
    4fd2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd4:	de 01       	movw	r26, r28
    4fd6:	a9 59       	subi	r26, 0x99	; 153
    4fd8:	bf 4f       	sbci	r27, 0xFF	; 255
    4fda:	fe 01       	movw	r30, r28
    4fdc:	e9 59       	subi	r30, 0x99	; 153
    4fde:	ff 4f       	sbci	r31, 0xFF	; 255
    4fe0:	80 81       	ld	r24, Z
    4fe2:	91 81       	ldd	r25, Z+1	; 0x01
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	11 96       	adiw	r26, 0x01	; 1
    4fe8:	9c 93       	st	X, r25
    4fea:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fec:	fe 01       	movw	r30, r28
    4fee:	e9 59       	subi	r30, 0x99	; 153
    4ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    4ff2:	80 81       	ld	r24, Z
    4ff4:	91 81       	ldd	r25, Z+1	; 0x01
    4ff6:	00 97       	sbiw	r24, 0x00	; 0
    4ff8:	d1 f6       	brne	.-76     	; 0x4fae <main+0x6c8>
    4ffa:	27 c0       	rjmp	.+78     	; 0x504a <main+0x764>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ffc:	8e 01       	movw	r16, r28
    4ffe:	09 59       	subi	r16, 0x99	; 153
    5000:	1f 4f       	sbci	r17, 0xFF	; 255
    5002:	fe 01       	movw	r30, r28
    5004:	e7 59       	subi	r30, 0x97	; 151
    5006:	ff 4f       	sbci	r31, 0xFF	; 255
    5008:	60 81       	ld	r22, Z
    500a:	71 81       	ldd	r23, Z+1	; 0x01
    500c:	82 81       	ldd	r24, Z+2	; 0x02
    500e:	93 81       	ldd	r25, Z+3	; 0x03
    5010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5014:	dc 01       	movw	r26, r24
    5016:	cb 01       	movw	r24, r22
    5018:	f8 01       	movw	r30, r16
    501a:	91 83       	std	Z+1, r25	; 0x01
    501c:	80 83       	st	Z, r24
    501e:	de 01       	movw	r26, r28
    5020:	ad 59       	subi	r26, 0x9D	; 157
    5022:	bf 4f       	sbci	r27, 0xFF	; 255
    5024:	fe 01       	movw	r30, r28
    5026:	e9 59       	subi	r30, 0x99	; 153
    5028:	ff 4f       	sbci	r31, 0xFF	; 255
    502a:	80 81       	ld	r24, Z
    502c:	91 81       	ldd	r25, Z+1	; 0x01
    502e:	8d 93       	st	X+, r24
    5030:	9c 93       	st	X, r25
    5032:	fe 01       	movw	r30, r28
    5034:	ed 59       	subi	r30, 0x9D	; 157
    5036:	ff 4f       	sbci	r31, 0xFF	; 255
    5038:	80 81       	ld	r24, Z
    503a:	91 81       	ldd	r25, Z+1	; 0x01
    503c:	01 97       	sbiw	r24, 0x01	; 1
    503e:	f1 f7       	brne	.-4      	; 0x503c <main+0x756>
    5040:	fe 01       	movw	r30, r28
    5042:	ed 59       	subi	r30, 0x9D	; 157
    5044:	ff 4f       	sbci	r31, 0xFF	; 255
    5046:	91 83       	std	Z+1, r25	; 0x01
    5048:	80 83       	st	Z, r24
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
    504a:	81 e0       	ldi	r24, 0x01	; 1
    504c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    for(u8 o = 0;o<10;o++){
    5050:	fe 01       	movw	r30, r28
    5052:	e2 56       	subi	r30, 0x62	; 98
    5054:	ff 4f       	sbci	r31, 0xFF	; 255
    5056:	10 82       	st	Z, r1
    5058:	da c0       	rjmp	.+436    	; 0x520e <main+0x928>
		    LCD8Bit_Send_Command(0x01);
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    LCD_Send_String("System Shutdown");
    5060:	81 eb       	ldi	r24, 0xB1	; 177
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
			LCD_GOTOXY(0,1);
    5068:	80 e0       	ldi	r24, 0x00	; 0
    506a:	61 e0       	ldi	r22, 0x01	; 1
    506c:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
			LCD_Send_Int(10-o);
    5070:	fe 01       	movw	r30, r28
    5072:	e2 56       	subi	r30, 0x62	; 98
    5074:	ff 4f       	sbci	r31, 0xFF	; 255
    5076:	80 81       	ld	r24, Z
    5078:	28 2f       	mov	r18, r24
    507a:	30 e0       	ldi	r19, 0x00	; 0
    507c:	8a e0       	ldi	r24, 0x0A	; 10
    507e:	90 e0       	ldi	r25, 0x00	; 0
    5080:	82 1b       	sub	r24, r18
    5082:	93 0b       	sbc	r25, r19
    5084:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
		    LCD_Send_String(" Seconds");
    5088:	81 ec       	ldi	r24, 0xC1	; 193
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    5090:	fe 01       	movw	r30, r28
    5092:	e1 5a       	subi	r30, 0xA1	; 161
    5094:	ff 4f       	sbci	r31, 0xFF	; 255
    5096:	80 e0       	ldi	r24, 0x00	; 0
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	aa e7       	ldi	r26, 0x7A	; 122
    509c:	b4 e4       	ldi	r27, 0x44	; 68
    509e:	80 83       	st	Z, r24
    50a0:	91 83       	std	Z+1, r25	; 0x01
    50a2:	a2 83       	std	Z+2, r26	; 0x02
    50a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    50a6:	8e 01       	movw	r16, r28
    50a8:	05 5a       	subi	r16, 0xA5	; 165
    50aa:	1f 4f       	sbci	r17, 0xFF	; 255
    50ac:	fe 01       	movw	r30, r28
    50ae:	e1 5a       	subi	r30, 0xA1	; 161
    50b0:	ff 4f       	sbci	r31, 0xFF	; 255
    50b2:	60 81       	ld	r22, Z
    50b4:	71 81       	ldd	r23, Z+1	; 0x01
    50b6:	82 81       	ldd	r24, Z+2	; 0x02
    50b8:	93 81       	ldd	r25, Z+3	; 0x03
    50ba:	20 e0       	ldi	r18, 0x00	; 0
    50bc:	30 e0       	ldi	r19, 0x00	; 0
    50be:	4a ef       	ldi	r20, 0xFA	; 250
    50c0:	54 e4       	ldi	r21, 0x44	; 68
    50c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c6:	dc 01       	movw	r26, r24
    50c8:	cb 01       	movw	r24, r22
    50ca:	f8 01       	movw	r30, r16
    50cc:	80 83       	st	Z, r24
    50ce:	91 83       	std	Z+1, r25	; 0x01
    50d0:	a2 83       	std	Z+2, r26	; 0x02
    50d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    50d4:	fe 01       	movw	r30, r28
    50d6:	e5 5a       	subi	r30, 0xA5	; 165
    50d8:	ff 4f       	sbci	r31, 0xFF	; 255
    50da:	60 81       	ld	r22, Z
    50dc:	71 81       	ldd	r23, Z+1	; 0x01
    50de:	82 81       	ldd	r24, Z+2	; 0x02
    50e0:	93 81       	ldd	r25, Z+3	; 0x03
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	40 e8       	ldi	r20, 0x80	; 128
    50e8:	5f e3       	ldi	r21, 0x3F	; 63
    50ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    50ee:	88 23       	and	r24, r24
    50f0:	44 f4       	brge	.+16     	; 0x5102 <main+0x81c>
		__ticks = 1;
    50f2:	fe 01       	movw	r30, r28
    50f4:	e7 5a       	subi	r30, 0xA7	; 167
    50f6:	ff 4f       	sbci	r31, 0xFF	; 255
    50f8:	81 e0       	ldi	r24, 0x01	; 1
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	91 83       	std	Z+1, r25	; 0x01
    50fe:	80 83       	st	Z, r24
    5100:	64 c0       	rjmp	.+200    	; 0x51ca <main+0x8e4>
	else if (__tmp > 65535)
    5102:	fe 01       	movw	r30, r28
    5104:	e5 5a       	subi	r30, 0xA5	; 165
    5106:	ff 4f       	sbci	r31, 0xFF	; 255
    5108:	60 81       	ld	r22, Z
    510a:	71 81       	ldd	r23, Z+1	; 0x01
    510c:	82 81       	ldd	r24, Z+2	; 0x02
    510e:	93 81       	ldd	r25, Z+3	; 0x03
    5110:	20 e0       	ldi	r18, 0x00	; 0
    5112:	3f ef       	ldi	r19, 0xFF	; 255
    5114:	4f e7       	ldi	r20, 0x7F	; 127
    5116:	57 e4       	ldi	r21, 0x47	; 71
    5118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    511c:	18 16       	cp	r1, r24
    511e:	0c f0       	brlt	.+2      	; 0x5122 <main+0x83c>
    5120:	43 c0       	rjmp	.+134    	; 0x51a8 <main+0x8c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5122:	fe 01       	movw	r30, r28
    5124:	e1 5a       	subi	r30, 0xA1	; 161
    5126:	ff 4f       	sbci	r31, 0xFF	; 255
    5128:	60 81       	ld	r22, Z
    512a:	71 81       	ldd	r23, Z+1	; 0x01
    512c:	82 81       	ldd	r24, Z+2	; 0x02
    512e:	93 81       	ldd	r25, Z+3	; 0x03
    5130:	20 e0       	ldi	r18, 0x00	; 0
    5132:	30 e0       	ldi	r19, 0x00	; 0
    5134:	40 e2       	ldi	r20, 0x20	; 32
    5136:	51 e4       	ldi	r21, 0x41	; 65
    5138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    513c:	dc 01       	movw	r26, r24
    513e:	cb 01       	movw	r24, r22
    5140:	8e 01       	movw	r16, r28
    5142:	07 5a       	subi	r16, 0xA7	; 167
    5144:	1f 4f       	sbci	r17, 0xFF	; 255
    5146:	bc 01       	movw	r22, r24
    5148:	cd 01       	movw	r24, r26
    514a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	f8 01       	movw	r30, r16
    5154:	91 83       	std	Z+1, r25	; 0x01
    5156:	80 83       	st	Z, r24
    5158:	1f c0       	rjmp	.+62     	; 0x5198 <main+0x8b2>
    515a:	fe 01       	movw	r30, r28
    515c:	e9 5a       	subi	r30, 0xA9	; 169
    515e:	ff 4f       	sbci	r31, 0xFF	; 255
    5160:	88 ec       	ldi	r24, 0xC8	; 200
    5162:	90 e0       	ldi	r25, 0x00	; 0
    5164:	91 83       	std	Z+1, r25	; 0x01
    5166:	80 83       	st	Z, r24
    5168:	fe 01       	movw	r30, r28
    516a:	e9 5a       	subi	r30, 0xA9	; 169
    516c:	ff 4f       	sbci	r31, 0xFF	; 255
    516e:	80 81       	ld	r24, Z
    5170:	91 81       	ldd	r25, Z+1	; 0x01
    5172:	01 97       	sbiw	r24, 0x01	; 1
    5174:	f1 f7       	brne	.-4      	; 0x5172 <main+0x88c>
    5176:	fe 01       	movw	r30, r28
    5178:	e9 5a       	subi	r30, 0xA9	; 169
    517a:	ff 4f       	sbci	r31, 0xFF	; 255
    517c:	91 83       	std	Z+1, r25	; 0x01
    517e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5180:	de 01       	movw	r26, r28
    5182:	a7 5a       	subi	r26, 0xA7	; 167
    5184:	bf 4f       	sbci	r27, 0xFF	; 255
    5186:	fe 01       	movw	r30, r28
    5188:	e7 5a       	subi	r30, 0xA7	; 167
    518a:	ff 4f       	sbci	r31, 0xFF	; 255
    518c:	80 81       	ld	r24, Z
    518e:	91 81       	ldd	r25, Z+1	; 0x01
    5190:	01 97       	sbiw	r24, 0x01	; 1
    5192:	11 96       	adiw	r26, 0x01	; 1
    5194:	9c 93       	st	X, r25
    5196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5198:	fe 01       	movw	r30, r28
    519a:	e7 5a       	subi	r30, 0xA7	; 167
    519c:	ff 4f       	sbci	r31, 0xFF	; 255
    519e:	80 81       	ld	r24, Z
    51a0:	91 81       	ldd	r25, Z+1	; 0x01
    51a2:	00 97       	sbiw	r24, 0x00	; 0
    51a4:	d1 f6       	brne	.-76     	; 0x515a <main+0x874>
    51a6:	27 c0       	rjmp	.+78     	; 0x51f6 <main+0x910>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51a8:	8e 01       	movw	r16, r28
    51aa:	07 5a       	subi	r16, 0xA7	; 167
    51ac:	1f 4f       	sbci	r17, 0xFF	; 255
    51ae:	fe 01       	movw	r30, r28
    51b0:	e5 5a       	subi	r30, 0xA5	; 165
    51b2:	ff 4f       	sbci	r31, 0xFF	; 255
    51b4:	60 81       	ld	r22, Z
    51b6:	71 81       	ldd	r23, Z+1	; 0x01
    51b8:	82 81       	ldd	r24, Z+2	; 0x02
    51ba:	93 81       	ldd	r25, Z+3	; 0x03
    51bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51c0:	dc 01       	movw	r26, r24
    51c2:	cb 01       	movw	r24, r22
    51c4:	f8 01       	movw	r30, r16
    51c6:	91 83       	std	Z+1, r25	; 0x01
    51c8:	80 83       	st	Z, r24
    51ca:	de 01       	movw	r26, r28
    51cc:	ab 5a       	subi	r26, 0xAB	; 171
    51ce:	bf 4f       	sbci	r27, 0xFF	; 255
    51d0:	fe 01       	movw	r30, r28
    51d2:	e7 5a       	subi	r30, 0xA7	; 167
    51d4:	ff 4f       	sbci	r31, 0xFF	; 255
    51d6:	80 81       	ld	r24, Z
    51d8:	91 81       	ldd	r25, Z+1	; 0x01
    51da:	8d 93       	st	X+, r24
    51dc:	9c 93       	st	X, r25
    51de:	fe 01       	movw	r30, r28
    51e0:	eb 5a       	subi	r30, 0xAB	; 171
    51e2:	ff 4f       	sbci	r31, 0xFF	; 255
    51e4:	80 81       	ld	r24, Z
    51e6:	91 81       	ldd	r25, Z+1	; 0x01
    51e8:	01 97       	sbiw	r24, 0x01	; 1
    51ea:	f1 f7       	brne	.-4      	; 0x51e8 <main+0x902>
    51ec:	fe 01       	movw	r30, r28
    51ee:	eb 5a       	subi	r30, 0xAB	; 171
    51f0:	ff 4f       	sbci	r31, 0xFF	; 255
    51f2:	91 83       	std	Z+1, r25	; 0x01
    51f4:	80 83       	st	Z, r24
		    _delay_ms(1000);
		    LCD8Bit_Send_Command(0x01);
    51f6:	81 e0       	ldi	r24, 0x01	; 1
    51f8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    LCD_Send_String("Wrong Username");
		LCD_GOTOXY(0,1);
	    LCD_Send_String("No tries left!");
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
	    for(u8 o = 0;o<10;o++){
    51fc:	de 01       	movw	r26, r28
    51fe:	a2 56       	subi	r26, 0x62	; 98
    5200:	bf 4f       	sbci	r27, 0xFF	; 255
    5202:	fe 01       	movw	r30, r28
    5204:	e2 56       	subi	r30, 0x62	; 98
    5206:	ff 4f       	sbci	r31, 0xFF	; 255
    5208:	80 81       	ld	r24, Z
    520a:	8f 5f       	subi	r24, 0xFF	; 255
    520c:	8c 93       	st	X, r24
    520e:	fe 01       	movw	r30, r28
    5210:	e2 56       	subi	r30, 0x62	; 98
    5212:	ff 4f       	sbci	r31, 0xFF	; 255
    5214:	80 81       	ld	r24, Z
    5216:	8a 30       	cpi	r24, 0x0A	; 10
    5218:	08 f4       	brcc	.+2      	; 0x521c <main+0x936>
    521a:	1f cf       	rjmp	.-450    	; 0x505a <main+0x774>
	//Entering the username (username phase)

	//Servo close (door)
    ServoAngle(closeangle);

	for(u8 j=1;j<4;j++){
    521c:	de 01       	movw	r26, r28
    521e:	a0 56       	subi	r26, 0x60	; 96
    5220:	bf 4f       	sbci	r27, 0xFF	; 255
    5222:	fe 01       	movw	r30, r28
    5224:	e0 56       	subi	r30, 0x60	; 96
    5226:	ff 4f       	sbci	r31, 0xFF	; 255
    5228:	80 81       	ld	r24, Z
    522a:	8f 5f       	subi	r24, 0xFF	; 255
    522c:	8c 93       	st	X, r24
    522e:	fe 01       	movw	r30, r28
    5230:	e0 56       	subi	r30, 0x60	; 96
    5232:	ff 4f       	sbci	r31, 0xFF	; 255
    5234:	80 81       	ld	r24, Z
    5236:	84 30       	cpi	r24, 0x04	; 4
    5238:	08 f4       	brcc	.+2      	; 0x523c <main+0x956>
    523a:	9c cb       	rjmp	.-2248   	; 0x4974 <main+0x8e>
    523c:	fe 01       	movw	r30, r28
    523e:	ef 5a       	subi	r30, 0xAF	; 175
    5240:	ff 4f       	sbci	r31, 0xFF	; 255
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	aa e7       	ldi	r26, 0x7A	; 122
    5248:	b4 e4       	ldi	r27, 0x44	; 68
    524a:	80 83       	st	Z, r24
    524c:	91 83       	std	Z+1, r25	; 0x01
    524e:	a2 83       	std	Z+2, r26	; 0x02
    5250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5252:	8e 01       	movw	r16, r28
    5254:	03 5b       	subi	r16, 0xB3	; 179
    5256:	1f 4f       	sbci	r17, 0xFF	; 255
    5258:	fe 01       	movw	r30, r28
    525a:	ef 5a       	subi	r30, 0xAF	; 175
    525c:	ff 4f       	sbci	r31, 0xFF	; 255
    525e:	60 81       	ld	r22, Z
    5260:	71 81       	ldd	r23, Z+1	; 0x01
    5262:	82 81       	ldd	r24, Z+2	; 0x02
    5264:	93 81       	ldd	r25, Z+3	; 0x03
    5266:	20 e0       	ldi	r18, 0x00	; 0
    5268:	30 e0       	ldi	r19, 0x00	; 0
    526a:	4a ef       	ldi	r20, 0xFA	; 250
    526c:	54 e4       	ldi	r21, 0x44	; 68
    526e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5272:	dc 01       	movw	r26, r24
    5274:	cb 01       	movw	r24, r22
    5276:	f8 01       	movw	r30, r16
    5278:	80 83       	st	Z, r24
    527a:	91 83       	std	Z+1, r25	; 0x01
    527c:	a2 83       	std	Z+2, r26	; 0x02
    527e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5280:	fe 01       	movw	r30, r28
    5282:	e3 5b       	subi	r30, 0xB3	; 179
    5284:	ff 4f       	sbci	r31, 0xFF	; 255
    5286:	60 81       	ld	r22, Z
    5288:	71 81       	ldd	r23, Z+1	; 0x01
    528a:	82 81       	ldd	r24, Z+2	; 0x02
    528c:	93 81       	ldd	r25, Z+3	; 0x03
    528e:	20 e0       	ldi	r18, 0x00	; 0
    5290:	30 e0       	ldi	r19, 0x00	; 0
    5292:	40 e8       	ldi	r20, 0x80	; 128
    5294:	5f e3       	ldi	r21, 0x3F	; 63
    5296:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    529a:	88 23       	and	r24, r24
    529c:	44 f4       	brge	.+16     	; 0x52ae <main+0x9c8>
		__ticks = 1;
    529e:	fe 01       	movw	r30, r28
    52a0:	e5 5b       	subi	r30, 0xB5	; 181
    52a2:	ff 4f       	sbci	r31, 0xFF	; 255
    52a4:	81 e0       	ldi	r24, 0x01	; 1
    52a6:	90 e0       	ldi	r25, 0x00	; 0
    52a8:	91 83       	std	Z+1, r25	; 0x01
    52aa:	80 83       	st	Z, r24
    52ac:	64 c0       	rjmp	.+200    	; 0x5376 <main+0xa90>
	else if (__tmp > 65535)
    52ae:	fe 01       	movw	r30, r28
    52b0:	e3 5b       	subi	r30, 0xB3	; 179
    52b2:	ff 4f       	sbci	r31, 0xFF	; 255
    52b4:	60 81       	ld	r22, Z
    52b6:	71 81       	ldd	r23, Z+1	; 0x01
    52b8:	82 81       	ldd	r24, Z+2	; 0x02
    52ba:	93 81       	ldd	r25, Z+3	; 0x03
    52bc:	20 e0       	ldi	r18, 0x00	; 0
    52be:	3f ef       	ldi	r19, 0xFF	; 255
    52c0:	4f e7       	ldi	r20, 0x7F	; 127
    52c2:	57 e4       	ldi	r21, 0x47	; 71
    52c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    52c8:	18 16       	cp	r1, r24
    52ca:	0c f0       	brlt	.+2      	; 0x52ce <main+0x9e8>
    52cc:	43 c0       	rjmp	.+134    	; 0x5354 <main+0xa6e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52ce:	fe 01       	movw	r30, r28
    52d0:	ef 5a       	subi	r30, 0xAF	; 175
    52d2:	ff 4f       	sbci	r31, 0xFF	; 255
    52d4:	60 81       	ld	r22, Z
    52d6:	71 81       	ldd	r23, Z+1	; 0x01
    52d8:	82 81       	ldd	r24, Z+2	; 0x02
    52da:	93 81       	ldd	r25, Z+3	; 0x03
    52dc:	20 e0       	ldi	r18, 0x00	; 0
    52de:	30 e0       	ldi	r19, 0x00	; 0
    52e0:	40 e2       	ldi	r20, 0x20	; 32
    52e2:	51 e4       	ldi	r21, 0x41	; 65
    52e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52e8:	dc 01       	movw	r26, r24
    52ea:	cb 01       	movw	r24, r22
    52ec:	8e 01       	movw	r16, r28
    52ee:	05 5b       	subi	r16, 0xB5	; 181
    52f0:	1f 4f       	sbci	r17, 0xFF	; 255
    52f2:	bc 01       	movw	r22, r24
    52f4:	cd 01       	movw	r24, r26
    52f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52fa:	dc 01       	movw	r26, r24
    52fc:	cb 01       	movw	r24, r22
    52fe:	f8 01       	movw	r30, r16
    5300:	91 83       	std	Z+1, r25	; 0x01
    5302:	80 83       	st	Z, r24
    5304:	1f c0       	rjmp	.+62     	; 0x5344 <main+0xa5e>
    5306:	fe 01       	movw	r30, r28
    5308:	e7 5b       	subi	r30, 0xB7	; 183
    530a:	ff 4f       	sbci	r31, 0xFF	; 255
    530c:	88 ec       	ldi	r24, 0xC8	; 200
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	91 83       	std	Z+1, r25	; 0x01
    5312:	80 83       	st	Z, r24
    5314:	fe 01       	movw	r30, r28
    5316:	e7 5b       	subi	r30, 0xB7	; 183
    5318:	ff 4f       	sbci	r31, 0xFF	; 255
    531a:	80 81       	ld	r24, Z
    531c:	91 81       	ldd	r25, Z+1	; 0x01
    531e:	01 97       	sbiw	r24, 0x01	; 1
    5320:	f1 f7       	brne	.-4      	; 0x531e <main+0xa38>
    5322:	fe 01       	movw	r30, r28
    5324:	e7 5b       	subi	r30, 0xB7	; 183
    5326:	ff 4f       	sbci	r31, 0xFF	; 255
    5328:	91 83       	std	Z+1, r25	; 0x01
    532a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    532c:	de 01       	movw	r26, r28
    532e:	a5 5b       	subi	r26, 0xB5	; 181
    5330:	bf 4f       	sbci	r27, 0xFF	; 255
    5332:	fe 01       	movw	r30, r28
    5334:	e5 5b       	subi	r30, 0xB5	; 181
    5336:	ff 4f       	sbci	r31, 0xFF	; 255
    5338:	80 81       	ld	r24, Z
    533a:	91 81       	ldd	r25, Z+1	; 0x01
    533c:	01 97       	sbiw	r24, 0x01	; 1
    533e:	11 96       	adiw	r26, 0x01	; 1
    5340:	9c 93       	st	X, r25
    5342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5344:	fe 01       	movw	r30, r28
    5346:	e5 5b       	subi	r30, 0xB5	; 181
    5348:	ff 4f       	sbci	r31, 0xFF	; 255
    534a:	80 81       	ld	r24, Z
    534c:	91 81       	ldd	r25, Z+1	; 0x01
    534e:	00 97       	sbiw	r24, 0x00	; 0
    5350:	d1 f6       	brne	.-76     	; 0x5306 <main+0xa20>
    5352:	27 c0       	rjmp	.+78     	; 0x53a2 <main+0xabc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5354:	8e 01       	movw	r16, r28
    5356:	05 5b       	subi	r16, 0xB5	; 181
    5358:	1f 4f       	sbci	r17, 0xFF	; 255
    535a:	fe 01       	movw	r30, r28
    535c:	e3 5b       	subi	r30, 0xB3	; 179
    535e:	ff 4f       	sbci	r31, 0xFF	; 255
    5360:	60 81       	ld	r22, Z
    5362:	71 81       	ldd	r23, Z+1	; 0x01
    5364:	82 81       	ldd	r24, Z+2	; 0x02
    5366:	93 81       	ldd	r25, Z+3	; 0x03
    5368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    536c:	dc 01       	movw	r26, r24
    536e:	cb 01       	movw	r24, r22
    5370:	f8 01       	movw	r30, r16
    5372:	91 83       	std	Z+1, r25	; 0x01
    5374:	80 83       	st	Z, r24
    5376:	de 01       	movw	r26, r28
    5378:	a9 5b       	subi	r26, 0xB9	; 185
    537a:	bf 4f       	sbci	r27, 0xFF	; 255
    537c:	fe 01       	movw	r30, r28
    537e:	e5 5b       	subi	r30, 0xB5	; 181
    5380:	ff 4f       	sbci	r31, 0xFF	; 255
    5382:	80 81       	ld	r24, Z
    5384:	91 81       	ldd	r25, Z+1	; 0x01
    5386:	8d 93       	st	X+, r24
    5388:	9c 93       	st	X, r25
    538a:	fe 01       	movw	r30, r28
    538c:	e9 5b       	subi	r30, 0xB9	; 185
    538e:	ff 4f       	sbci	r31, 0xFF	; 255
    5390:	80 81       	ld	r24, Z
    5392:	91 81       	ldd	r25, Z+1	; 0x01
    5394:	01 97       	sbiw	r24, 0x01	; 1
    5396:	f1 f7       	brne	.-4      	; 0x5394 <main+0xaae>
    5398:	fe 01       	movw	r30, r28
    539a:	e9 5b       	subi	r30, 0xB9	; 185
    539c:	ff 4f       	sbci	r31, 0xFF	; 255
    539e:	91 83       	std	Z+1, r25	; 0x01
    53a0:	80 83       	st	Z, r24
	  }
	}

	//Entering Password
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	for(u8 j=1;j<4;j++){
    53a8:	fe 01       	movw	r30, r28
    53aa:	e3 56       	subi	r30, 0x63	; 99
    53ac:	ff 4f       	sbci	r31, 0xFF	; 255
    53ae:	81 e0       	ldi	r24, 0x01	; 1
    53b0:	80 83       	st	Z, r24
    53b2:	2b c3       	rjmp	.+1622   	; 0x5a0a <main+0x1124>
	    LCD_Send_String("Enter your");
    53b4:	85 e6       	ldi	r24, 0x65	; 101
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_GOTOXY(0,1);
    53bc:	80 e0       	ldi	r24, 0x00	; 0
    53be:	61 e0       	ldi	r22, 0x01	; 1
    53c0:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
	    LCD_Send_String("Password");
    53c4:	8a ec       	ldi	r24, 0xCA	; 202
    53c6:	90 e0       	ldi	r25, 0x00	; 0
    53c8:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    53cc:	fe 01       	movw	r30, r28
    53ce:	ed 5b       	subi	r30, 0xBD	; 189
    53d0:	ff 4f       	sbci	r31, 0xFF	; 255
    53d2:	80 e0       	ldi	r24, 0x00	; 0
    53d4:	90 e8       	ldi	r25, 0x80	; 128
    53d6:	ab e3       	ldi	r26, 0x3B	; 59
    53d8:	b5 e4       	ldi	r27, 0x45	; 69
    53da:	80 83       	st	Z, r24
    53dc:	91 83       	std	Z+1, r25	; 0x01
    53de:	a2 83       	std	Z+2, r26	; 0x02
    53e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53e2:	8e 01       	movw	r16, r28
    53e4:	01 5c       	subi	r16, 0xC1	; 193
    53e6:	1f 4f       	sbci	r17, 0xFF	; 255
    53e8:	fe 01       	movw	r30, r28
    53ea:	ed 5b       	subi	r30, 0xBD	; 189
    53ec:	ff 4f       	sbci	r31, 0xFF	; 255
    53ee:	60 81       	ld	r22, Z
    53f0:	71 81       	ldd	r23, Z+1	; 0x01
    53f2:	82 81       	ldd	r24, Z+2	; 0x02
    53f4:	93 81       	ldd	r25, Z+3	; 0x03
    53f6:	20 e0       	ldi	r18, 0x00	; 0
    53f8:	30 e0       	ldi	r19, 0x00	; 0
    53fa:	4a ef       	ldi	r20, 0xFA	; 250
    53fc:	54 e4       	ldi	r21, 0x44	; 68
    53fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5402:	dc 01       	movw	r26, r24
    5404:	cb 01       	movw	r24, r22
    5406:	f8 01       	movw	r30, r16
    5408:	80 83       	st	Z, r24
    540a:	91 83       	std	Z+1, r25	; 0x01
    540c:	a2 83       	std	Z+2, r26	; 0x02
    540e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5410:	fe 01       	movw	r30, r28
    5412:	ff 96       	adiw	r30, 0x3f	; 63
    5414:	60 81       	ld	r22, Z
    5416:	71 81       	ldd	r23, Z+1	; 0x01
    5418:	82 81       	ldd	r24, Z+2	; 0x02
    541a:	93 81       	ldd	r25, Z+3	; 0x03
    541c:	20 e0       	ldi	r18, 0x00	; 0
    541e:	30 e0       	ldi	r19, 0x00	; 0
    5420:	40 e8       	ldi	r20, 0x80	; 128
    5422:	5f e3       	ldi	r21, 0x3F	; 63
    5424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5428:	88 23       	and	r24, r24
    542a:	2c f4       	brge	.+10     	; 0x5436 <main+0xb50>
		__ticks = 1;
    542c:	81 e0       	ldi	r24, 0x01	; 1
    542e:	90 e0       	ldi	r25, 0x00	; 0
    5430:	9e af       	std	Y+62, r25	; 0x3e
    5432:	8d af       	std	Y+61, r24	; 0x3d
    5434:	46 c0       	rjmp	.+140    	; 0x54c2 <main+0xbdc>
	else if (__tmp > 65535)
    5436:	fe 01       	movw	r30, r28
    5438:	ff 96       	adiw	r30, 0x3f	; 63
    543a:	60 81       	ld	r22, Z
    543c:	71 81       	ldd	r23, Z+1	; 0x01
    543e:	82 81       	ldd	r24, Z+2	; 0x02
    5440:	93 81       	ldd	r25, Z+3	; 0x03
    5442:	20 e0       	ldi	r18, 0x00	; 0
    5444:	3f ef       	ldi	r19, 0xFF	; 255
    5446:	4f e7       	ldi	r20, 0x7F	; 127
    5448:	57 e4       	ldi	r21, 0x47	; 71
    544a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    544e:	18 16       	cp	r1, r24
    5450:	64 f5       	brge	.+88     	; 0x54aa <main+0xbc4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5452:	fe 01       	movw	r30, r28
    5454:	ed 5b       	subi	r30, 0xBD	; 189
    5456:	ff 4f       	sbci	r31, 0xFF	; 255
    5458:	60 81       	ld	r22, Z
    545a:	71 81       	ldd	r23, Z+1	; 0x01
    545c:	82 81       	ldd	r24, Z+2	; 0x02
    545e:	93 81       	ldd	r25, Z+3	; 0x03
    5460:	20 e0       	ldi	r18, 0x00	; 0
    5462:	30 e0       	ldi	r19, 0x00	; 0
    5464:	40 e2       	ldi	r20, 0x20	; 32
    5466:	51 e4       	ldi	r21, 0x41	; 65
    5468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    546c:	dc 01       	movw	r26, r24
    546e:	cb 01       	movw	r24, r22
    5470:	bc 01       	movw	r22, r24
    5472:	cd 01       	movw	r24, r26
    5474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5478:	dc 01       	movw	r26, r24
    547a:	cb 01       	movw	r24, r22
    547c:	9e af       	std	Y+62, r25	; 0x3e
    547e:	8d af       	std	Y+61, r24	; 0x3d
    5480:	0f c0       	rjmp	.+30     	; 0x54a0 <main+0xbba>
    5482:	88 ec       	ldi	r24, 0xC8	; 200
    5484:	90 e0       	ldi	r25, 0x00	; 0
    5486:	9c af       	std	Y+60, r25	; 0x3c
    5488:	8b af       	std	Y+59, r24	; 0x3b
    548a:	8b ad       	ldd	r24, Y+59	; 0x3b
    548c:	9c ad       	ldd	r25, Y+60	; 0x3c
    548e:	01 97       	sbiw	r24, 0x01	; 1
    5490:	f1 f7       	brne	.-4      	; 0x548e <main+0xba8>
    5492:	9c af       	std	Y+60, r25	; 0x3c
    5494:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5496:	8d ad       	ldd	r24, Y+61	; 0x3d
    5498:	9e ad       	ldd	r25, Y+62	; 0x3e
    549a:	01 97       	sbiw	r24, 0x01	; 1
    549c:	9e af       	std	Y+62, r25	; 0x3e
    549e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a0:	8d ad       	ldd	r24, Y+61	; 0x3d
    54a2:	9e ad       	ldd	r25, Y+62	; 0x3e
    54a4:	00 97       	sbiw	r24, 0x00	; 0
    54a6:	69 f7       	brne	.-38     	; 0x5482 <main+0xb9c>
    54a8:	16 c0       	rjmp	.+44     	; 0x54d6 <main+0xbf0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54aa:	fe 01       	movw	r30, r28
    54ac:	ff 96       	adiw	r30, 0x3f	; 63
    54ae:	60 81       	ld	r22, Z
    54b0:	71 81       	ldd	r23, Z+1	; 0x01
    54b2:	82 81       	ldd	r24, Z+2	; 0x02
    54b4:	93 81       	ldd	r25, Z+3	; 0x03
    54b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54ba:	dc 01       	movw	r26, r24
    54bc:	cb 01       	movw	r24, r22
    54be:	9e af       	std	Y+62, r25	; 0x3e
    54c0:	8d af       	std	Y+61, r24	; 0x3d
    54c2:	8d ad       	ldd	r24, Y+61	; 0x3d
    54c4:	9e ad       	ldd	r25, Y+62	; 0x3e
    54c6:	9a af       	std	Y+58, r25	; 0x3a
    54c8:	89 af       	std	Y+57, r24	; 0x39
    54ca:	89 ad       	ldd	r24, Y+57	; 0x39
    54cc:	9a ad       	ldd	r25, Y+58	; 0x3a
    54ce:	01 97       	sbiw	r24, 0x01	; 1
    54d0:	f1 f7       	brne	.-4      	; 0x54ce <main+0xbe8>
    54d2:	9a af       	std	Y+58, r25	; 0x3a
    54d4:	89 af       	std	Y+57, r24	; 0x39
	    _delay_ms(3000);
	    LCD8Bit_Send_Command(0x01);
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
	    LCD_Send_String("Password:");
    54dc:	83 ed       	ldi	r24, 0xD3	; 211
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		BluetoothRead(password_input);
    54e4:	85 e3       	ldi	r24, 0x35	; 53
    54e6:	97 e0       	ldi	r25, 0x07	; 7
    54e8:	0e 94 a7 2d 	call	0x5b4e	; 0x5b4e <BluetoothRead>
		for(u8 i = 0;i<10;i++){
    54ec:	fe 01       	movw	r30, r28
    54ee:	e4 56       	subi	r30, 0x64	; 100
    54f0:	ff 4f       	sbci	r31, 0xFF	; 255
    54f2:	10 82       	st	Z, r1
    54f4:	a4 c0       	rjmp	.+328    	; 0x563e <main+0xd58>
		if(strcmp(password_input,users[i].password)==0){
    54f6:	fe 01       	movw	r30, r28
    54f8:	e4 56       	subi	r30, 0x64	; 100
    54fa:	ff 4f       	sbci	r31, 0xFF	; 255
    54fc:	80 81       	ld	r24, Z
    54fe:	88 2f       	mov	r24, r24
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	9c 01       	movw	r18, r24
    5508:	22 0f       	add	r18, r18
    550a:	33 1f       	adc	r19, r19
    550c:	22 0f       	add	r18, r18
    550e:	33 1f       	adc	r19, r19
    5510:	82 0f       	add	r24, r18
    5512:	93 1f       	adc	r25, r19
    5514:	05 96       	adiw	r24, 0x05	; 5
    5516:	9c 01       	movw	r18, r24
    5518:	20 5c       	subi	r18, 0xC0	; 192
    551a:	3d 4f       	sbci	r19, 0xFD	; 253
    551c:	85 e3       	ldi	r24, 0x35	; 53
    551e:	97 e0       	ldi	r25, 0x07	; 7
    5520:	b9 01       	movw	r22, r18
    5522:	0e 94 45 30 	call	0x608a	; 0x608a <strcmp>
    5526:	00 97       	sbiw	r24, 0x00	; 0
    5528:	09 f0       	breq	.+2      	; 0x552c <main+0xc46>
    552a:	80 c0       	rjmp	.+256    	; 0x562c <main+0xd46>
		    LCD8Bit_Send_Command(0x01);
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    LCD_Send_String("OK");
    5532:	83 e8       	ldi	r24, 0x83	; 131
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		    passnum = i;
    553a:	fe 01       	movw	r30, r28
    553c:	e4 56       	subi	r30, 0x64	; 100
    553e:	ff 4f       	sbci	r31, 0xFF	; 255
    5540:	80 81       	ld	r24, Z
    5542:	80 93 a5 02 	sts	0x02A5, r24
    5546:	80 e0       	ldi	r24, 0x00	; 0
    5548:	90 e8       	ldi	r25, 0x80	; 128
    554a:	ab e3       	ldi	r26, 0x3B	; 59
    554c:	b5 e4       	ldi	r27, 0x45	; 69
    554e:	8d ab       	std	Y+53, r24	; 0x35
    5550:	9e ab       	std	Y+54, r25	; 0x36
    5552:	af ab       	std	Y+55, r26	; 0x37
    5554:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5556:	6d a9       	ldd	r22, Y+53	; 0x35
    5558:	7e a9       	ldd	r23, Y+54	; 0x36
    555a:	8f a9       	ldd	r24, Y+55	; 0x37
    555c:	98 ad       	ldd	r25, Y+56	; 0x38
    555e:	20 e0       	ldi	r18, 0x00	; 0
    5560:	30 e0       	ldi	r19, 0x00	; 0
    5562:	4a ef       	ldi	r20, 0xFA	; 250
    5564:	54 e4       	ldi	r21, 0x44	; 68
    5566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    556a:	dc 01       	movw	r26, r24
    556c:	cb 01       	movw	r24, r22
    556e:	89 ab       	std	Y+49, r24	; 0x31
    5570:	9a ab       	std	Y+50, r25	; 0x32
    5572:	ab ab       	std	Y+51, r26	; 0x33
    5574:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5576:	69 a9       	ldd	r22, Y+49	; 0x31
    5578:	7a a9       	ldd	r23, Y+50	; 0x32
    557a:	8b a9       	ldd	r24, Y+51	; 0x33
    557c:	9c a9       	ldd	r25, Y+52	; 0x34
    557e:	20 e0       	ldi	r18, 0x00	; 0
    5580:	30 e0       	ldi	r19, 0x00	; 0
    5582:	40 e8       	ldi	r20, 0x80	; 128
    5584:	5f e3       	ldi	r21, 0x3F	; 63
    5586:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    558a:	88 23       	and	r24, r24
    558c:	2c f4       	brge	.+10     	; 0x5598 <main+0xcb2>
		__ticks = 1;
    558e:	81 e0       	ldi	r24, 0x01	; 1
    5590:	90 e0       	ldi	r25, 0x00	; 0
    5592:	98 ab       	std	Y+48, r25	; 0x30
    5594:	8f a7       	std	Y+47, r24	; 0x2f
    5596:	3f c0       	rjmp	.+126    	; 0x5616 <main+0xd30>
	else if (__tmp > 65535)
    5598:	69 a9       	ldd	r22, Y+49	; 0x31
    559a:	7a a9       	ldd	r23, Y+50	; 0x32
    559c:	8b a9       	ldd	r24, Y+51	; 0x33
    559e:	9c a9       	ldd	r25, Y+52	; 0x34
    55a0:	20 e0       	ldi	r18, 0x00	; 0
    55a2:	3f ef       	ldi	r19, 0xFF	; 255
    55a4:	4f e7       	ldi	r20, 0x7F	; 127
    55a6:	57 e4       	ldi	r21, 0x47	; 71
    55a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    55ac:	18 16       	cp	r1, r24
    55ae:	4c f5       	brge	.+82     	; 0x5602 <main+0xd1c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55b0:	6d a9       	ldd	r22, Y+53	; 0x35
    55b2:	7e a9       	ldd	r23, Y+54	; 0x36
    55b4:	8f a9       	ldd	r24, Y+55	; 0x37
    55b6:	98 ad       	ldd	r25, Y+56	; 0x38
    55b8:	20 e0       	ldi	r18, 0x00	; 0
    55ba:	30 e0       	ldi	r19, 0x00	; 0
    55bc:	40 e2       	ldi	r20, 0x20	; 32
    55be:	51 e4       	ldi	r21, 0x41	; 65
    55c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55c4:	dc 01       	movw	r26, r24
    55c6:	cb 01       	movw	r24, r22
    55c8:	bc 01       	movw	r22, r24
    55ca:	cd 01       	movw	r24, r26
    55cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55d0:	dc 01       	movw	r26, r24
    55d2:	cb 01       	movw	r24, r22
    55d4:	98 ab       	std	Y+48, r25	; 0x30
    55d6:	8f a7       	std	Y+47, r24	; 0x2f
    55d8:	0f c0       	rjmp	.+30     	; 0x55f8 <main+0xd12>
    55da:	88 ec       	ldi	r24, 0xC8	; 200
    55dc:	90 e0       	ldi	r25, 0x00	; 0
    55de:	9e a7       	std	Y+46, r25	; 0x2e
    55e0:	8d a7       	std	Y+45, r24	; 0x2d
    55e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    55e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	f1 f7       	brne	.-4      	; 0x55e6 <main+0xd00>
    55ea:	9e a7       	std	Y+46, r25	; 0x2e
    55ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    55f0:	98 a9       	ldd	r25, Y+48	; 0x30
    55f2:	01 97       	sbiw	r24, 0x01	; 1
    55f4:	98 ab       	std	Y+48, r25	; 0x30
    55f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    55f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    55fa:	98 a9       	ldd	r25, Y+48	; 0x30
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	69 f7       	brne	.-38     	; 0x55da <main+0xcf4>
    5600:	25 c0       	rjmp	.+74     	; 0x564c <main+0xd66>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5602:	69 a9       	ldd	r22, Y+49	; 0x31
    5604:	7a a9       	ldd	r23, Y+50	; 0x32
    5606:	8b a9       	ldd	r24, Y+51	; 0x33
    5608:	9c a9       	ldd	r25, Y+52	; 0x34
    560a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    560e:	dc 01       	movw	r26, r24
    5610:	cb 01       	movw	r24, r22
    5612:	98 ab       	std	Y+48, r25	; 0x30
    5614:	8f a7       	std	Y+47, r24	; 0x2f
    5616:	8f a5       	ldd	r24, Y+47	; 0x2f
    5618:	98 a9       	ldd	r25, Y+48	; 0x30
    561a:	9c a7       	std	Y+44, r25	; 0x2c
    561c:	8b a7       	std	Y+43, r24	; 0x2b
    561e:	8b a5       	ldd	r24, Y+43	; 0x2b
    5620:	9c a5       	ldd	r25, Y+44	; 0x2c
    5622:	01 97       	sbiw	r24, 0x01	; 1
    5624:	f1 f7       	brne	.-4      	; 0x5622 <main+0xd3c>
    5626:	9c a7       	std	Y+44, r25	; 0x2c
    5628:	8b a7       	std	Y+43, r24	; 0x2b
    562a:	10 c0       	rjmp	.+32     	; 0x564c <main+0xd66>
	    LCD_Send_String("Password");
	    _delay_ms(3000);
	    LCD8Bit_Send_Command(0x01);
	    LCD_Send_String("Password:");
		BluetoothRead(password_input);
		for(u8 i = 0;i<10;i++){
    562c:	de 01       	movw	r26, r28
    562e:	a4 56       	subi	r26, 0x64	; 100
    5630:	bf 4f       	sbci	r27, 0xFF	; 255
    5632:	fe 01       	movw	r30, r28
    5634:	e4 56       	subi	r30, 0x64	; 100
    5636:	ff 4f       	sbci	r31, 0xFF	; 255
    5638:	80 81       	ld	r24, Z
    563a:	8f 5f       	subi	r24, 0xFF	; 255
    563c:	8c 93       	st	X, r24
    563e:	fe 01       	movw	r30, r28
    5640:	e4 56       	subi	r30, 0x64	; 100
    5642:	ff 4f       	sbci	r31, 0xFF	; 255
    5644:	80 81       	ld	r24, Z
    5646:	8a 30       	cpi	r24, 0x0A	; 10
    5648:	08 f4       	brcc	.+2      	; 0x564c <main+0xd66>
    564a:	55 cf       	rjmp	.-342    	; 0x54f6 <main+0xc10>
		    passnum = i;
		    _delay_ms(3000);
		    break;
		    }
		  }
		if(passnum <10 && passnum>=0){
    564c:	80 91 a5 02 	lds	r24, 0x02A5
    5650:	8a 30       	cpi	r24, 0x0A	; 10
    5652:	08 f4       	brcc	.+2      	; 0x5656 <main+0xd70>
    5654:	e1 c1       	rjmp	.+962    	; 0x5a18 <main+0x1132>
	      break;
		 }
		if((passnum >9 ||passnum<0) && j<3){
    5656:	80 91 a5 02 	lds	r24, 0x02A5
    565a:	8a 30       	cpi	r24, 0x0A	; 10
    565c:	08 f4       	brcc	.+2      	; 0x5660 <main+0xd7a>
    565e:	97 c0       	rjmp	.+302    	; 0x578e <main+0xea8>
    5660:	fe 01       	movw	r30, r28
    5662:	e3 56       	subi	r30, 0x63	; 99
    5664:	ff 4f       	sbci	r31, 0xFF	; 255
    5666:	80 81       	ld	r24, Z
    5668:	83 30       	cpi	r24, 0x03	; 3
    566a:	08 f0       	brcs	.+2      	; 0x566e <main+0xd88>
    566c:	90 c0       	rjmp	.+288    	; 0x578e <main+0xea8>
		    LCD8Bit_Send_Command(0x01);
    566e:	81 e0       	ldi	r24, 0x01	; 1
    5670:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    LCD_Send_String("Wrong Password");
    5674:	8d ed       	ldi	r24, 0xDD	; 221
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
			LCD_GOTOXY(0,1);
    567c:	80 e0       	ldi	r24, 0x00	; 0
    567e:	61 e0       	ldi	r22, 0x01	; 1
    5680:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
			LCD_Send_Int(3-j);
    5684:	fe 01       	movw	r30, r28
    5686:	e3 56       	subi	r30, 0x63	; 99
    5688:	ff 4f       	sbci	r31, 0xFF	; 255
    568a:	80 81       	ld	r24, Z
    568c:	28 2f       	mov	r18, r24
    568e:	30 e0       	ldi	r19, 0x00	; 0
    5690:	83 e0       	ldi	r24, 0x03	; 3
    5692:	90 e0       	ldi	r25, 0x00	; 0
    5694:	82 1b       	sub	r24, r18
    5696:	93 0b       	sbc	r25, r19
    5698:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
		    LCD_Send_String(" tries left!");
    569c:	85 e9       	ldi	r24, 0x95	; 149
    569e:	90 e0       	ldi	r25, 0x00	; 0
    56a0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    56a4:	80 e0       	ldi	r24, 0x00	; 0
    56a6:	90 e4       	ldi	r25, 0x40	; 64
    56a8:	ac e9       	ldi	r26, 0x9C	; 156
    56aa:	b5 e4       	ldi	r27, 0x45	; 69
    56ac:	8f a3       	std	Y+39, r24	; 0x27
    56ae:	98 a7       	std	Y+40, r25	; 0x28
    56b0:	a9 a7       	std	Y+41, r26	; 0x29
    56b2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56b4:	6f a1       	ldd	r22, Y+39	; 0x27
    56b6:	78 a5       	ldd	r23, Y+40	; 0x28
    56b8:	89 a5       	ldd	r24, Y+41	; 0x29
    56ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    56bc:	20 e0       	ldi	r18, 0x00	; 0
    56be:	30 e0       	ldi	r19, 0x00	; 0
    56c0:	4a ef       	ldi	r20, 0xFA	; 250
    56c2:	54 e4       	ldi	r21, 0x44	; 68
    56c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56c8:	dc 01       	movw	r26, r24
    56ca:	cb 01       	movw	r24, r22
    56cc:	8b a3       	std	Y+35, r24	; 0x23
    56ce:	9c a3       	std	Y+36, r25	; 0x24
    56d0:	ad a3       	std	Y+37, r26	; 0x25
    56d2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    56d4:	6b a1       	ldd	r22, Y+35	; 0x23
    56d6:	7c a1       	ldd	r23, Y+36	; 0x24
    56d8:	8d a1       	ldd	r24, Y+37	; 0x25
    56da:	9e a1       	ldd	r25, Y+38	; 0x26
    56dc:	20 e0       	ldi	r18, 0x00	; 0
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	40 e8       	ldi	r20, 0x80	; 128
    56e2:	5f e3       	ldi	r21, 0x3F	; 63
    56e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    56e8:	88 23       	and	r24, r24
    56ea:	2c f4       	brge	.+10     	; 0x56f6 <main+0xe10>
		__ticks = 1;
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	9a a3       	std	Y+34, r25	; 0x22
    56f2:	89 a3       	std	Y+33, r24	; 0x21
    56f4:	3f c0       	rjmp	.+126    	; 0x5774 <main+0xe8e>
	else if (__tmp > 65535)
    56f6:	6b a1       	ldd	r22, Y+35	; 0x23
    56f8:	7c a1       	ldd	r23, Y+36	; 0x24
    56fa:	8d a1       	ldd	r24, Y+37	; 0x25
    56fc:	9e a1       	ldd	r25, Y+38	; 0x26
    56fe:	20 e0       	ldi	r18, 0x00	; 0
    5700:	3f ef       	ldi	r19, 0xFF	; 255
    5702:	4f e7       	ldi	r20, 0x7F	; 127
    5704:	57 e4       	ldi	r21, 0x47	; 71
    5706:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    570a:	18 16       	cp	r1, r24
    570c:	4c f5       	brge	.+82     	; 0x5760 <main+0xe7a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    570e:	6f a1       	ldd	r22, Y+39	; 0x27
    5710:	78 a5       	ldd	r23, Y+40	; 0x28
    5712:	89 a5       	ldd	r24, Y+41	; 0x29
    5714:	9a a5       	ldd	r25, Y+42	; 0x2a
    5716:	20 e0       	ldi	r18, 0x00	; 0
    5718:	30 e0       	ldi	r19, 0x00	; 0
    571a:	40 e2       	ldi	r20, 0x20	; 32
    571c:	51 e4       	ldi	r21, 0x41	; 65
    571e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5722:	dc 01       	movw	r26, r24
    5724:	cb 01       	movw	r24, r22
    5726:	bc 01       	movw	r22, r24
    5728:	cd 01       	movw	r24, r26
    572a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    572e:	dc 01       	movw	r26, r24
    5730:	cb 01       	movw	r24, r22
    5732:	9a a3       	std	Y+34, r25	; 0x22
    5734:	89 a3       	std	Y+33, r24	; 0x21
    5736:	0f c0       	rjmp	.+30     	; 0x5756 <main+0xe70>
    5738:	88 ec       	ldi	r24, 0xC8	; 200
    573a:	90 e0       	ldi	r25, 0x00	; 0
    573c:	98 a3       	std	Y+32, r25	; 0x20
    573e:	8f 8f       	std	Y+31, r24	; 0x1f
    5740:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5742:	98 a1       	ldd	r25, Y+32	; 0x20
    5744:	01 97       	sbiw	r24, 0x01	; 1
    5746:	f1 f7       	brne	.-4      	; 0x5744 <main+0xe5e>
    5748:	98 a3       	std	Y+32, r25	; 0x20
    574a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    574c:	89 a1       	ldd	r24, Y+33	; 0x21
    574e:	9a a1       	ldd	r25, Y+34	; 0x22
    5750:	01 97       	sbiw	r24, 0x01	; 1
    5752:	9a a3       	std	Y+34, r25	; 0x22
    5754:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5756:	89 a1       	ldd	r24, Y+33	; 0x21
    5758:	9a a1       	ldd	r25, Y+34	; 0x22
    575a:	00 97       	sbiw	r24, 0x00	; 0
    575c:	69 f7       	brne	.-38     	; 0x5738 <main+0xe52>
    575e:	14 c0       	rjmp	.+40     	; 0x5788 <main+0xea2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5760:	6b a1       	ldd	r22, Y+35	; 0x23
    5762:	7c a1       	ldd	r23, Y+36	; 0x24
    5764:	8d a1       	ldd	r24, Y+37	; 0x25
    5766:	9e a1       	ldd	r25, Y+38	; 0x26
    5768:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    576c:	dc 01       	movw	r26, r24
    576e:	cb 01       	movw	r24, r22
    5770:	9a a3       	std	Y+34, r25	; 0x22
    5772:	89 a3       	std	Y+33, r24	; 0x21
    5774:	89 a1       	ldd	r24, Y+33	; 0x21
    5776:	9a a1       	ldd	r25, Y+34	; 0x22
    5778:	9e 8f       	std	Y+30, r25	; 0x1e
    577a:	8d 8f       	std	Y+29, r24	; 0x1d
    577c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    577e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5780:	01 97       	sbiw	r24, 0x01	; 1
    5782:	f1 f7       	brne	.-4      	; 0x5780 <main+0xe9a>
    5784:	9e 8f       	std	Y+30, r25	; 0x1e
    5786:	8d 8f       	std	Y+29, r24	; 0x1d
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
    5788:	81 e0       	ldi	r24, 0x01	; 1
    578a:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>

		 }
		if(j==3 &&(passnum >9 ||passnum<0)){
    578e:	fe 01       	movw	r30, r28
    5790:	e3 56       	subi	r30, 0x63	; 99
    5792:	ff 4f       	sbci	r31, 0xFF	; 255
    5794:	80 81       	ld	r24, Z
    5796:	83 30       	cpi	r24, 0x03	; 3
    5798:	09 f0       	breq	.+2      	; 0x579c <main+0xeb6>
    579a:	2e c1       	rjmp	.+604    	; 0x59f8 <main+0x1112>
    579c:	80 91 a5 02 	lds	r24, 0x02A5
    57a0:	8a 30       	cpi	r24, 0x0A	; 10
    57a2:	08 f4       	brcc	.+2      	; 0x57a6 <main+0xec0>
    57a4:	29 c1       	rjmp	.+594    	; 0x59f8 <main+0x1112>
		    LCD8Bit_Send_Command(0x01);
    57a6:	81 e0       	ldi	r24, 0x01	; 1
    57a8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    LCD_Send_String("Wrong Password");
    57ac:	8d ed       	ldi	r24, 0xDD	; 221
    57ae:	90 e0       	ldi	r25, 0x00	; 0
    57b0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
			LCD_GOTOXY(0,1);
    57b4:	80 e0       	ldi	r24, 0x00	; 0
    57b6:	61 e0       	ldi	r22, 0x01	; 1
    57b8:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
		    LCD_Send_String("No tries left!");
    57bc:	82 ea       	ldi	r24, 0xA2	; 162
    57be:	90 e0       	ldi	r25, 0x00	; 0
    57c0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    57c4:	80 e0       	ldi	r24, 0x00	; 0
    57c6:	90 e4       	ldi	r25, 0x40	; 64
    57c8:	ac e9       	ldi	r26, 0x9C	; 156
    57ca:	b5 e4       	ldi	r27, 0x45	; 69
    57cc:	89 8f       	std	Y+25, r24	; 0x19
    57ce:	9a 8f       	std	Y+26, r25	; 0x1a
    57d0:	ab 8f       	std	Y+27, r26	; 0x1b
    57d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    57d4:	69 8d       	ldd	r22, Y+25	; 0x19
    57d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    57d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    57da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	30 e0       	ldi	r19, 0x00	; 0
    57e0:	4a ef       	ldi	r20, 0xFA	; 250
    57e2:	54 e4       	ldi	r21, 0x44	; 68
    57e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57e8:	dc 01       	movw	r26, r24
    57ea:	cb 01       	movw	r24, r22
    57ec:	8d 8b       	std	Y+21, r24	; 0x15
    57ee:	9e 8b       	std	Y+22, r25	; 0x16
    57f0:	af 8b       	std	Y+23, r26	; 0x17
    57f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    57f4:	6d 89       	ldd	r22, Y+21	; 0x15
    57f6:	7e 89       	ldd	r23, Y+22	; 0x16
    57f8:	8f 89       	ldd	r24, Y+23	; 0x17
    57fa:	98 8d       	ldd	r25, Y+24	; 0x18
    57fc:	20 e0       	ldi	r18, 0x00	; 0
    57fe:	30 e0       	ldi	r19, 0x00	; 0
    5800:	40 e8       	ldi	r20, 0x80	; 128
    5802:	5f e3       	ldi	r21, 0x3F	; 63
    5804:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5808:	88 23       	and	r24, r24
    580a:	2c f4       	brge	.+10     	; 0x5816 <main+0xf30>
		__ticks = 1;
    580c:	81 e0       	ldi	r24, 0x01	; 1
    580e:	90 e0       	ldi	r25, 0x00	; 0
    5810:	9c 8b       	std	Y+20, r25	; 0x14
    5812:	8b 8b       	std	Y+19, r24	; 0x13
    5814:	3f c0       	rjmp	.+126    	; 0x5894 <main+0xfae>
	else if (__tmp > 65535)
    5816:	6d 89       	ldd	r22, Y+21	; 0x15
    5818:	7e 89       	ldd	r23, Y+22	; 0x16
    581a:	8f 89       	ldd	r24, Y+23	; 0x17
    581c:	98 8d       	ldd	r25, Y+24	; 0x18
    581e:	20 e0       	ldi	r18, 0x00	; 0
    5820:	3f ef       	ldi	r19, 0xFF	; 255
    5822:	4f e7       	ldi	r20, 0x7F	; 127
    5824:	57 e4       	ldi	r21, 0x47	; 71
    5826:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    582a:	18 16       	cp	r1, r24
    582c:	4c f5       	brge	.+82     	; 0x5880 <main+0xf9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    582e:	69 8d       	ldd	r22, Y+25	; 0x19
    5830:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5832:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5834:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5836:	20 e0       	ldi	r18, 0x00	; 0
    5838:	30 e0       	ldi	r19, 0x00	; 0
    583a:	40 e2       	ldi	r20, 0x20	; 32
    583c:	51 e4       	ldi	r21, 0x41	; 65
    583e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5842:	dc 01       	movw	r26, r24
    5844:	cb 01       	movw	r24, r22
    5846:	bc 01       	movw	r22, r24
    5848:	cd 01       	movw	r24, r26
    584a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    584e:	dc 01       	movw	r26, r24
    5850:	cb 01       	movw	r24, r22
    5852:	9c 8b       	std	Y+20, r25	; 0x14
    5854:	8b 8b       	std	Y+19, r24	; 0x13
    5856:	0f c0       	rjmp	.+30     	; 0x5876 <main+0xf90>
    5858:	88 ec       	ldi	r24, 0xC8	; 200
    585a:	90 e0       	ldi	r25, 0x00	; 0
    585c:	9a 8b       	std	Y+18, r25	; 0x12
    585e:	89 8b       	std	Y+17, r24	; 0x11
    5860:	89 89       	ldd	r24, Y+17	; 0x11
    5862:	9a 89       	ldd	r25, Y+18	; 0x12
    5864:	01 97       	sbiw	r24, 0x01	; 1
    5866:	f1 f7       	brne	.-4      	; 0x5864 <main+0xf7e>
    5868:	9a 8b       	std	Y+18, r25	; 0x12
    586a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    586c:	8b 89       	ldd	r24, Y+19	; 0x13
    586e:	9c 89       	ldd	r25, Y+20	; 0x14
    5870:	01 97       	sbiw	r24, 0x01	; 1
    5872:	9c 8b       	std	Y+20, r25	; 0x14
    5874:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5876:	8b 89       	ldd	r24, Y+19	; 0x13
    5878:	9c 89       	ldd	r25, Y+20	; 0x14
    587a:	00 97       	sbiw	r24, 0x00	; 0
    587c:	69 f7       	brne	.-38     	; 0x5858 <main+0xf72>
    587e:	14 c0       	rjmp	.+40     	; 0x58a8 <main+0xfc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5880:	6d 89       	ldd	r22, Y+21	; 0x15
    5882:	7e 89       	ldd	r23, Y+22	; 0x16
    5884:	8f 89       	ldd	r24, Y+23	; 0x17
    5886:	98 8d       	ldd	r25, Y+24	; 0x18
    5888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    588c:	dc 01       	movw	r26, r24
    588e:	cb 01       	movw	r24, r22
    5890:	9c 8b       	std	Y+20, r25	; 0x14
    5892:	8b 8b       	std	Y+19, r24	; 0x13
    5894:	8b 89       	ldd	r24, Y+19	; 0x13
    5896:	9c 89       	ldd	r25, Y+20	; 0x14
    5898:	98 8b       	std	Y+16, r25	; 0x10
    589a:	8f 87       	std	Y+15, r24	; 0x0f
    589c:	8f 85       	ldd	r24, Y+15	; 0x0f
    589e:	98 89       	ldd	r25, Y+16	; 0x10
    58a0:	01 97       	sbiw	r24, 0x01	; 1
    58a2:	f1 f7       	brne	.-4      	; 0x58a0 <main+0xfba>
    58a4:	98 8b       	std	Y+16, r25	; 0x10
    58a6:	8f 87       	std	Y+15, r24	; 0x0f
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
    58a8:	81 e0       	ldi	r24, 0x01	; 1
    58aa:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    for(u8 o = 0;o<10;o++){
    58ae:	fe 01       	movw	r30, r28
    58b0:	e5 56       	subi	r30, 0x65	; 101
    58b2:	ff 4f       	sbci	r31, 0xFF	; 255
    58b4:	10 82       	st	Z, r1
    58b6:	99 c0       	rjmp	.+306    	; 0x59ea <main+0x1104>
			    LCD8Bit_Send_Command(0x01);
    58b8:	81 e0       	ldi	r24, 0x01	; 1
    58ba:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
			    LCD_Send_String("System Shutdown");
    58be:	81 eb       	ldi	r24, 0xB1	; 177
    58c0:	90 e0       	ldi	r25, 0x00	; 0
    58c2:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
				LCD_GOTOXY(0,1);
    58c6:	80 e0       	ldi	r24, 0x00	; 0
    58c8:	61 e0       	ldi	r22, 0x01	; 1
    58ca:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
				LCD_Send_Int(10-o);
    58ce:	fe 01       	movw	r30, r28
    58d0:	e5 56       	subi	r30, 0x65	; 101
    58d2:	ff 4f       	sbci	r31, 0xFF	; 255
    58d4:	80 81       	ld	r24, Z
    58d6:	28 2f       	mov	r18, r24
    58d8:	30 e0       	ldi	r19, 0x00	; 0
    58da:	8a e0       	ldi	r24, 0x0A	; 10
    58dc:	90 e0       	ldi	r25, 0x00	; 0
    58de:	82 1b       	sub	r24, r18
    58e0:	93 0b       	sbc	r25, r19
    58e2:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
			    LCD_Send_String(" Seconds");
    58e6:	81 ec       	ldi	r24, 0xC1	; 193
    58e8:	90 e0       	ldi	r25, 0x00	; 0
    58ea:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
    58ee:	80 e0       	ldi	r24, 0x00	; 0
    58f0:	90 e0       	ldi	r25, 0x00	; 0
    58f2:	aa e7       	ldi	r26, 0x7A	; 122
    58f4:	b4 e4       	ldi	r27, 0x44	; 68
    58f6:	8b 87       	std	Y+11, r24	; 0x0b
    58f8:	9c 87       	std	Y+12, r25	; 0x0c
    58fa:	ad 87       	std	Y+13, r26	; 0x0d
    58fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    58fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    5900:	7c 85       	ldd	r23, Y+12	; 0x0c
    5902:	8d 85       	ldd	r24, Y+13	; 0x0d
    5904:	9e 85       	ldd	r25, Y+14	; 0x0e
    5906:	20 e0       	ldi	r18, 0x00	; 0
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	4a ef       	ldi	r20, 0xFA	; 250
    590c:	54 e4       	ldi	r21, 0x44	; 68
    590e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5912:	dc 01       	movw	r26, r24
    5914:	cb 01       	movw	r24, r22
    5916:	8f 83       	std	Y+7, r24	; 0x07
    5918:	98 87       	std	Y+8, r25	; 0x08
    591a:	a9 87       	std	Y+9, r26	; 0x09
    591c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    591e:	6f 81       	ldd	r22, Y+7	; 0x07
    5920:	78 85       	ldd	r23, Y+8	; 0x08
    5922:	89 85       	ldd	r24, Y+9	; 0x09
    5924:	9a 85       	ldd	r25, Y+10	; 0x0a
    5926:	20 e0       	ldi	r18, 0x00	; 0
    5928:	30 e0       	ldi	r19, 0x00	; 0
    592a:	40 e8       	ldi	r20, 0x80	; 128
    592c:	5f e3       	ldi	r21, 0x3F	; 63
    592e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    5932:	88 23       	and	r24, r24
    5934:	2c f4       	brge	.+10     	; 0x5940 <main+0x105a>
		__ticks = 1;
    5936:	81 e0       	ldi	r24, 0x01	; 1
    5938:	90 e0       	ldi	r25, 0x00	; 0
    593a:	9e 83       	std	Y+6, r25	; 0x06
    593c:	8d 83       	std	Y+5, r24	; 0x05
    593e:	3f c0       	rjmp	.+126    	; 0x59be <main+0x10d8>
	else if (__tmp > 65535)
    5940:	6f 81       	ldd	r22, Y+7	; 0x07
    5942:	78 85       	ldd	r23, Y+8	; 0x08
    5944:	89 85       	ldd	r24, Y+9	; 0x09
    5946:	9a 85       	ldd	r25, Y+10	; 0x0a
    5948:	20 e0       	ldi	r18, 0x00	; 0
    594a:	3f ef       	ldi	r19, 0xFF	; 255
    594c:	4f e7       	ldi	r20, 0x7F	; 127
    594e:	57 e4       	ldi	r21, 0x47	; 71
    5950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    5954:	18 16       	cp	r1, r24
    5956:	4c f5       	brge	.+82     	; 0x59aa <main+0x10c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5958:	6b 85       	ldd	r22, Y+11	; 0x0b
    595a:	7c 85       	ldd	r23, Y+12	; 0x0c
    595c:	8d 85       	ldd	r24, Y+13	; 0x0d
    595e:	9e 85       	ldd	r25, Y+14	; 0x0e
    5960:	20 e0       	ldi	r18, 0x00	; 0
    5962:	30 e0       	ldi	r19, 0x00	; 0
    5964:	40 e2       	ldi	r20, 0x20	; 32
    5966:	51 e4       	ldi	r21, 0x41	; 65
    5968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    596c:	dc 01       	movw	r26, r24
    596e:	cb 01       	movw	r24, r22
    5970:	bc 01       	movw	r22, r24
    5972:	cd 01       	movw	r24, r26
    5974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5978:	dc 01       	movw	r26, r24
    597a:	cb 01       	movw	r24, r22
    597c:	9e 83       	std	Y+6, r25	; 0x06
    597e:	8d 83       	std	Y+5, r24	; 0x05
    5980:	0f c0       	rjmp	.+30     	; 0x59a0 <main+0x10ba>
    5982:	88 ec       	ldi	r24, 0xC8	; 200
    5984:	90 e0       	ldi	r25, 0x00	; 0
    5986:	9c 83       	std	Y+4, r25	; 0x04
    5988:	8b 83       	std	Y+3, r24	; 0x03
    598a:	8b 81       	ldd	r24, Y+3	; 0x03
    598c:	9c 81       	ldd	r25, Y+4	; 0x04
    598e:	01 97       	sbiw	r24, 0x01	; 1
    5990:	f1 f7       	brne	.-4      	; 0x598e <main+0x10a8>
    5992:	9c 83       	std	Y+4, r25	; 0x04
    5994:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5996:	8d 81       	ldd	r24, Y+5	; 0x05
    5998:	9e 81       	ldd	r25, Y+6	; 0x06
    599a:	01 97       	sbiw	r24, 0x01	; 1
    599c:	9e 83       	std	Y+6, r25	; 0x06
    599e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    59a0:	8d 81       	ldd	r24, Y+5	; 0x05
    59a2:	9e 81       	ldd	r25, Y+6	; 0x06
    59a4:	00 97       	sbiw	r24, 0x00	; 0
    59a6:	69 f7       	brne	.-38     	; 0x5982 <main+0x109c>
    59a8:	14 c0       	rjmp	.+40     	; 0x59d2 <main+0x10ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    59aa:	6f 81       	ldd	r22, Y+7	; 0x07
    59ac:	78 85       	ldd	r23, Y+8	; 0x08
    59ae:	89 85       	ldd	r24, Y+9	; 0x09
    59b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    59b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59b6:	dc 01       	movw	r26, r24
    59b8:	cb 01       	movw	r24, r22
    59ba:	9e 83       	std	Y+6, r25	; 0x06
    59bc:	8d 83       	std	Y+5, r24	; 0x05
    59be:	8d 81       	ldd	r24, Y+5	; 0x05
    59c0:	9e 81       	ldd	r25, Y+6	; 0x06
    59c2:	9a 83       	std	Y+2, r25	; 0x02
    59c4:	89 83       	std	Y+1, r24	; 0x01
    59c6:	89 81       	ldd	r24, Y+1	; 0x01
    59c8:	9a 81       	ldd	r25, Y+2	; 0x02
    59ca:	01 97       	sbiw	r24, 0x01	; 1
    59cc:	f1 f7       	brne	.-4      	; 0x59ca <main+0x10e4>
    59ce:	9a 83       	std	Y+2, r25	; 0x02
    59d0:	89 83       	std	Y+1, r24	; 0x01
			    _delay_ms(1000);
			    LCD8Bit_Send_Command(0x01);
    59d2:	81 e0       	ldi	r24, 0x01	; 1
    59d4:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		    LCD_Send_String("Wrong Password");
			LCD_GOTOXY(0,1);
		    LCD_Send_String("No tries left!");
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
		    for(u8 o = 0;o<10;o++){
    59d8:	de 01       	movw	r26, r28
    59da:	a5 56       	subi	r26, 0x65	; 101
    59dc:	bf 4f       	sbci	r27, 0xFF	; 255
    59de:	fe 01       	movw	r30, r28
    59e0:	e5 56       	subi	r30, 0x65	; 101
    59e2:	ff 4f       	sbci	r31, 0xFF	; 255
    59e4:	80 81       	ld	r24, Z
    59e6:	8f 5f       	subi	r24, 0xFF	; 255
    59e8:	8c 93       	st	X, r24
    59ea:	fe 01       	movw	r30, r28
    59ec:	e5 56       	subi	r30, 0x65	; 101
    59ee:	ff 4f       	sbci	r31, 0xFF	; 255
    59f0:	80 81       	ld	r24, Z
    59f2:	8a 30       	cpi	r24, 0x0A	; 10
    59f4:	08 f4       	brcc	.+2      	; 0x59f8 <main+0x1112>
    59f6:	60 cf       	rjmp	.-320    	; 0x58b8 <main+0xfd2>
	}

	//Entering Password
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
	for(u8 j=1;j<4;j++){
    59f8:	de 01       	movw	r26, r28
    59fa:	a3 56       	subi	r26, 0x63	; 99
    59fc:	bf 4f       	sbci	r27, 0xFF	; 255
    59fe:	fe 01       	movw	r30, r28
    5a00:	e3 56       	subi	r30, 0x63	; 99
    5a02:	ff 4f       	sbci	r31, 0xFF	; 255
    5a04:	80 81       	ld	r24, Z
    5a06:	8f 5f       	subi	r24, 0xFF	; 255
    5a08:	8c 93       	st	X, r24
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e3 56       	subi	r30, 0x63	; 99
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	80 81       	ld	r24, Z
    5a12:	84 30       	cpi	r24, 0x04	; 4
    5a14:	08 f4       	brcc	.+2      	; 0x5a18 <main+0x1132>
    5a16:	ce cc       	rjmp	.-1636   	; 0x53b4 <main+0xace>

		    }
		  }
		}

    LCD8Bit_Send_Command(0x01);
    5a18:	81 e0       	ldi	r24, 0x01	; 1
    5a1a:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>


    	//Servo opens (door)
        ServoAngle(openangle);
    5a1e:	87 ea       	ldi	r24, 0xA7	; 167
    5a20:	9f ef       	ldi	r25, 0xFF	; 255
    5a22:	0e 94 f4 2d 	call	0x5be8	; 0x5be8 <ServoAngle>
    	xTaskCreate(&SensorsReadings,NULL,100,&Sensors,0,NULL);
    5a26:	89 e5       	ldi	r24, 0x59	; 89
    5a28:	9e e2       	ldi	r25, 0x2E	; 46
    5a2a:	2d e2       	ldi	r18, 0x2D	; 45
    5a2c:	37 e0       	ldi	r19, 0x07	; 7
    5a2e:	60 e0       	ldi	r22, 0x00	; 0
    5a30:	70 e0       	ldi	r23, 0x00	; 0
    5a32:	44 e6       	ldi	r20, 0x64	; 100
    5a34:	50 e0       	ldi	r21, 0x00	; 0
    5a36:	00 e0       	ldi	r16, 0x00	; 0
    5a38:	ee 24       	eor	r14, r14
    5a3a:	ff 24       	eor	r15, r15
    5a3c:	cc 24       	eor	r12, r12
    5a3e:	dd 24       	eor	r13, r13
    5a40:	aa 24       	eor	r10, r10
    5a42:	bb 24       	eor	r11, r11
    5a44:	0e 94 9b 12 	call	0x2536	; 0x2536 <xTaskGenericCreate>
        xTaskCreate(&SensorsDisplay1,NULL,210,&Sensors,0,NULL);
    5a48:	8b e2       	ldi	r24, 0x2B	; 43
    5a4a:	9f e2       	ldi	r25, 0x2F	; 47
    5a4c:	2d e2       	ldi	r18, 0x2D	; 45
    5a4e:	37 e0       	ldi	r19, 0x07	; 7
    5a50:	60 e0       	ldi	r22, 0x00	; 0
    5a52:	70 e0       	ldi	r23, 0x00	; 0
    5a54:	42 ed       	ldi	r20, 0xD2	; 210
    5a56:	50 e0       	ldi	r21, 0x00	; 0
    5a58:	00 e0       	ldi	r16, 0x00	; 0
    5a5a:	ee 24       	eor	r14, r14
    5a5c:	ff 24       	eor	r15, r15
    5a5e:	cc 24       	eor	r12, r12
    5a60:	dd 24       	eor	r13, r13
    5a62:	aa 24       	eor	r10, r10
    5a64:	bb 24       	eor	r11, r11
    5a66:	0e 94 9b 12 	call	0x2536	; 0x2536 <xTaskGenericCreate>
        xTaskCreate(&SensorsDisplay2,NULL,210,&Sensors,0,NULL);
    5a6a:	84 e5       	ldi	r24, 0x54	; 84
    5a6c:	9f e2       	ldi	r25, 0x2F	; 47
    5a6e:	2d e2       	ldi	r18, 0x2D	; 45
    5a70:	37 e0       	ldi	r19, 0x07	; 7
    5a72:	60 e0       	ldi	r22, 0x00	; 0
    5a74:	70 e0       	ldi	r23, 0x00	; 0
    5a76:	42 ed       	ldi	r20, 0xD2	; 210
    5a78:	50 e0       	ldi	r21, 0x00	; 0
    5a7a:	00 e0       	ldi	r16, 0x00	; 0
    5a7c:	ee 24       	eor	r14, r14
    5a7e:	ff 24       	eor	r15, r15
    5a80:	cc 24       	eor	r12, r12
    5a82:	dd 24       	eor	r13, r13
    5a84:	aa 24       	eor	r10, r10
    5a86:	bb 24       	eor	r11, r11
    5a88:	0e 94 9b 12 	call	0x2536	; 0x2536 <xTaskGenericCreate>
        //xTaskCreate(&Cases,NULL,210,&Sensors,0,NULL);
        //xTaskCreate(&UserDemand,NULL,210,&command,0,NULL);


        vTaskStartScheduler();
    5a8c:	0e 94 94 14 	call	0x2928	; 0x2928 <vTaskStartScheduler>
    5a90:	ff cf       	rjmp	.-2      	; 0x5a90 <main+0x11aa>

00005a92 <__vector_1>:

  }

//Emergency Fire Bottom on Interrupt 0
void __vector_1 (void) __attribute__((signal));
void __vector_1(void){
    5a92:	1f 92       	push	r1
    5a94:	0f 92       	push	r0
    5a96:	0f b6       	in	r0, 0x3f	; 63
    5a98:	0f 92       	push	r0
    5a9a:	11 24       	eor	r1, r1
    5a9c:	2f 93       	push	r18
    5a9e:	3f 93       	push	r19
    5aa0:	4f 93       	push	r20
    5aa2:	5f 93       	push	r21
    5aa4:	6f 93       	push	r22
    5aa6:	7f 93       	push	r23
    5aa8:	8f 93       	push	r24
    5aaa:	9f 93       	push	r25
    5aac:	af 93       	push	r26
    5aae:	bf 93       	push	r27
    5ab0:	ef 93       	push	r30
    5ab2:	ff 93       	push	r31
    5ab4:	df 93       	push	r29
    5ab6:	cf 93       	push	r28
    5ab8:	cd b7       	in	r28, 0x3d	; 61
    5aba:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,HIGH);
    5abc:	81 e0       	ldi	r24, 0x01	; 1
    5abe:	66 e0       	ldi	r22, 0x06	; 6
    5ac0:	41 e0       	ldi	r20, 0x01	; 1
    5ac2:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	BuzzerON();
    5ac6:	0e 94 c9 23 	call	0x4792	; 0x4792 <BuzzerON>


}
    5aca:	cf 91       	pop	r28
    5acc:	df 91       	pop	r29
    5ace:	ff 91       	pop	r31
    5ad0:	ef 91       	pop	r30
    5ad2:	bf 91       	pop	r27
    5ad4:	af 91       	pop	r26
    5ad6:	9f 91       	pop	r25
    5ad8:	8f 91       	pop	r24
    5ada:	7f 91       	pop	r23
    5adc:	6f 91       	pop	r22
    5ade:	5f 91       	pop	r21
    5ae0:	4f 91       	pop	r20
    5ae2:	3f 91       	pop	r19
    5ae4:	2f 91       	pop	r18
    5ae6:	0f 90       	pop	r0
    5ae8:	0f be       	out	0x3f, r0	; 63
    5aea:	0f 90       	pop	r0
    5aec:	1f 90       	pop	r1
    5aee:	18 95       	reti

00005af0 <__vector_2>:

//Emergency Stop Bottom on Interrupt 1
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
    5af0:	1f 92       	push	r1
    5af2:	0f 92       	push	r0
    5af4:	0f b6       	in	r0, 0x3f	; 63
    5af6:	0f 92       	push	r0
    5af8:	11 24       	eor	r1, r1
    5afa:	2f 93       	push	r18
    5afc:	3f 93       	push	r19
    5afe:	4f 93       	push	r20
    5b00:	5f 93       	push	r21
    5b02:	6f 93       	push	r22
    5b04:	7f 93       	push	r23
    5b06:	8f 93       	push	r24
    5b08:	9f 93       	push	r25
    5b0a:	af 93       	push	r26
    5b0c:	bf 93       	push	r27
    5b0e:	ef 93       	push	r30
    5b10:	ff 93       	push	r31
    5b12:	df 93       	push	r29
    5b14:	cf 93       	push	r28
    5b16:	cd b7       	in	r28, 0x3d	; 61
    5b18:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,LOW);
    5b1a:	81 e0       	ldi	r24, 0x01	; 1
    5b1c:	66 e0       	ldi	r22, 0x06	; 6
    5b1e:	40 e0       	ldi	r20, 0x00	; 0
    5b20:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	BuzzerOFF();
    5b24:	0e 94 d5 23 	call	0x47aa	; 0x47aa <BuzzerOFF>


}
    5b28:	cf 91       	pop	r28
    5b2a:	df 91       	pop	r29
    5b2c:	ff 91       	pop	r31
    5b2e:	ef 91       	pop	r30
    5b30:	bf 91       	pop	r27
    5b32:	af 91       	pop	r26
    5b34:	9f 91       	pop	r25
    5b36:	8f 91       	pop	r24
    5b38:	7f 91       	pop	r23
    5b3a:	6f 91       	pop	r22
    5b3c:	5f 91       	pop	r21
    5b3e:	4f 91       	pop	r20
    5b40:	3f 91       	pop	r19
    5b42:	2f 91       	pop	r18
    5b44:	0f 90       	pop	r0
    5b46:	0f be       	out	0x3f, r0	; 63
    5b48:	0f 90       	pop	r0
    5b4a:	1f 90       	pop	r1
    5b4c:	18 95       	reti

00005b4e <BluetoothRead>:

//Bluetooth Get word
void BluetoothRead(char *array){
    5b4e:	df 93       	push	r29
    5b50:	cf 93       	push	r28
    5b52:	00 d0       	rcall	.+0      	; 0x5b54 <BluetoothRead+0x6>
    5b54:	00 d0       	rcall	.+0      	; 0x5b56 <BluetoothRead+0x8>
    5b56:	cd b7       	in	r28, 0x3d	; 61
    5b58:	de b7       	in	r29, 0x3e	; 62
    5b5a:	9c 83       	std	Y+4, r25	; 0x04
    5b5c:	8b 83       	std	Y+3, r24	; 0x03
	    u8 i = 0;
    5b5e:	1a 82       	std	Y+2, r1	; 0x02
	    ca = '/';
    5b60:	8f e2       	ldi	r24, 0x2F	; 47
    5b62:	80 93 44 07 	sts	0x0744, r24
    5b66:	35 c0       	rjmp	.+106    	; 0x5bd2 <BluetoothRead+0x84>
		while (ca!='*') {
		ca = UART_Receive();
    5b68:	0e 94 b6 19 	call	0x336c	; 0x336c <UART_Receive>
    5b6c:	80 93 44 07 	sts	0x0744, r24

		if (ca >= '1' && ca <= 'z'){
    5b70:	80 91 44 07 	lds	r24, 0x0744
    5b74:	81 33       	cpi	r24, 0x31	; 49
    5b76:	b0 f0       	brcs	.+44     	; 0x5ba4 <BluetoothRead+0x56>
    5b78:	80 91 44 07 	lds	r24, 0x0744
    5b7c:	8b 37       	cpi	r24, 0x7B	; 123
    5b7e:	90 f4       	brcc	.+36     	; 0x5ba4 <BluetoothRead+0x56>
		LCD8Bit_Send_Data(ca);
    5b80:	80 91 44 07 	lds	r24, 0x0744
    5b84:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
		array[i] = ca;
    5b88:	8a 81       	ldd	r24, Y+2	; 0x02
    5b8a:	28 2f       	mov	r18, r24
    5b8c:	30 e0       	ldi	r19, 0x00	; 0
    5b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    5b90:	9c 81       	ldd	r25, Y+4	; 0x04
    5b92:	fc 01       	movw	r30, r24
    5b94:	e2 0f       	add	r30, r18
    5b96:	f3 1f       	adc	r31, r19
    5b98:	80 91 44 07 	lds	r24, 0x0744
    5b9c:	80 83       	st	Z, r24
        i++;
    5b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    5ba0:	8f 5f       	subi	r24, 0xFF	; 255
    5ba2:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(ca == '*'){
    5ba4:	80 91 44 07 	lds	r24, 0x0744
    5ba8:	8a 32       	cpi	r24, 0x2A	; 42
    5baa:	99 f4       	brne	.+38     	; 0x5bd2 <BluetoothRead+0x84>
		for(u8 i =0;i<4;i++)
    5bac:	19 82       	std	Y+1, r1	; 0x01
    5bae:	0e c0       	rjmp	.+28     	; 0x5bcc <BluetoothRead+0x7e>
			LCD8Bit_Send_Data(array[i]);
    5bb0:	89 81       	ldd	r24, Y+1	; 0x01
    5bb2:	28 2f       	mov	r18, r24
    5bb4:	30 e0       	ldi	r19, 0x00	; 0
    5bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb8:	9c 81       	ldd	r25, Y+4	; 0x04
    5bba:	fc 01       	movw	r30, r24
    5bbc:	e2 0f       	add	r30, r18
    5bbe:	f3 1f       	adc	r31, r19
    5bc0:	80 81       	ld	r24, Z
    5bc2:	0e 94 6c 21 	call	0x42d8	; 0x42d8 <LCD8Bit_Send_Data>
		LCD8Bit_Send_Data(ca);
		array[i] = ca;
        i++;
		}
		if(ca == '*'){
		for(u8 i =0;i<4;i++)
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	8f 5f       	subi	r24, 0xFF	; 255
    5bca:	89 83       	std	Y+1, r24	; 0x01
    5bcc:	89 81       	ldd	r24, Y+1	; 0x01
    5bce:	84 30       	cpi	r24, 0x04	; 4
    5bd0:	78 f3       	brcs	.-34     	; 0x5bb0 <BluetoothRead+0x62>

//Bluetooth Get word
void BluetoothRead(char *array){
	    u8 i = 0;
	    ca = '/';
		while (ca!='*') {
    5bd2:	80 91 44 07 	lds	r24, 0x0744
    5bd6:	8a 32       	cpi	r24, 0x2A	; 42
    5bd8:	39 f6       	brne	.-114    	; 0x5b68 <BluetoothRead+0x1a>
		for(u8 i =0;i<4;i++)
			LCD8Bit_Send_Data(array[i]);

		}
    }
}
    5bda:	0f 90       	pop	r0
    5bdc:	0f 90       	pop	r0
    5bde:	0f 90       	pop	r0
    5be0:	0f 90       	pop	r0
    5be2:	cf 91       	pop	r28
    5be4:	df 91       	pop	r29
    5be6:	08 95       	ret

00005be8 <ServoAngle>:
// Servo Function (interpolations)
void ServoAngle(s8 angle){
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	df 93       	push	r29
    5bee:	cf 93       	push	r28
    5bf0:	0f 92       	push	r0
    5bf2:	cd b7       	in	r28, 0x3d	; 61
    5bf4:	de b7       	in	r29, 0x3e	; 62
    5bf6:	89 83       	std	Y+1, r24	; 0x01
	if(angle>= -90 && angle <= 90)
    5bf8:	89 81       	ldd	r24, Y+1	; 0x01
    5bfa:	86 3a       	cpi	r24, 0xA6	; 166
    5bfc:	c4 f1       	brlt	.+112    	; 0x5c6e <ServoAngle+0x86>
    5bfe:	89 81       	ldd	r24, Y+1	; 0x01
    5c00:	8b 35       	cpi	r24, 0x5B	; 91
    5c02:	ac f5       	brge	.+106    	; 0x5c6e <ServoAngle+0x86>
    OCR1A = ((1000.0/180.0)*(angle+90.0))+1000.0;
    5c04:	0a e4       	ldi	r16, 0x4A	; 74
    5c06:	10 e0       	ldi	r17, 0x00	; 0
    5c08:	89 81       	ldd	r24, Y+1	; 0x01
    5c0a:	99 27       	eor	r25, r25
    5c0c:	87 fd       	sbrc	r24, 7
    5c0e:	90 95       	com	r25
    5c10:	a9 2f       	mov	r26, r25
    5c12:	b9 2f       	mov	r27, r25
    5c14:	bc 01       	movw	r22, r24
    5c16:	cd 01       	movw	r24, r26
    5c18:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    5c1c:	dc 01       	movw	r26, r24
    5c1e:	cb 01       	movw	r24, r22
    5c20:	bc 01       	movw	r22, r24
    5c22:	cd 01       	movw	r24, r26
    5c24:	20 e0       	ldi	r18, 0x00	; 0
    5c26:	30 e0       	ldi	r19, 0x00	; 0
    5c28:	44 eb       	ldi	r20, 0xB4	; 180
    5c2a:	52 e4       	ldi	r21, 0x42	; 66
    5c2c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5c30:	dc 01       	movw	r26, r24
    5c32:	cb 01       	movw	r24, r22
    5c34:	bc 01       	movw	r22, r24
    5c36:	cd 01       	movw	r24, r26
    5c38:	2c e1       	ldi	r18, 0x1C	; 28
    5c3a:	37 ec       	ldi	r19, 0xC7	; 199
    5c3c:	41 eb       	ldi	r20, 0xB1	; 177
    5c3e:	50 e4       	ldi	r21, 0x40	; 64
    5c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c44:	dc 01       	movw	r26, r24
    5c46:	cb 01       	movw	r24, r22
    5c48:	bc 01       	movw	r22, r24
    5c4a:	cd 01       	movw	r24, r26
    5c4c:	20 e0       	ldi	r18, 0x00	; 0
    5c4e:	30 e0       	ldi	r19, 0x00	; 0
    5c50:	4a e7       	ldi	r20, 0x7A	; 122
    5c52:	54 e4       	ldi	r21, 0x44	; 68
    5c54:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    5c58:	dc 01       	movw	r26, r24
    5c5a:	cb 01       	movw	r24, r22
    5c5c:	bc 01       	movw	r22, r24
    5c5e:	cd 01       	movw	r24, r26
    5c60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c64:	dc 01       	movw	r26, r24
    5c66:	cb 01       	movw	r24, r22
    5c68:	f8 01       	movw	r30, r16
    5c6a:	91 83       	std	Z+1, r25	; 0x01
    5c6c:	80 83       	st	Z, r24
    if(OCR1A == 2000)
    5c6e:	ea e4       	ldi	r30, 0x4A	; 74
    5c70:	f0 e0       	ldi	r31, 0x00	; 0
    5c72:	80 81       	ld	r24, Z
    5c74:	91 81       	ldd	r25, Z+1	; 0x01
    5c76:	f7 e0       	ldi	r31, 0x07	; 7
    5c78:	80 3d       	cpi	r24, 0xD0	; 208
    5c7a:	9f 07       	cpc	r25, r31
    5c7c:	31 f4       	brne	.+12     	; 0x5c8a <ServoAngle+0xa2>
    	OCR1A = 1999;
    5c7e:	ea e4       	ldi	r30, 0x4A	; 74
    5c80:	f0 e0       	ldi	r31, 0x00	; 0
    5c82:	8f ec       	ldi	r24, 0xCF	; 207
    5c84:	97 e0       	ldi	r25, 0x07	; 7
    5c86:	91 83       	std	Z+1, r25	; 0x01
    5c88:	80 83       	st	Z, r24
    if(OCR1A == -90)
    5c8a:	ea e4       	ldi	r30, 0x4A	; 74
    5c8c:	f0 e0       	ldi	r31, 0x00	; 0
    5c8e:	80 81       	ld	r24, Z
    5c90:	91 81       	ldd	r25, Z+1	; 0x01
    5c92:	2f ef       	ldi	r18, 0xFF	; 255
    5c94:	86 3a       	cpi	r24, 0xA6	; 166
    5c96:	92 07       	cpc	r25, r18
    5c98:	31 f4       	brne	.+12     	; 0x5ca6 <ServoAngle+0xbe>
    	OCR1A = 1001;
    5c9a:	ea e4       	ldi	r30, 0x4A	; 74
    5c9c:	f0 e0       	ldi	r31, 0x00	; 0
    5c9e:	89 ee       	ldi	r24, 0xE9	; 233
    5ca0:	93 e0       	ldi	r25, 0x03	; 3
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	80 83       	st	Z, r24
}
    5ca6:	0f 90       	pop	r0
    5ca8:	cf 91       	pop	r28
    5caa:	df 91       	pop	r29
    5cac:	1f 91       	pop	r17
    5cae:	0f 91       	pop	r16
    5cb0:	08 95       	ret

00005cb2 <SensorsReadings>:

//RTOS Functions
void SensorsReadings(u16* Sensors){
    5cb2:	0f 93       	push	r16
    5cb4:	1f 93       	push	r17
    5cb6:	df 93       	push	r29
    5cb8:	cf 93       	push	r28
    5cba:	00 d0       	rcall	.+0      	; 0x5cbc <SensorsReadings+0xa>
    5cbc:	cd b7       	in	r28, 0x3d	; 61
    5cbe:	de b7       	in	r29, 0x3e	; 62
    5cc0:	9a 83       	std	Y+2, r25	; 0x02
    5cc2:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		Sensors[0] = ADC_Read_Sych(2)* 500UL/65536UL; //LM35
    5cc4:	82 e0       	ldi	r24, 0x02	; 2
    5cc6:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <ADC_Read_Sych>
    5cca:	cc 01       	movw	r24, r24
    5ccc:	a0 e0       	ldi	r26, 0x00	; 0
    5cce:	b0 e0       	ldi	r27, 0x00	; 0
    5cd0:	24 ef       	ldi	r18, 0xF4	; 244
    5cd2:	31 e0       	ldi	r19, 0x01	; 1
    5cd4:	40 e0       	ldi	r20, 0x00	; 0
    5cd6:	50 e0       	ldi	r21, 0x00	; 0
    5cd8:	bc 01       	movw	r22, r24
    5cda:	cd 01       	movw	r24, r26
    5cdc:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__mulsi3>
    5ce0:	dc 01       	movw	r26, r24
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	cd 01       	movw	r24, r26
    5ce6:	aa 27       	eor	r26, r26
    5ce8:	bb 27       	eor	r27, r27
    5cea:	e9 81       	ldd	r30, Y+1	; 0x01
    5cec:	fa 81       	ldd	r31, Y+2	; 0x02
    5cee:	91 83       	std	Z+1, r25	; 0x01
    5cf0:	80 83       	st	Z, r24
		Sensors[1] = (ADC_Read_Sych(3)*5000UL)/ 65536UL;//photoresistor_reading
    5cf2:	89 81       	ldd	r24, Y+1	; 0x01
    5cf4:	9a 81       	ldd	r25, Y+2	; 0x02
    5cf6:	8c 01       	movw	r16, r24
    5cf8:	0e 5f       	subi	r16, 0xFE	; 254
    5cfa:	1f 4f       	sbci	r17, 0xFF	; 255
    5cfc:	83 e0       	ldi	r24, 0x03	; 3
    5cfe:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <ADC_Read_Sych>
    5d02:	cc 01       	movw	r24, r24
    5d04:	a0 e0       	ldi	r26, 0x00	; 0
    5d06:	b0 e0       	ldi	r27, 0x00	; 0
    5d08:	28 e8       	ldi	r18, 0x88	; 136
    5d0a:	33 e1       	ldi	r19, 0x13	; 19
    5d0c:	40 e0       	ldi	r20, 0x00	; 0
    5d0e:	50 e0       	ldi	r21, 0x00	; 0
    5d10:	bc 01       	movw	r22, r24
    5d12:	cd 01       	movw	r24, r26
    5d14:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__mulsi3>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	aa 27       	eor	r26, r26
    5d20:	bb 27       	eor	r27, r27
    5d22:	f8 01       	movw	r30, r16
    5d24:	91 83       	std	Z+1, r25	; 0x01
    5d26:	80 83       	st	Z, r24
	    Sensors[2] = (ADC_Read_Sych(4) * 5000UL) / 65536UL;//infrared_reading
    5d28:	89 81       	ldd	r24, Y+1	; 0x01
    5d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    5d2c:	8c 01       	movw	r16, r24
    5d2e:	0c 5f       	subi	r16, 0xFC	; 252
    5d30:	1f 4f       	sbci	r17, 0xFF	; 255
    5d32:	84 e0       	ldi	r24, 0x04	; 4
    5d34:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <ADC_Read_Sych>
    5d38:	cc 01       	movw	r24, r24
    5d3a:	a0 e0       	ldi	r26, 0x00	; 0
    5d3c:	b0 e0       	ldi	r27, 0x00	; 0
    5d3e:	28 e8       	ldi	r18, 0x88	; 136
    5d40:	33 e1       	ldi	r19, 0x13	; 19
    5d42:	40 e0       	ldi	r20, 0x00	; 0
    5d44:	50 e0       	ldi	r21, 0x00	; 0
    5d46:	bc 01       	movw	r22, r24
    5d48:	cd 01       	movw	r24, r26
    5d4a:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__mulsi3>
    5d4e:	dc 01       	movw	r26, r24
    5d50:	cb 01       	movw	r24, r22
    5d52:	cd 01       	movw	r24, r26
    5d54:	aa 27       	eor	r26, r26
    5d56:	bb 27       	eor	r27, r27
    5d58:	f8 01       	movw	r30, r16
    5d5a:	91 83       	std	Z+1, r25	; 0x01
    5d5c:	80 83       	st	Z, r24
	    Sensors[3] = ADC_Read_Sych(5) * 5UL / 65536UL;//potentiometer_reading
    5d5e:	89 81       	ldd	r24, Y+1	; 0x01
    5d60:	9a 81       	ldd	r25, Y+2	; 0x02
    5d62:	8c 01       	movw	r16, r24
    5d64:	0a 5f       	subi	r16, 0xFA	; 250
    5d66:	1f 4f       	sbci	r17, 0xFF	; 255
    5d68:	85 e0       	ldi	r24, 0x05	; 5
    5d6a:	0e 94 8a 1f 	call	0x3f14	; 0x3f14 <ADC_Read_Sych>
    5d6e:	9c 01       	movw	r18, r24
    5d70:	40 e0       	ldi	r20, 0x00	; 0
    5d72:	50 e0       	ldi	r21, 0x00	; 0
    5d74:	da 01       	movw	r26, r20
    5d76:	c9 01       	movw	r24, r18
    5d78:	88 0f       	add	r24, r24
    5d7a:	99 1f       	adc	r25, r25
    5d7c:	aa 1f       	adc	r26, r26
    5d7e:	bb 1f       	adc	r27, r27
    5d80:	88 0f       	add	r24, r24
    5d82:	99 1f       	adc	r25, r25
    5d84:	aa 1f       	adc	r26, r26
    5d86:	bb 1f       	adc	r27, r27
    5d88:	82 0f       	add	r24, r18
    5d8a:	93 1f       	adc	r25, r19
    5d8c:	a4 1f       	adc	r26, r20
    5d8e:	b5 1f       	adc	r27, r21
    5d90:	cd 01       	movw	r24, r26
    5d92:	aa 27       	eor	r26, r26
    5d94:	bb 27       	eor	r27, r27
    5d96:	f8 01       	movw	r30, r16
    5d98:	91 83       	std	Z+1, r25	; 0x01
    5d9a:	80 83       	st	Z, r24
		//Temperature
	    if(Sensors[0] > MAX_TEMP){
    5d9c:	e9 81       	ldd	r30, Y+1	; 0x01
    5d9e:	fa 81       	ldd	r31, Y+2	; 0x02
    5da0:	80 81       	ld	r24, Z
    5da2:	91 81       	ldd	r25, Z+1	; 0x01
    5da4:	8e 32       	cpi	r24, 0x2E	; 46
    5da6:	91 05       	cpc	r25, r1
    5da8:	20 f0       	brcs	.+8      	; 0x5db2 <SensorsReadings+0x100>
	    	BuzzerTOGGLE(1);
    5daa:	81 e0       	ldi	r24, 0x01	; 1
    5dac:	90 e0       	ldi	r25, 0x00	; 0
    5dae:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <BuzzerTOGGLE>
	    }
	    //Light System
	    if(Sensors[1] < MIN_LIGHT){
    5db2:	89 81       	ldd	r24, Y+1	; 0x01
    5db4:	9a 81       	ldd	r25, Y+2	; 0x02
    5db6:	fc 01       	movw	r30, r24
    5db8:	32 96       	adiw	r30, 0x02	; 2
    5dba:	80 81       	ld	r24, Z
    5dbc:	91 81       	ldd	r25, Z+1	; 0x01
    5dbe:	f3 e0       	ldi	r31, 0x03	; 3
    5dc0:	80 32       	cpi	r24, 0x20	; 32
    5dc2:	9f 07       	cpc	r25, r31
    5dc4:	28 f4       	brcc	.+10     	; 0x5dd0 <SensorsReadings+0x11e>
	    	DIO_SetPin_Value(lamp220PORT,lamp220PIN,HIGH);
    5dc6:	81 e0       	ldi	r24, 0x01	; 1
    5dc8:	65 e0       	ldi	r22, 0x05	; 5
    5dca:	41 e0       	ldi	r20, 0x01	; 1
    5dcc:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }
	    if(Sensors[1] >= MIN_LIGHT){
    5dd0:	89 81       	ldd	r24, Y+1	; 0x01
    5dd2:	9a 81       	ldd	r25, Y+2	; 0x02
    5dd4:	fc 01       	movw	r30, r24
    5dd6:	32 96       	adiw	r30, 0x02	; 2
    5dd8:	80 81       	ld	r24, Z
    5dda:	91 81       	ldd	r25, Z+1	; 0x01
    5ddc:	23 e0       	ldi	r18, 0x03	; 3
    5dde:	80 32       	cpi	r24, 0x20	; 32
    5de0:	92 07       	cpc	r25, r18
    5de2:	28 f0       	brcs	.+10     	; 0x5dee <SensorsReadings+0x13c>
	    	DIO_SetPin_Value(lamp220PORT,lamp220PIN,LOW);
    5de4:	81 e0       	ldi	r24, 0x01	; 1
    5de6:	65 e0       	ldi	r22, 0x05	; 5
    5de8:	40 e0       	ldi	r20, 0x00	; 0
    5dea:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>

	    //Emergency
	    /*Emergency is done by interrupt*/

	    //Set motor fan of lm35
	    if(Sensors[0]>30 ){
    5dee:	e9 81       	ldd	r30, Y+1	; 0x01
    5df0:	fa 81       	ldd	r31, Y+2	; 0x02
    5df2:	80 81       	ld	r24, Z
    5df4:	91 81       	ldd	r25, Z+1	; 0x01
    5df6:	8f 31       	cpi	r24, 0x1F	; 31
    5df8:	91 05       	cpc	r25, r1
    5dfa:	28 f0       	brcs	.+10     	; 0x5e06 <SensorsReadings+0x154>
	    	DIO_SetPin_Value(GroupB,PIN3,HIGH);
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	63 e0       	ldi	r22, 0x03	; 3
    5e00:	41 e0       	ldi	r20, 0x01	; 1
    5e02:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }
	    if (Sensors[0]<30){
    5e06:	e9 81       	ldd	r30, Y+1	; 0x01
    5e08:	fa 81       	ldd	r31, Y+2	; 0x02
    5e0a:	80 81       	ld	r24, Z
    5e0c:	91 81       	ldd	r25, Z+1	; 0x01
    5e0e:	8e 31       	cpi	r24, 0x1E	; 30
    5e10:	91 05       	cpc	r25, r1
    5e12:	28 f4       	brcc	.+10     	; 0x5e1e <SensorsReadings+0x16c>
	    	DIO_SetPin_Value(GroupB,PIN3,LOW);
    5e14:	81 e0       	ldi	r24, 0x01	; 1
    5e16:	63 e0       	ldi	r22, 0x03	; 3
    5e18:	40 e0       	ldi	r20, 0x00	; 0
    5e1a:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }

	    //Set motor fan by Variable Resitor
	    OCR2_REG = Sensors[3]*60UL;
    5e1e:	03 e4       	ldi	r16, 0x43	; 67
    5e20:	10 e0       	ldi	r17, 0x00	; 0
    5e22:	89 81       	ldd	r24, Y+1	; 0x01
    5e24:	9a 81       	ldd	r25, Y+2	; 0x02
    5e26:	fc 01       	movw	r30, r24
    5e28:	36 96       	adiw	r30, 0x06	; 6
    5e2a:	80 81       	ld	r24, Z
    5e2c:	91 81       	ldd	r25, Z+1	; 0x01
    5e2e:	cc 01       	movw	r24, r24
    5e30:	a0 e0       	ldi	r26, 0x00	; 0
    5e32:	b0 e0       	ldi	r27, 0x00	; 0
    5e34:	2c e3       	ldi	r18, 0x3C	; 60
    5e36:	30 e0       	ldi	r19, 0x00	; 0
    5e38:	40 e0       	ldi	r20, 0x00	; 0
    5e3a:	50 e0       	ldi	r21, 0x00	; 0
    5e3c:	bc 01       	movw	r22, r24
    5e3e:	cd 01       	movw	r24, r26
    5e40:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__mulsi3>
    5e44:	dc 01       	movw	r26, r24
    5e46:	cb 01       	movw	r24, r22
    5e48:	f8 01       	movw	r30, r16
    5e4a:	80 83       	st	Z, r24
	    vTaskDelay(400);
    5e4c:	80 e9       	ldi	r24, 0x90	; 144
    5e4e:	91 e0       	ldi	r25, 0x01	; 1
    5e50:	0e 94 5f 14 	call	0x28be	; 0x28be <vTaskDelay>
    5e54:	37 cf       	rjmp	.-402    	; 0x5cc4 <SensorsReadings+0x12>

00005e56 <SensorsDisplay1>:
	}


}

void SensorsDisplay1(u16* Sensors){
    5e56:	df 93       	push	r29
    5e58:	cf 93       	push	r28
    5e5a:	00 d0       	rcall	.+0      	; 0x5e5c <SensorsDisplay1+0x6>
    5e5c:	cd b7       	in	r28, 0x3d	; 61
    5e5e:	de b7       	in	r29, 0x3e	; 62
    5e60:	9a 83       	std	Y+2, r25	; 0x02
    5e62:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		LCD8Bit_Send_Command(0x01);
    5e64:	81 e0       	ldi	r24, 0x01	; 1
    5e66:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		LCD_Send_String("Temperature:");
    5e6a:	8c ee       	ldi	r24, 0xEC	; 236
    5e6c:	90 e0       	ldi	r25, 0x00	; 0
    5e6e:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_Send_Int(Sensors[0]);
    5e72:	e9 81       	ldd	r30, Y+1	; 0x01
    5e74:	fa 81       	ldd	r31, Y+2	; 0x02
    5e76:	80 81       	ld	r24, Z
    5e78:	91 81       	ldd	r25, Z+1	; 0x01
    5e7a:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
		LCD_GOTOXY(0,1);
    5e7e:	80 e0       	ldi	r24, 0x00	; 0
    5e80:	61 e0       	ldi	r22, 0x01	; 1
    5e82:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
		LCD_Send_String("Fan Speed:");
    5e86:	89 ef       	ldi	r24, 0xF9	; 249
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_Send_Int(Sensors[3]);
    5e8e:	89 81       	ldd	r24, Y+1	; 0x01
    5e90:	9a 81       	ldd	r25, Y+2	; 0x02
    5e92:	fc 01       	movw	r30, r24
    5e94:	36 96       	adiw	r30, 0x06	; 6
    5e96:	80 81       	ld	r24, Z
    5e98:	91 81       	ldd	r25, Z+1	; 0x01
    5e9a:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
	    vTaskDelay(1000);
    5e9e:	88 ee       	ldi	r24, 0xE8	; 232
    5ea0:	93 e0       	ldi	r25, 0x03	; 3
    5ea2:	0e 94 5f 14 	call	0x28be	; 0x28be <vTaskDelay>
    5ea6:	de cf       	rjmp	.-68     	; 0x5e64 <SensorsDisplay1+0xe>

00005ea8 <SensorsDisplay2>:

	}
}
void SensorsDisplay2(u16* Sensors){
    5ea8:	df 93       	push	r29
    5eaa:	cf 93       	push	r28
    5eac:	00 d0       	rcall	.+0      	; 0x5eae <SensorsDisplay2+0x6>
    5eae:	cd b7       	in	r28, 0x3d	; 61
    5eb0:	de b7       	in	r29, 0x3e	; 62
    5eb2:	9a 83       	std	Y+2, r25	; 0x02
    5eb4:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		LCD8Bit_Send_Command(0x01);
    5eb6:	81 e0       	ldi	r24, 0x01	; 1
    5eb8:	0e 94 61 20 	call	0x40c2	; 0x40c2 <LCD8Bit_Send_Command>
		LCD_Send_String("LDR:");
    5ebc:	84 e0       	ldi	r24, 0x04	; 4
    5ebe:	91 e0       	ldi	r25, 0x01	; 1
    5ec0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_Send_Int(Sensors[1]);
    5ec4:	89 81       	ldd	r24, Y+1	; 0x01
    5ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec8:	fc 01       	movw	r30, r24
    5eca:	32 96       	adiw	r30, 0x02	; 2
    5ecc:	80 81       	ld	r24, Z
    5ece:	91 81       	ldd	r25, Z+1	; 0x01
    5ed0:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
		LCD_GOTOXY(0,1);
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	61 e0       	ldi	r22, 0x01	; 1
    5ed8:	0e 94 51 23 	call	0x46a2	; 0x46a2 <LCD_GOTOXY>
		LCD_Send_String("Infrared:");
    5edc:	89 e0       	ldi	r24, 0x09	; 9
    5ede:	91 e0       	ldi	r25, 0x01	; 1
    5ee0:	0e 94 05 23 	call	0x460a	; 0x460a <LCD_Send_String>
		LCD_Send_Int(Sensors[2]);
    5ee4:	89 81       	ldd	r24, Y+1	; 0x01
    5ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ee8:	fc 01       	movw	r30, r24
    5eea:	34 96       	adiw	r30, 0x04	; 4
    5eec:	80 81       	ld	r24, Z
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	0e 94 2e 23 	call	0x465c	; 0x465c <LCD_Send_Int>
	    vTaskDelay(1200);
    5ef4:	80 eb       	ldi	r24, 0xB0	; 176
    5ef6:	94 e0       	ldi	r25, 0x04	; 4
    5ef8:	0e 94 5f 14 	call	0x28be	; 0x28be <vTaskDelay>
    5efc:	dc cf       	rjmp	.-72     	; 0x5eb6 <SensorsDisplay2+0xe>

00005efe <Cases>:
       }
    }
    //vTaskDelay(1000);
   }
}*/
void Cases(u16* SensorsPtr){
    5efe:	0f 93       	push	r16
    5f00:	1f 93       	push	r17
    5f02:	df 93       	push	r29
    5f04:	cf 93       	push	r28
    5f06:	00 d0       	rcall	.+0      	; 0x5f08 <Cases+0xa>
    5f08:	cd b7       	in	r28, 0x3d	; 61
    5f0a:	de b7       	in	r29, 0x3e	; 62
    5f0c:	9a 83       	std	Y+2, r25	; 0x02
    5f0e:	89 83       	std	Y+1, r24	; 0x01
	while(1){
		//Temperature
	    if(Sensors[0] > MAX_TEMP){
    5f10:	80 91 2d 07 	lds	r24, 0x072D
    5f14:	90 91 2e 07 	lds	r25, 0x072E
    5f18:	8e 32       	cpi	r24, 0x2E	; 46
    5f1a:	91 05       	cpc	r25, r1
    5f1c:	20 f0       	brcs	.+8      	; 0x5f26 <Cases+0x28>
	    	BuzzerTOGGLE(1);
    5f1e:	81 e0       	ldi	r24, 0x01	; 1
    5f20:	90 e0       	ldi	r25, 0x00	; 0
    5f22:	0e 94 e1 23 	call	0x47c2	; 0x47c2 <BuzzerTOGGLE>
	    }
	    //Light System
	    if(Sensors[1] < MIN_LIGHT){
    5f26:	80 91 2f 07 	lds	r24, 0x072F
    5f2a:	90 91 30 07 	lds	r25, 0x0730
    5f2e:	23 e0       	ldi	r18, 0x03	; 3
    5f30:	80 32       	cpi	r24, 0x20	; 32
    5f32:	92 07       	cpc	r25, r18
    5f34:	28 f4       	brcc	.+10     	; 0x5f40 <Cases+0x42>
	    	DIO_SetPin_Value(lamp220PORT,lamp220PIN,HIGH);
    5f36:	81 e0       	ldi	r24, 0x01	; 1
    5f38:	65 e0       	ldi	r22, 0x05	; 5
    5f3a:	41 e0       	ldi	r20, 0x01	; 1
    5f3c:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }
	    if(Sensors[1] >= MIN_LIGHT){
    5f40:	80 91 2f 07 	lds	r24, 0x072F
    5f44:	90 91 30 07 	lds	r25, 0x0730
    5f48:	e3 e0       	ldi	r30, 0x03	; 3
    5f4a:	80 32       	cpi	r24, 0x20	; 32
    5f4c:	9e 07       	cpc	r25, r30
    5f4e:	28 f0       	brcs	.+10     	; 0x5f5a <Cases+0x5c>
	    	DIO_SetPin_Value(lamp220PORT,lamp220PIN,LOW);
    5f50:	81 e0       	ldi	r24, 0x01	; 1
    5f52:	65 e0       	ldi	r22, 0x05	; 5
    5f54:	40 e0       	ldi	r20, 0x00	; 0
    5f56:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>

	    //Emergency
	    /*Emergency is done by interrupt*/

	    //Set motor fan of lm35
	    if(Sensors[0]>30 ){
    5f5a:	80 91 2d 07 	lds	r24, 0x072D
    5f5e:	90 91 2e 07 	lds	r25, 0x072E
    5f62:	8f 31       	cpi	r24, 0x1F	; 31
    5f64:	91 05       	cpc	r25, r1
    5f66:	28 f0       	brcs	.+10     	; 0x5f72 <Cases+0x74>
	    	DIO_SetPin_Value(GroupB,PIN3,HIGH);
    5f68:	81 e0       	ldi	r24, 0x01	; 1
    5f6a:	63 e0       	ldi	r22, 0x03	; 3
    5f6c:	41 e0       	ldi	r20, 0x01	; 1
    5f6e:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }
	    if (Sensors[0]<30){
    5f72:	80 91 2d 07 	lds	r24, 0x072D
    5f76:	90 91 2e 07 	lds	r25, 0x072E
    5f7a:	8e 31       	cpi	r24, 0x1E	; 30
    5f7c:	91 05       	cpc	r25, r1
    5f7e:	28 f4       	brcc	.+10     	; 0x5f8a <Cases+0x8c>
	    	DIO_SetPin_Value(GroupB,PIN3,LOW);
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	63 e0       	ldi	r22, 0x03	; 3
    5f84:	40 e0       	ldi	r20, 0x00	; 0
    5f86:	0e 94 56 1c 	call	0x38ac	; 0x38ac <DIO_SetPin_Value>
	    }

	    //Set motor fan by Variable Resitor
	    OCR2_REG = Sensors[3]*60UL;
    5f8a:	03 e4       	ldi	r16, 0x43	; 67
    5f8c:	10 e0       	ldi	r17, 0x00	; 0
    5f8e:	80 91 33 07 	lds	r24, 0x0733
    5f92:	90 91 34 07 	lds	r25, 0x0734
    5f96:	cc 01       	movw	r24, r24
    5f98:	a0 e0       	ldi	r26, 0x00	; 0
    5f9a:	b0 e0       	ldi	r27, 0x00	; 0
    5f9c:	2c e3       	ldi	r18, 0x3C	; 60
    5f9e:	30 e0       	ldi	r19, 0x00	; 0
    5fa0:	40 e0       	ldi	r20, 0x00	; 0
    5fa2:	50 e0       	ldi	r21, 0x00	; 0
    5fa4:	bc 01       	movw	r22, r24
    5fa6:	cd 01       	movw	r24, r26
    5fa8:	0e 94 df 2f 	call	0x5fbe	; 0x5fbe <__mulsi3>
    5fac:	dc 01       	movw	r26, r24
    5fae:	cb 01       	movw	r24, r22
    5fb0:	f8 01       	movw	r30, r16
    5fb2:	80 83       	st	Z, r24
	    vTaskDelay(500);
    5fb4:	84 ef       	ldi	r24, 0xF4	; 244
    5fb6:	91 e0       	ldi	r25, 0x01	; 1
    5fb8:	0e 94 5f 14 	call	0x28be	; 0x28be <vTaskDelay>
    5fbc:	a9 cf       	rjmp	.-174    	; 0x5f10 <Cases+0x12>

00005fbe <__mulsi3>:
    5fbe:	62 9f       	mul	r22, r18
    5fc0:	d0 01       	movw	r26, r0
    5fc2:	73 9f       	mul	r23, r19
    5fc4:	f0 01       	movw	r30, r0
    5fc6:	82 9f       	mul	r24, r18
    5fc8:	e0 0d       	add	r30, r0
    5fca:	f1 1d       	adc	r31, r1
    5fcc:	64 9f       	mul	r22, r20
    5fce:	e0 0d       	add	r30, r0
    5fd0:	f1 1d       	adc	r31, r1
    5fd2:	92 9f       	mul	r25, r18
    5fd4:	f0 0d       	add	r31, r0
    5fd6:	83 9f       	mul	r24, r19
    5fd8:	f0 0d       	add	r31, r0
    5fda:	74 9f       	mul	r23, r20
    5fdc:	f0 0d       	add	r31, r0
    5fde:	65 9f       	mul	r22, r21
    5fe0:	f0 0d       	add	r31, r0
    5fe2:	99 27       	eor	r25, r25
    5fe4:	72 9f       	mul	r23, r18
    5fe6:	b0 0d       	add	r27, r0
    5fe8:	e1 1d       	adc	r30, r1
    5fea:	f9 1f       	adc	r31, r25
    5fec:	63 9f       	mul	r22, r19
    5fee:	b0 0d       	add	r27, r0
    5ff0:	e1 1d       	adc	r30, r1
    5ff2:	f9 1f       	adc	r31, r25
    5ff4:	bd 01       	movw	r22, r26
    5ff6:	cf 01       	movw	r24, r30
    5ff8:	11 24       	eor	r1, r1
    5ffa:	08 95       	ret

00005ffc <__prologue_saves__>:
    5ffc:	2f 92       	push	r2
    5ffe:	3f 92       	push	r3
    6000:	4f 92       	push	r4
    6002:	5f 92       	push	r5
    6004:	6f 92       	push	r6
    6006:	7f 92       	push	r7
    6008:	8f 92       	push	r8
    600a:	9f 92       	push	r9
    600c:	af 92       	push	r10
    600e:	bf 92       	push	r11
    6010:	cf 92       	push	r12
    6012:	df 92       	push	r13
    6014:	ef 92       	push	r14
    6016:	ff 92       	push	r15
    6018:	0f 93       	push	r16
    601a:	1f 93       	push	r17
    601c:	cf 93       	push	r28
    601e:	df 93       	push	r29
    6020:	cd b7       	in	r28, 0x3d	; 61
    6022:	de b7       	in	r29, 0x3e	; 62
    6024:	ca 1b       	sub	r28, r26
    6026:	db 0b       	sbc	r29, r27
    6028:	0f b6       	in	r0, 0x3f	; 63
    602a:	f8 94       	cli
    602c:	de bf       	out	0x3e, r29	; 62
    602e:	0f be       	out	0x3f, r0	; 63
    6030:	cd bf       	out	0x3d, r28	; 61
    6032:	09 94       	ijmp

00006034 <__epilogue_restores__>:
    6034:	2a 88       	ldd	r2, Y+18	; 0x12
    6036:	39 88       	ldd	r3, Y+17	; 0x11
    6038:	48 88       	ldd	r4, Y+16	; 0x10
    603a:	5f 84       	ldd	r5, Y+15	; 0x0f
    603c:	6e 84       	ldd	r6, Y+14	; 0x0e
    603e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6040:	8c 84       	ldd	r8, Y+12	; 0x0c
    6042:	9b 84       	ldd	r9, Y+11	; 0x0b
    6044:	aa 84       	ldd	r10, Y+10	; 0x0a
    6046:	b9 84       	ldd	r11, Y+9	; 0x09
    6048:	c8 84       	ldd	r12, Y+8	; 0x08
    604a:	df 80       	ldd	r13, Y+7	; 0x07
    604c:	ee 80       	ldd	r14, Y+6	; 0x06
    604e:	fd 80       	ldd	r15, Y+5	; 0x05
    6050:	0c 81       	ldd	r16, Y+4	; 0x04
    6052:	1b 81       	ldd	r17, Y+3	; 0x03
    6054:	aa 81       	ldd	r26, Y+2	; 0x02
    6056:	b9 81       	ldd	r27, Y+1	; 0x01
    6058:	ce 0f       	add	r28, r30
    605a:	d1 1d       	adc	r29, r1
    605c:	0f b6       	in	r0, 0x3f	; 63
    605e:	f8 94       	cli
    6060:	de bf       	out	0x3e, r29	; 62
    6062:	0f be       	out	0x3f, r0	; 63
    6064:	cd bf       	out	0x3d, r28	; 61
    6066:	ed 01       	movw	r28, r26
    6068:	08 95       	ret

0000606a <memcpy>:
    606a:	fb 01       	movw	r30, r22
    606c:	dc 01       	movw	r26, r24
    606e:	02 c0       	rjmp	.+4      	; 0x6074 <memcpy+0xa>
    6070:	01 90       	ld	r0, Z+
    6072:	0d 92       	st	X+, r0
    6074:	41 50       	subi	r20, 0x01	; 1
    6076:	50 40       	sbci	r21, 0x00	; 0
    6078:	d8 f7       	brcc	.-10     	; 0x6070 <memcpy+0x6>
    607a:	08 95       	ret

0000607c <memset>:
    607c:	dc 01       	movw	r26, r24
    607e:	01 c0       	rjmp	.+2      	; 0x6082 <memset+0x6>
    6080:	6d 93       	st	X+, r22
    6082:	41 50       	subi	r20, 0x01	; 1
    6084:	50 40       	sbci	r21, 0x00	; 0
    6086:	e0 f7       	brcc	.-8      	; 0x6080 <memset+0x4>
    6088:	08 95       	ret

0000608a <strcmp>:
    608a:	fb 01       	movw	r30, r22
    608c:	dc 01       	movw	r26, r24
    608e:	8d 91       	ld	r24, X+
    6090:	01 90       	ld	r0, Z+
    6092:	80 19       	sub	r24, r0
    6094:	01 10       	cpse	r0, r1
    6096:	d9 f3       	breq	.-10     	; 0x608e <strcmp+0x4>
    6098:	99 0b       	sbc	r25, r25
    609a:	08 95       	ret

0000609c <strncpy>:
    609c:	fb 01       	movw	r30, r22
    609e:	dc 01       	movw	r26, r24
    60a0:	41 50       	subi	r20, 0x01	; 1
    60a2:	50 40       	sbci	r21, 0x00	; 0
    60a4:	48 f0       	brcs	.+18     	; 0x60b8 <strncpy+0x1c>
    60a6:	01 90       	ld	r0, Z+
    60a8:	0d 92       	st	X+, r0
    60aa:	00 20       	and	r0, r0
    60ac:	c9 f7       	brne	.-14     	; 0x60a0 <strncpy+0x4>
    60ae:	01 c0       	rjmp	.+2      	; 0x60b2 <strncpy+0x16>
    60b0:	1d 92       	st	X+, r1
    60b2:	41 50       	subi	r20, 0x01	; 1
    60b4:	50 40       	sbci	r21, 0x00	; 0
    60b6:	e0 f7       	brcc	.-8      	; 0x60b0 <strncpy+0x14>
    60b8:	08 95       	ret

000060ba <itoa>:
    60ba:	fb 01       	movw	r30, r22
    60bc:	9f 01       	movw	r18, r30
    60be:	e8 94       	clt
    60c0:	42 30       	cpi	r20, 0x02	; 2
    60c2:	c4 f0       	brlt	.+48     	; 0x60f4 <itoa+0x3a>
    60c4:	45 32       	cpi	r20, 0x25	; 37
    60c6:	b4 f4       	brge	.+44     	; 0x60f4 <itoa+0x3a>
    60c8:	4a 30       	cpi	r20, 0x0A	; 10
    60ca:	29 f4       	brne	.+10     	; 0x60d6 <itoa+0x1c>
    60cc:	97 fb       	bst	r25, 7
    60ce:	1e f4       	brtc	.+6      	; 0x60d6 <itoa+0x1c>
    60d0:	90 95       	com	r25
    60d2:	81 95       	neg	r24
    60d4:	9f 4f       	sbci	r25, 0xFF	; 255
    60d6:	64 2f       	mov	r22, r20
    60d8:	77 27       	eor	r23, r23
    60da:	0e 94 8e 30 	call	0x611c	; 0x611c <__udivmodhi4>
    60de:	80 5d       	subi	r24, 0xD0	; 208
    60e0:	8a 33       	cpi	r24, 0x3A	; 58
    60e2:	0c f0       	brlt	.+2      	; 0x60e6 <itoa+0x2c>
    60e4:	89 5d       	subi	r24, 0xD9	; 217
    60e6:	81 93       	st	Z+, r24
    60e8:	cb 01       	movw	r24, r22
    60ea:	00 97       	sbiw	r24, 0x00	; 0
    60ec:	a1 f7       	brne	.-24     	; 0x60d6 <itoa+0x1c>
    60ee:	16 f4       	brtc	.+4      	; 0x60f4 <itoa+0x3a>
    60f0:	5d e2       	ldi	r21, 0x2D	; 45
    60f2:	51 93       	st	Z+, r21
    60f4:	10 82       	st	Z, r1
    60f6:	c9 01       	movw	r24, r18
    60f8:	0c 94 7e 30 	jmp	0x60fc	; 0x60fc <strrev>

000060fc <strrev>:
    60fc:	dc 01       	movw	r26, r24
    60fe:	fc 01       	movw	r30, r24
    6100:	67 2f       	mov	r22, r23
    6102:	71 91       	ld	r23, Z+
    6104:	77 23       	and	r23, r23
    6106:	e1 f7       	brne	.-8      	; 0x6100 <strrev+0x4>
    6108:	32 97       	sbiw	r30, 0x02	; 2
    610a:	04 c0       	rjmp	.+8      	; 0x6114 <strrev+0x18>
    610c:	7c 91       	ld	r23, X
    610e:	6d 93       	st	X+, r22
    6110:	70 83       	st	Z, r23
    6112:	62 91       	ld	r22, -Z
    6114:	ae 17       	cp	r26, r30
    6116:	bf 07       	cpc	r27, r31
    6118:	c8 f3       	brcs	.-14     	; 0x610c <strrev+0x10>
    611a:	08 95       	ret

0000611c <__udivmodhi4>:
    611c:	aa 1b       	sub	r26, r26
    611e:	bb 1b       	sub	r27, r27
    6120:	51 e1       	ldi	r21, 0x11	; 17
    6122:	07 c0       	rjmp	.+14     	; 0x6132 <__udivmodhi4_ep>

00006124 <__udivmodhi4_loop>:
    6124:	aa 1f       	adc	r26, r26
    6126:	bb 1f       	adc	r27, r27
    6128:	a6 17       	cp	r26, r22
    612a:	b7 07       	cpc	r27, r23
    612c:	10 f0       	brcs	.+4      	; 0x6132 <__udivmodhi4_ep>
    612e:	a6 1b       	sub	r26, r22
    6130:	b7 0b       	sbc	r27, r23

00006132 <__udivmodhi4_ep>:
    6132:	88 1f       	adc	r24, r24
    6134:	99 1f       	adc	r25, r25
    6136:	5a 95       	dec	r21
    6138:	a9 f7       	brne	.-22     	; 0x6124 <__udivmodhi4_loop>
    613a:	80 95       	com	r24
    613c:	90 95       	com	r25
    613e:	bc 01       	movw	r22, r24
    6140:	cd 01       	movw	r24, r26
    6142:	08 95       	ret

00006144 <_exit>:
    6144:	f8 94       	cli

00006146 <__stop_program>:
    6146:	ff cf       	rjmp	.-2      	; 0x6146 <__stop_program>
