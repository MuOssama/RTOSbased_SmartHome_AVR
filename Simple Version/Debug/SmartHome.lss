
SmartHome.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000002c2  00800060  00004e62  00004ef6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  00800322  00800322  000051b8  2**0
                  ALLOC
  3 .stab         000046bc  00000000  00000000  000051b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016a3  00000000  00000000  00009874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000af17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f5  00000000  00000000  0000b0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002216  00000000  00000000  0000b2ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000012b8  00000000  00000000  0000d4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001136  00000000  00000000  0000e77a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f8b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002d2  00000000  00000000  0000fa70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000095a  00000000  00000000  0000fd42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001069c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7b 25 	jmp	0x4af6	; 0x4af6 <__vector_1>
       8:	0c 94 aa 25 	jmp	0x4b54	; 0x4b54 <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	fe e4       	ldi	r31, 0x4E	; 78
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 32       	cpi	r26, 0x22	; 34
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	a2 e2       	ldi	r26, 0x22	; 34
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 33       	cpi	r26, 0x3A	; 58
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 62 11 	call	0x22c4	; 0x22c4 <main>
      8a:	0c 94 2f 27 	jmp	0x4e5e	; 0x4e5e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 aa 26 	jmp	0x4d54	; 0x4d54 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 c6 26 	jmp	0x4d8c	; 0x4d8c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 70 06 	call	0xce0	; 0xce0 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d2 26 	jmp	0x4da4	; 0x4da4 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 b3 26 	jmp	0x4d66	; 0x4d66 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 cf 26 	jmp	0x4d9e	; 0x4d9e <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 ba 26 	jmp	0x4d74	; 0x4d74 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 d6 26 	jmp	0x4dac	; 0x4dac <__epilogue_restores__+0x20>

000008b6 <__floatunsisf>:
     8b6:	a8 e0       	ldi	r26, 0x08	; 8
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	e1 e6       	ldi	r30, 0x61	; 97
     8bc:	f4 e0       	ldi	r31, 0x04	; 4
     8be:	0c 94 b2 26 	jmp	0x4d64	; 0x4d64 <__prologue_saves__+0x10>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	61 15       	cp	r22, r1
     8c8:	71 05       	cpc	r23, r1
     8ca:	81 05       	cpc	r24, r1
     8cc:	91 05       	cpc	r25, r1
     8ce:	19 f4       	brne	.+6      	; 0x8d6 <__floatunsisf+0x20>
     8d0:	82 e0       	ldi	r24, 0x02	; 2
     8d2:	89 83       	std	Y+1, r24	; 0x01
     8d4:	60 c0       	rjmp	.+192    	; 0x996 <__floatunsisf+0xe0>
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	89 83       	std	Y+1, r24	; 0x01
     8da:	8e e1       	ldi	r24, 0x1E	; 30
     8dc:	c8 2e       	mov	r12, r24
     8de:	d1 2c       	mov	r13, r1
     8e0:	dc 82       	std	Y+4, r13	; 0x04
     8e2:	cb 82       	std	Y+3, r12	; 0x03
     8e4:	ed 82       	std	Y+5, r14	; 0x05
     8e6:	fe 82       	std	Y+6, r15	; 0x06
     8e8:	0f 83       	std	Y+7, r16	; 0x07
     8ea:	18 87       	std	Y+8, r17	; 0x08
     8ec:	c8 01       	movw	r24, r16
     8ee:	b7 01       	movw	r22, r14
     8f0:	0e 94 d4 04 	call	0x9a8	; 0x9a8 <__clzsi2>
     8f4:	fc 01       	movw	r30, r24
     8f6:	31 97       	sbiw	r30, 0x01	; 1
     8f8:	f7 ff       	sbrs	r31, 7
     8fa:	3b c0       	rjmp	.+118    	; 0x972 <__floatunsisf+0xbc>
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	2e 1b       	sub	r18, r30
     902:	3f 0b       	sbc	r19, r31
     904:	57 01       	movw	r10, r14
     906:	68 01       	movw	r12, r16
     908:	02 2e       	mov	r0, r18
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__floatunsisf+0x5e>
     90c:	d6 94       	lsr	r13
     90e:	c7 94       	ror	r12
     910:	b7 94       	ror	r11
     912:	a7 94       	ror	r10
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__floatunsisf+0x56>
     918:	40 e0       	ldi	r20, 0x00	; 0
     91a:	50 e0       	ldi	r21, 0x00	; 0
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	70 e0       	ldi	r23, 0x00	; 0
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	a0 e0       	ldi	r26, 0x00	; 0
     926:	b0 e0       	ldi	r27, 0x00	; 0
     928:	04 c0       	rjmp	.+8      	; 0x932 <__floatunsisf+0x7c>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	aa 1f       	adc	r26, r26
     930:	bb 1f       	adc	r27, r27
     932:	2a 95       	dec	r18
     934:	d2 f7       	brpl	.-12     	; 0x92a <__floatunsisf+0x74>
     936:	01 97       	sbiw	r24, 0x01	; 1
     938:	a1 09       	sbc	r26, r1
     93a:	b1 09       	sbc	r27, r1
     93c:	8e 21       	and	r24, r14
     93e:	9f 21       	and	r25, r15
     940:	a0 23       	and	r26, r16
     942:	b1 23       	and	r27, r17
     944:	00 97       	sbiw	r24, 0x00	; 0
     946:	a1 05       	cpc	r26, r1
     948:	b1 05       	cpc	r27, r1
     94a:	21 f0       	breq	.+8      	; 0x954 <__floatunsisf+0x9e>
     94c:	41 e0       	ldi	r20, 0x01	; 1
     94e:	50 e0       	ldi	r21, 0x00	; 0
     950:	60 e0       	ldi	r22, 0x00	; 0
     952:	70 e0       	ldi	r23, 0x00	; 0
     954:	4a 29       	or	r20, r10
     956:	5b 29       	or	r21, r11
     958:	6c 29       	or	r22, r12
     95a:	7d 29       	or	r23, r13
     95c:	4d 83       	std	Y+5, r20	; 0x05
     95e:	5e 83       	std	Y+6, r21	; 0x06
     960:	6f 83       	std	Y+7, r22	; 0x07
     962:	78 87       	std	Y+8, r23	; 0x08
     964:	8e e1       	ldi	r24, 0x1E	; 30
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	8e 1b       	sub	r24, r30
     96a:	9f 0b       	sbc	r25, r31
     96c:	9c 83       	std	Y+4, r25	; 0x04
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	12 c0       	rjmp	.+36     	; 0x996 <__floatunsisf+0xe0>
     972:	30 97       	sbiw	r30, 0x00	; 0
     974:	81 f0       	breq	.+32     	; 0x996 <__floatunsisf+0xe0>
     976:	0e 2e       	mov	r0, r30
     978:	04 c0       	rjmp	.+8      	; 0x982 <__floatunsisf+0xcc>
     97a:	ee 0c       	add	r14, r14
     97c:	ff 1c       	adc	r15, r15
     97e:	00 1f       	adc	r16, r16
     980:	11 1f       	adc	r17, r17
     982:	0a 94       	dec	r0
     984:	d2 f7       	brpl	.-12     	; 0x97a <__floatunsisf+0xc4>
     986:	ed 82       	std	Y+5, r14	; 0x05
     988:	fe 82       	std	Y+6, r15	; 0x06
     98a:	0f 83       	std	Y+7, r16	; 0x07
     98c:	18 87       	std	Y+8, r17	; 0x08
     98e:	ce 1a       	sub	r12, r30
     990:	df 0a       	sbc	r13, r31
     992:	dc 82       	std	Y+4, r13	; 0x04
     994:	cb 82       	std	Y+3, r12	; 0x03
     996:	1a 82       	std	Y+2, r1	; 0x02
     998:	ce 01       	movw	r24, r28
     99a:	01 96       	adiw	r24, 0x01	; 1
     99c:	0e 94 23 05 	call	0xa46	; 0xa46 <__pack_f>
     9a0:	28 96       	adiw	r28, 0x08	; 8
     9a2:	ea e0       	ldi	r30, 0x0A	; 10
     9a4:	0c 94 ce 26 	jmp	0x4d9c	; 0x4d9c <__epilogue_restores__+0x10>

000009a8 <__clzsi2>:
     9a8:	ef 92       	push	r14
     9aa:	ff 92       	push	r15
     9ac:	0f 93       	push	r16
     9ae:	1f 93       	push	r17
     9b0:	7b 01       	movw	r14, r22
     9b2:	8c 01       	movw	r16, r24
     9b4:	80 e0       	ldi	r24, 0x00	; 0
     9b6:	e8 16       	cp	r14, r24
     9b8:	80 e0       	ldi	r24, 0x00	; 0
     9ba:	f8 06       	cpc	r15, r24
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	08 07       	cpc	r16, r24
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	18 07       	cpc	r17, r24
     9c4:	88 f4       	brcc	.+34     	; 0x9e8 <__clzsi2+0x40>
     9c6:	8f ef       	ldi	r24, 0xFF	; 255
     9c8:	e8 16       	cp	r14, r24
     9ca:	f1 04       	cpc	r15, r1
     9cc:	01 05       	cpc	r16, r1
     9ce:	11 05       	cpc	r17, r1
     9d0:	31 f0       	breq	.+12     	; 0x9de <__clzsi2+0x36>
     9d2:	28 f0       	brcs	.+10     	; 0x9de <__clzsi2+0x36>
     9d4:	88 e0       	ldi	r24, 0x08	; 8
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	a0 e0       	ldi	r26, 0x00	; 0
     9da:	b0 e0       	ldi	r27, 0x00	; 0
     9dc:	17 c0       	rjmp	.+46     	; 0xa0c <__clzsi2+0x64>
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	12 c0       	rjmp	.+36     	; 0xa0c <__clzsi2+0x64>
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	e8 16       	cp	r14, r24
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	f8 06       	cpc	r15, r24
     9f0:	80 e0       	ldi	r24, 0x00	; 0
     9f2:	08 07       	cpc	r16, r24
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	18 07       	cpc	r17, r24
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__clzsi2+0x5c>
     9fa:	88 e1       	ldi	r24, 0x18	; 24
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	a0 e0       	ldi	r26, 0x00	; 0
     a00:	b0 e0       	ldi	r27, 0x00	; 0
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__clzsi2+0x64>
     a04:	80 e1       	ldi	r24, 0x10	; 16
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	a0 e0       	ldi	r26, 0x00	; 0
     a0a:	b0 e0       	ldi	r27, 0x00	; 0
     a0c:	20 e2       	ldi	r18, 0x20	; 32
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	40 e0       	ldi	r20, 0x00	; 0
     a12:	50 e0       	ldi	r21, 0x00	; 0
     a14:	28 1b       	sub	r18, r24
     a16:	39 0b       	sbc	r19, r25
     a18:	4a 0b       	sbc	r20, r26
     a1a:	5b 0b       	sbc	r21, r27
     a1c:	04 c0       	rjmp	.+8      	; 0xa26 <__clzsi2+0x7e>
     a1e:	16 95       	lsr	r17
     a20:	07 95       	ror	r16
     a22:	f7 94       	ror	r15
     a24:	e7 94       	ror	r14
     a26:	8a 95       	dec	r24
     a28:	d2 f7       	brpl	.-12     	; 0xa1e <__clzsi2+0x76>
     a2a:	f7 01       	movw	r30, r14
     a2c:	e9 56       	subi	r30, 0x69	; 105
     a2e:	fe 4f       	sbci	r31, 0xFE	; 254
     a30:	80 81       	ld	r24, Z
     a32:	28 1b       	sub	r18, r24
     a34:	31 09       	sbc	r19, r1
     a36:	41 09       	sbc	r20, r1
     a38:	51 09       	sbc	r21, r1
     a3a:	c9 01       	movw	r24, r18
     a3c:	1f 91       	pop	r17
     a3e:	0f 91       	pop	r16
     a40:	ff 90       	pop	r15
     a42:	ef 90       	pop	r14
     a44:	08 95       	ret

00000a46 <__pack_f>:
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
     a50:	fc 01       	movw	r30, r24
     a52:	e4 80       	ldd	r14, Z+4	; 0x04
     a54:	f5 80       	ldd	r15, Z+5	; 0x05
     a56:	06 81       	ldd	r16, Z+6	; 0x06
     a58:	17 81       	ldd	r17, Z+7	; 0x07
     a5a:	d1 80       	ldd	r13, Z+1	; 0x01
     a5c:	80 81       	ld	r24, Z
     a5e:	82 30       	cpi	r24, 0x02	; 2
     a60:	48 f4       	brcc	.+18     	; 0xa74 <__pack_f+0x2e>
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e1       	ldi	r26, 0x10	; 16
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	e8 2a       	or	r14, r24
     a6c:	f9 2a       	or	r15, r25
     a6e:	0a 2b       	or	r16, r26
     a70:	1b 2b       	or	r17, r27
     a72:	a5 c0       	rjmp	.+330    	; 0xbbe <__pack_f+0x178>
     a74:	84 30       	cpi	r24, 0x04	; 4
     a76:	09 f4       	brne	.+2      	; 0xa7a <__pack_f+0x34>
     a78:	9f c0       	rjmp	.+318    	; 0xbb8 <__pack_f+0x172>
     a7a:	82 30       	cpi	r24, 0x02	; 2
     a7c:	21 f4       	brne	.+8      	; 0xa86 <__pack_f+0x40>
     a7e:	ee 24       	eor	r14, r14
     a80:	ff 24       	eor	r15, r15
     a82:	87 01       	movw	r16, r14
     a84:	05 c0       	rjmp	.+10     	; 0xa90 <__pack_f+0x4a>
     a86:	e1 14       	cp	r14, r1
     a88:	f1 04       	cpc	r15, r1
     a8a:	01 05       	cpc	r16, r1
     a8c:	11 05       	cpc	r17, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <__pack_f+0x50>
     a90:	e0 e0       	ldi	r30, 0x00	; 0
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	96 c0       	rjmp	.+300    	; 0xbc2 <__pack_f+0x17c>
     a96:	62 81       	ldd	r22, Z+2	; 0x02
     a98:	73 81       	ldd	r23, Z+3	; 0x03
     a9a:	9f ef       	ldi	r25, 0xFF	; 255
     a9c:	62 38       	cpi	r22, 0x82	; 130
     a9e:	79 07       	cpc	r23, r25
     aa0:	0c f0       	brlt	.+2      	; 0xaa4 <__pack_f+0x5e>
     aa2:	5b c0       	rjmp	.+182    	; 0xb5a <__pack_f+0x114>
     aa4:	22 e8       	ldi	r18, 0x82	; 130
     aa6:	3f ef       	ldi	r19, 0xFF	; 255
     aa8:	26 1b       	sub	r18, r22
     aaa:	37 0b       	sbc	r19, r23
     aac:	2a 31       	cpi	r18, 0x1A	; 26
     aae:	31 05       	cpc	r19, r1
     ab0:	2c f0       	brlt	.+10     	; 0xabc <__pack_f+0x76>
     ab2:	20 e0       	ldi	r18, 0x00	; 0
     ab4:	30 e0       	ldi	r19, 0x00	; 0
     ab6:	40 e0       	ldi	r20, 0x00	; 0
     ab8:	50 e0       	ldi	r21, 0x00	; 0
     aba:	2a c0       	rjmp	.+84     	; 0xb10 <__pack_f+0xca>
     abc:	b8 01       	movw	r22, r16
     abe:	a7 01       	movw	r20, r14
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__pack_f+0x86>
     ac4:	76 95       	lsr	r23
     ac6:	67 95       	ror	r22
     ac8:	57 95       	ror	r21
     aca:	47 95       	ror	r20
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__pack_f+0x7e>
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	04 c0       	rjmp	.+8      	; 0xae2 <__pack_f+0x9c>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	aa 1f       	adc	r26, r26
     ae0:	bb 1f       	adc	r27, r27
     ae2:	2a 95       	dec	r18
     ae4:	d2 f7       	brpl	.-12     	; 0xada <__pack_f+0x94>
     ae6:	01 97       	sbiw	r24, 0x01	; 1
     ae8:	a1 09       	sbc	r26, r1
     aea:	b1 09       	sbc	r27, r1
     aec:	8e 21       	and	r24, r14
     aee:	9f 21       	and	r25, r15
     af0:	a0 23       	and	r26, r16
     af2:	b1 23       	and	r27, r17
     af4:	00 97       	sbiw	r24, 0x00	; 0
     af6:	a1 05       	cpc	r26, r1
     af8:	b1 05       	cpc	r27, r1
     afa:	21 f0       	breq	.+8      	; 0xb04 <__pack_f+0xbe>
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e0       	ldi	r26, 0x00	; 0
     b02:	b0 e0       	ldi	r27, 0x00	; 0
     b04:	9a 01       	movw	r18, r20
     b06:	ab 01       	movw	r20, r22
     b08:	28 2b       	or	r18, r24
     b0a:	39 2b       	or	r19, r25
     b0c:	4a 2b       	or	r20, r26
     b0e:	5b 2b       	or	r21, r27
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	8f 77       	andi	r24, 0x7F	; 127
     b16:	90 70       	andi	r25, 0x00	; 0
     b18:	a0 70       	andi	r26, 0x00	; 0
     b1a:	b0 70       	andi	r27, 0x00	; 0
     b1c:	80 34       	cpi	r24, 0x40	; 64
     b1e:	91 05       	cpc	r25, r1
     b20:	a1 05       	cpc	r26, r1
     b22:	b1 05       	cpc	r27, r1
     b24:	39 f4       	brne	.+14     	; 0xb34 <__pack_f+0xee>
     b26:	27 ff       	sbrs	r18, 7
     b28:	09 c0       	rjmp	.+18     	; 0xb3c <__pack_f+0xf6>
     b2a:	20 5c       	subi	r18, 0xC0	; 192
     b2c:	3f 4f       	sbci	r19, 0xFF	; 255
     b2e:	4f 4f       	sbci	r20, 0xFF	; 255
     b30:	5f 4f       	sbci	r21, 0xFF	; 255
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__pack_f+0xf6>
     b34:	21 5c       	subi	r18, 0xC1	; 193
     b36:	3f 4f       	sbci	r19, 0xFF	; 255
     b38:	4f 4f       	sbci	r20, 0xFF	; 255
     b3a:	5f 4f       	sbci	r21, 0xFF	; 255
     b3c:	e0 e0       	ldi	r30, 0x00	; 0
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	20 30       	cpi	r18, 0x00	; 0
     b42:	a0 e0       	ldi	r26, 0x00	; 0
     b44:	3a 07       	cpc	r19, r26
     b46:	a0 e0       	ldi	r26, 0x00	; 0
     b48:	4a 07       	cpc	r20, r26
     b4a:	a0 e4       	ldi	r26, 0x40	; 64
     b4c:	5a 07       	cpc	r21, r26
     b4e:	10 f0       	brcs	.+4      	; 0xb54 <__pack_f+0x10e>
     b50:	e1 e0       	ldi	r30, 0x01	; 1
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	79 01       	movw	r14, r18
     b56:	8a 01       	movw	r16, r20
     b58:	27 c0       	rjmp	.+78     	; 0xba8 <__pack_f+0x162>
     b5a:	60 38       	cpi	r22, 0x80	; 128
     b5c:	71 05       	cpc	r23, r1
     b5e:	64 f5       	brge	.+88     	; 0xbb8 <__pack_f+0x172>
     b60:	fb 01       	movw	r30, r22
     b62:	e1 58       	subi	r30, 0x81	; 129
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	d8 01       	movw	r26, r16
     b68:	c7 01       	movw	r24, r14
     b6a:	8f 77       	andi	r24, 0x7F	; 127
     b6c:	90 70       	andi	r25, 0x00	; 0
     b6e:	a0 70       	andi	r26, 0x00	; 0
     b70:	b0 70       	andi	r27, 0x00	; 0
     b72:	80 34       	cpi	r24, 0x40	; 64
     b74:	91 05       	cpc	r25, r1
     b76:	a1 05       	cpc	r26, r1
     b78:	b1 05       	cpc	r27, r1
     b7a:	39 f4       	brne	.+14     	; 0xb8a <__pack_f+0x144>
     b7c:	e7 fe       	sbrs	r14, 7
     b7e:	0d c0       	rjmp	.+26     	; 0xb9a <__pack_f+0x154>
     b80:	80 e4       	ldi	r24, 0x40	; 64
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	a0 e0       	ldi	r26, 0x00	; 0
     b86:	b0 e0       	ldi	r27, 0x00	; 0
     b88:	04 c0       	rjmp	.+8      	; 0xb92 <__pack_f+0x14c>
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	a0 e0       	ldi	r26, 0x00	; 0
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	e8 0e       	add	r14, r24
     b94:	f9 1e       	adc	r15, r25
     b96:	0a 1f       	adc	r16, r26
     b98:	1b 1f       	adc	r17, r27
     b9a:	17 ff       	sbrs	r17, 7
     b9c:	05 c0       	rjmp	.+10     	; 0xba8 <__pack_f+0x162>
     b9e:	16 95       	lsr	r17
     ba0:	07 95       	ror	r16
     ba2:	f7 94       	ror	r15
     ba4:	e7 94       	ror	r14
     ba6:	31 96       	adiw	r30, 0x01	; 1
     ba8:	87 e0       	ldi	r24, 0x07	; 7
     baa:	16 95       	lsr	r17
     bac:	07 95       	ror	r16
     bae:	f7 94       	ror	r15
     bb0:	e7 94       	ror	r14
     bb2:	8a 95       	dec	r24
     bb4:	d1 f7       	brne	.-12     	; 0xbaa <__pack_f+0x164>
     bb6:	05 c0       	rjmp	.+10     	; 0xbc2 <__pack_f+0x17c>
     bb8:	ee 24       	eor	r14, r14
     bba:	ff 24       	eor	r15, r15
     bbc:	87 01       	movw	r16, r14
     bbe:	ef ef       	ldi	r30, 0xFF	; 255
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	6e 2f       	mov	r22, r30
     bc4:	67 95       	ror	r22
     bc6:	66 27       	eor	r22, r22
     bc8:	67 95       	ror	r22
     bca:	90 2f       	mov	r25, r16
     bcc:	9f 77       	andi	r25, 0x7F	; 127
     bce:	d7 94       	ror	r13
     bd0:	dd 24       	eor	r13, r13
     bd2:	d7 94       	ror	r13
     bd4:	8e 2f       	mov	r24, r30
     bd6:	86 95       	lsr	r24
     bd8:	49 2f       	mov	r20, r25
     bda:	46 2b       	or	r20, r22
     bdc:	58 2f       	mov	r21, r24
     bde:	5d 29       	or	r21, r13
     be0:	b7 01       	movw	r22, r14
     be2:	ca 01       	movw	r24, r20
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	08 95       	ret

00000bf0 <__unpack_f>:
     bf0:	fc 01       	movw	r30, r24
     bf2:	db 01       	movw	r26, r22
     bf4:	40 81       	ld	r20, Z
     bf6:	51 81       	ldd	r21, Z+1	; 0x01
     bf8:	22 81       	ldd	r18, Z+2	; 0x02
     bfa:	62 2f       	mov	r22, r18
     bfc:	6f 77       	andi	r22, 0x7F	; 127
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	22 1f       	adc	r18, r18
     c02:	22 27       	eor	r18, r18
     c04:	22 1f       	adc	r18, r18
     c06:	93 81       	ldd	r25, Z+3	; 0x03
     c08:	89 2f       	mov	r24, r25
     c0a:	88 0f       	add	r24, r24
     c0c:	82 2b       	or	r24, r18
     c0e:	28 2f       	mov	r18, r24
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	99 1f       	adc	r25, r25
     c14:	99 27       	eor	r25, r25
     c16:	99 1f       	adc	r25, r25
     c18:	11 96       	adiw	r26, 0x01	; 1
     c1a:	9c 93       	st	X, r25
     c1c:	11 97       	sbiw	r26, 0x01	; 1
     c1e:	21 15       	cp	r18, r1
     c20:	31 05       	cpc	r19, r1
     c22:	a9 f5       	brne	.+106    	; 0xc8e <__unpack_f+0x9e>
     c24:	41 15       	cp	r20, r1
     c26:	51 05       	cpc	r21, r1
     c28:	61 05       	cpc	r22, r1
     c2a:	71 05       	cpc	r23, r1
     c2c:	11 f4       	brne	.+4      	; 0xc32 <__unpack_f+0x42>
     c2e:	82 e0       	ldi	r24, 0x02	; 2
     c30:	37 c0       	rjmp	.+110    	; 0xca0 <__unpack_f+0xb0>
     c32:	82 e8       	ldi	r24, 0x82	; 130
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	13 96       	adiw	r26, 0x03	; 3
     c38:	9c 93       	st	X, r25
     c3a:	8e 93       	st	-X, r24
     c3c:	12 97       	sbiw	r26, 0x02	; 2
     c3e:	9a 01       	movw	r18, r20
     c40:	ab 01       	movw	r20, r22
     c42:	67 e0       	ldi	r22, 0x07	; 7
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	55 1f       	adc	r21, r21
     c4c:	6a 95       	dec	r22
     c4e:	d1 f7       	brne	.-12     	; 0xc44 <__unpack_f+0x54>
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	8c 93       	st	X, r24
     c54:	0d c0       	rjmp	.+26     	; 0xc70 <__unpack_f+0x80>
     c56:	22 0f       	add	r18, r18
     c58:	33 1f       	adc	r19, r19
     c5a:	44 1f       	adc	r20, r20
     c5c:	55 1f       	adc	r21, r21
     c5e:	12 96       	adiw	r26, 0x02	; 2
     c60:	8d 91       	ld	r24, X+
     c62:	9c 91       	ld	r25, X
     c64:	13 97       	sbiw	r26, 0x03	; 3
     c66:	01 97       	sbiw	r24, 0x01	; 1
     c68:	13 96       	adiw	r26, 0x03	; 3
     c6a:	9c 93       	st	X, r25
     c6c:	8e 93       	st	-X, r24
     c6e:	12 97       	sbiw	r26, 0x02	; 2
     c70:	20 30       	cpi	r18, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	38 07       	cpc	r19, r24
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	48 07       	cpc	r20, r24
     c7a:	80 e4       	ldi	r24, 0x40	; 64
     c7c:	58 07       	cpc	r21, r24
     c7e:	58 f3       	brcs	.-42     	; 0xc56 <__unpack_f+0x66>
     c80:	14 96       	adiw	r26, 0x04	; 4
     c82:	2d 93       	st	X+, r18
     c84:	3d 93       	st	X+, r19
     c86:	4d 93       	st	X+, r20
     c88:	5c 93       	st	X, r21
     c8a:	17 97       	sbiw	r26, 0x07	; 7
     c8c:	08 95       	ret
     c8e:	2f 3f       	cpi	r18, 0xFF	; 255
     c90:	31 05       	cpc	r19, r1
     c92:	79 f4       	brne	.+30     	; 0xcb2 <__unpack_f+0xc2>
     c94:	41 15       	cp	r20, r1
     c96:	51 05       	cpc	r21, r1
     c98:	61 05       	cpc	r22, r1
     c9a:	71 05       	cpc	r23, r1
     c9c:	19 f4       	brne	.+6      	; 0xca4 <__unpack_f+0xb4>
     c9e:	84 e0       	ldi	r24, 0x04	; 4
     ca0:	8c 93       	st	X, r24
     ca2:	08 95       	ret
     ca4:	64 ff       	sbrs	r22, 4
     ca6:	03 c0       	rjmp	.+6      	; 0xcae <__unpack_f+0xbe>
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	8c 93       	st	X, r24
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <__unpack_f+0xe2>
     cae:	1c 92       	st	X, r1
     cb0:	10 c0       	rjmp	.+32     	; 0xcd2 <__unpack_f+0xe2>
     cb2:	2f 57       	subi	r18, 0x7F	; 127
     cb4:	30 40       	sbci	r19, 0x00	; 0
     cb6:	13 96       	adiw	r26, 0x03	; 3
     cb8:	3c 93       	st	X, r19
     cba:	2e 93       	st	-X, r18
     cbc:	12 97       	sbiw	r26, 0x02	; 2
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	8c 93       	st	X, r24
     cc2:	87 e0       	ldi	r24, 0x07	; 7
     cc4:	44 0f       	add	r20, r20
     cc6:	55 1f       	adc	r21, r21
     cc8:	66 1f       	adc	r22, r22
     cca:	77 1f       	adc	r23, r23
     ccc:	8a 95       	dec	r24
     cce:	d1 f7       	brne	.-12     	; 0xcc4 <__unpack_f+0xd4>
     cd0:	70 64       	ori	r23, 0x40	; 64
     cd2:	14 96       	adiw	r26, 0x04	; 4
     cd4:	4d 93       	st	X+, r20
     cd6:	5d 93       	st	X+, r21
     cd8:	6d 93       	st	X+, r22
     cda:	7c 93       	st	X, r23
     cdc:	17 97       	sbiw	r26, 0x07	; 7
     cde:	08 95       	ret

00000ce0 <__fpcmp_parts_f>:
     ce0:	1f 93       	push	r17
     ce2:	dc 01       	movw	r26, r24
     ce4:	fb 01       	movw	r30, r22
     ce6:	9c 91       	ld	r25, X
     ce8:	92 30       	cpi	r25, 0x02	; 2
     cea:	08 f4       	brcc	.+2      	; 0xcee <__fpcmp_parts_f+0xe>
     cec:	47 c0       	rjmp	.+142    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cee:	80 81       	ld	r24, Z
     cf0:	82 30       	cpi	r24, 0x02	; 2
     cf2:	08 f4       	brcc	.+2      	; 0xcf6 <__fpcmp_parts_f+0x16>
     cf4:	43 c0       	rjmp	.+134    	; 0xd7c <__fpcmp_parts_f+0x9c>
     cf6:	94 30       	cpi	r25, 0x04	; 4
     cf8:	51 f4       	brne	.+20     	; 0xd0e <__fpcmp_parts_f+0x2e>
     cfa:	11 96       	adiw	r26, 0x01	; 1
     cfc:	1c 91       	ld	r17, X
     cfe:	84 30       	cpi	r24, 0x04	; 4
     d00:	99 f5       	brne	.+102    	; 0xd68 <__fpcmp_parts_f+0x88>
     d02:	81 81       	ldd	r24, Z+1	; 0x01
     d04:	68 2f       	mov	r22, r24
     d06:	70 e0       	ldi	r23, 0x00	; 0
     d08:	61 1b       	sub	r22, r17
     d0a:	71 09       	sbc	r23, r1
     d0c:	3f c0       	rjmp	.+126    	; 0xd8c <__fpcmp_parts_f+0xac>
     d0e:	84 30       	cpi	r24, 0x04	; 4
     d10:	21 f0       	breq	.+8      	; 0xd1a <__fpcmp_parts_f+0x3a>
     d12:	92 30       	cpi	r25, 0x02	; 2
     d14:	31 f4       	brne	.+12     	; 0xd22 <__fpcmp_parts_f+0x42>
     d16:	82 30       	cpi	r24, 0x02	; 2
     d18:	b9 f1       	breq	.+110    	; 0xd88 <__fpcmp_parts_f+0xa8>
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	88 23       	and	r24, r24
     d1e:	89 f1       	breq	.+98     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d20:	2d c0       	rjmp	.+90     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	1c 91       	ld	r17, X
     d26:	11 97       	sbiw	r26, 0x01	; 1
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	f1 f0       	breq	.+60     	; 0xd68 <__fpcmp_parts_f+0x88>
     d2c:	81 81       	ldd	r24, Z+1	; 0x01
     d2e:	18 17       	cp	r17, r24
     d30:	d9 f4       	brne	.+54     	; 0xd68 <__fpcmp_parts_f+0x88>
     d32:	12 96       	adiw	r26, 0x02	; 2
     d34:	2d 91       	ld	r18, X+
     d36:	3c 91       	ld	r19, X
     d38:	13 97       	sbiw	r26, 0x03	; 3
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	93 81       	ldd	r25, Z+3	; 0x03
     d3e:	82 17       	cp	r24, r18
     d40:	93 07       	cpc	r25, r19
     d42:	94 f0       	brlt	.+36     	; 0xd68 <__fpcmp_parts_f+0x88>
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	bc f0       	brlt	.+46     	; 0xd78 <__fpcmp_parts_f+0x98>
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8d 91       	ld	r24, X+
     d4e:	9d 91       	ld	r25, X+
     d50:	0d 90       	ld	r0, X+
     d52:	bc 91       	ld	r27, X
     d54:	a0 2d       	mov	r26, r0
     d56:	24 81       	ldd	r18, Z+4	; 0x04
     d58:	35 81       	ldd	r19, Z+5	; 0x05
     d5a:	46 81       	ldd	r20, Z+6	; 0x06
     d5c:	57 81       	ldd	r21, Z+7	; 0x07
     d5e:	28 17       	cp	r18, r24
     d60:	39 07       	cpc	r19, r25
     d62:	4a 07       	cpc	r20, r26
     d64:	5b 07       	cpc	r21, r27
     d66:	18 f4       	brcc	.+6      	; 0xd6e <__fpcmp_parts_f+0x8e>
     d68:	11 23       	and	r17, r17
     d6a:	41 f0       	breq	.+16     	; 0xd7c <__fpcmp_parts_f+0x9c>
     d6c:	0a c0       	rjmp	.+20     	; 0xd82 <__fpcmp_parts_f+0xa2>
     d6e:	82 17       	cp	r24, r18
     d70:	93 07       	cpc	r25, r19
     d72:	a4 07       	cpc	r26, r20
     d74:	b5 07       	cpc	r27, r21
     d76:	40 f4       	brcc	.+16     	; 0xd88 <__fpcmp_parts_f+0xa8>
     d78:	11 23       	and	r17, r17
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__fpcmp_parts_f+0xa2>
     d7c:	61 e0       	ldi	r22, 0x01	; 1
     d7e:	70 e0       	ldi	r23, 0x00	; 0
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <__fpcmp_parts_f+0xac>
     d82:	6f ef       	ldi	r22, 0xFF	; 255
     d84:	7f ef       	ldi	r23, 0xFF	; 255
     d86:	02 c0       	rjmp	.+4      	; 0xd8c <__fpcmp_parts_f+0xac>
     d88:	60 e0       	ldi	r22, 0x00	; 0
     d8a:	70 e0       	ldi	r23, 0x00	; 0
     d8c:	cb 01       	movw	r24, r22
     d8e:	1f 91       	pop	r17
     d90:	08 95       	ret

00000d92 <UART_init>:
#include"../../UTILS/BIT_MATH.h"
#include"UART_INTERFACE.h"
#include"UART_REG.h"
#include"../../HAL/CLCD1602/CLCD_INTERFACE.h"

void UART_init() {
     d92:	df 93       	push	r29
     d94:	cf 93       	push	r28
     d96:	0f 92       	push	r0
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62

	/*Character Select*/
	CLR_BIT(UCSRB_REG, UCSRB_UCSZ2);
     d9c:	aa e2       	ldi	r26, 0x2A	; 42
     d9e:	b0 e0       	ldi	r27, 0x00	; 0
     da0:	ea e2       	ldi	r30, 0x2A	; 42
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
     da6:	8b 7f       	andi	r24, 0xFB	; 251
     da8:	8c 93       	st	X, r24
	u8 UCRSC = 0;
     daa:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ0);
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_UCSZ1);
     db2:	89 81       	ldd	r24, Y+1	; 0x01
     db4:	84 60       	ori	r24, 0x04	; 4
     db6:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCRSC, UCSRC_URSEL);
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	80 68       	ori	r24, 0x80	; 128
     dbc:	89 83       	std	Y+1, r24	; 0x01
	UCSRC_REG = UCRSC;
     dbe:	e0 e4       	ldi	r30, 0x40	; 64
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	89 81       	ldd	r24, Y+1	; 0x01
     dc4:	80 83       	st	Z, r24
	/*Baud rate 9600*/
	UBRRL_REG = 51;
     dc6:	e9 e2       	ldi	r30, 0x29	; 41
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	83 e3       	ldi	r24, 0x33	; 51
     dcc:	80 83       	st	Z, r24
	/*Rx and Tx enable*/
	SET_BIT(UCSRB_REG, UCSRB_TXEN);
     dce:	aa e2       	ldi	r26, 0x2A	; 42
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	ea e2       	ldi	r30, 0x2A	; 42
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 60       	ori	r24, 0x08	; 8
     dda:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     ddc:	aa e2       	ldi	r26, 0x2A	; 42
     dde:	b0 e0       	ldi	r27, 0x00	; 0
     de0:	ea e2       	ldi	r30, 0x2A	; 42
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	80 61       	ori	r24, 0x10	; 16
     de8:	8c 93       	st	X, r24
	/*interrupt enable*/
	//SET_BIT(UCSRB_REG, UCSRB_RXCIE);
	//SET_BIT(UCSRB_REG, UCSRB_TXCIE);
}
     dea:	0f 90       	pop	r0
     dec:	cf 91       	pop	r28
     dee:	df 91       	pop	r29
     df0:	08 95       	ret

00000df2 <UART_Receive>:

u8 UART_Receive() {
     df2:	df 93       	push	r29
     df4:	cf 93       	push	r28
     df6:	0f 92       	push	r0
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(UCSRA_REG,UCSRA_RXC) == 0)
     dfc:	eb e2       	ldi	r30, 0x2B	; 43
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
		;
	return UDR_REG;
     e02:	ec e2       	ldi	r30, 0x2C	; 44
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z

}
     e08:	0f 90       	pop	r0
     e0a:	cf 91       	pop	r28
     e0c:	df 91       	pop	r29
     e0e:	08 95       	ret

00000e10 <UART_Send>:
void UART_Send(u8 data) {
     e10:	df 93       	push	r29
     e12:	cf 93       	push	r28
     e14:	00 d0       	rcall	.+0      	; 0xe16 <UART_Send+0x6>
     e16:	cd b7       	in	r28, 0x3d	; 61
     e18:	de b7       	in	r29, 0x3e	; 62
     e1a:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG,UCSRA_UDRE) == 0)
     e1c:	eb e2       	ldi	r30, 0x2B	; 43
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
		;
	UDR_REG = data;
     e22:	ec e2       	ldi	r30, 0x2C	; 44
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	80 83       	st	Z, r24
}
     e2a:	0f 90       	pop	r0
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <UART_RXFlAG_down>:
void UART_RXFlAG_down() {
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRA_REG, UCSRA_RXC);
     e3c:	ab e2       	ldi	r26, 0x2B	; 43
     e3e:	b0 e0       	ldi	r27, 0x00	; 0
     e40:	eb e2       	ldi	r30, 0x2B	; 43
     e42:	f0 e0       	ldi	r31, 0x00	; 0
     e44:	80 81       	ld	r24, Z
     e46:	80 68       	ori	r24, 0x80	; 128
     e48:	8c 93       	st	X, r24
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <UART_Receive_String>:

void UART_Receive_String(char* arr) {
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <UART_Receive_String+0x6>
     e56:	00 d0       	rcall	.+0      	; 0xe58 <UART_Receive_String+0x8>
     e58:	0f 92       	push	r0
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9d 83       	std	Y+5, r25	; 0x05
     e60:	8c 83       	std	Y+4, r24	; 0x04
	char ca;
	for (u8 j = 0; j < 5; j++) {
     e62:	1a 82       	std	Y+2, r1	; 0x02
     e64:	19 c0       	rjmp	.+50     	; 0xe98 <UART_Receive_String+0x48>
		ca = UART_Receive();
     e66:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
     e6a:	8b 83       	std	Y+3, r24	; 0x03
		if (ca >= '1' && ca <= 'z') {
     e6c:	8b 81       	ldd	r24, Y+3	; 0x03
     e6e:	81 33       	cpi	r24, 0x31	; 49
     e70:	80 f0       	brcs	.+32     	; 0xe92 <UART_Receive_String+0x42>
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	8b 37       	cpi	r24, 0x7B	; 123
     e76:	68 f4       	brcc	.+26     	; 0xe92 <UART_Receive_String+0x42>
			LCD8Bit_Send_Data(ca);
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
			arr[j] = ca;
     e7e:	8a 81       	ldd	r24, Y+2	; 0x02
     e80:	28 2f       	mov	r18, r24
     e82:	30 e0       	ldi	r19, 0x00	; 0
     e84:	8c 81       	ldd	r24, Y+4	; 0x04
     e86:	9d 81       	ldd	r25, Y+5	; 0x05
     e88:	fc 01       	movw	r30, r24
     e8a:	e2 0f       	add	r30, r18
     e8c:	f3 1f       	adc	r31, r19
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	80 83       	st	Z, r24
	SET_BIT(UCSRA_REG, UCSRA_RXC);
}

void UART_Receive_String(char* arr) {
	char ca;
	for (u8 j = 0; j < 5; j++) {
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8a 83       	std	Y+2, r24	; 0x02
     e98:	8a 81       	ldd	r24, Y+2	; 0x02
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	20 f3       	brcs	.-56     	; 0xe66 <UART_Receive_String+0x16>
		if (ca >= '1' && ca <= 'z') {
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
     e9e:	8b 81       	ldd	r24, Y+3	; 0x03
     ea0:	8a 32       	cpi	r24, 0x2A	; 42
     ea2:	99 f4       	brne	.+38     	; 0xeca <UART_Receive_String+0x7a>
		for (u8 k = 0;k < 4; k++)
     ea4:	19 82       	std	Y+1, r1	; 0x01
     ea6:	0e c0       	rjmp	.+28     	; 0xec4 <UART_Receive_String+0x74>
			LCD8Bit_Send_Data(arr[k]);
     ea8:	89 81       	ldd	r24, Y+1	; 0x01
     eaa:	28 2f       	mov	r18, r24
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	8c 81       	ldd	r24, Y+4	; 0x04
     eb0:	9d 81       	ldd	r25, Y+5	; 0x05
     eb2:	fc 01       	movw	r30, r24
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	80 81       	ld	r24, Z
     eba:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
			LCD8Bit_Send_Data(ca);
			arr[j] = ca;
		}
	}
	if (ca == '*') {
		for (u8 k = 0;k < 4; k++)
     ebe:	89 81       	ldd	r24, Y+1	; 0x01
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	89 83       	std	Y+1, r24	; 0x01
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	78 f3       	brcs	.-34     	; 0xea8 <UART_Receive_String+0x58>
			LCD8Bit_Send_Data(arr[k]);

	}

}
     eca:	0f 90       	pop	r0
     ecc:	0f 90       	pop	r0
     ece:	0f 90       	pop	r0
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <UART_SEND_String>:
void UART_SEND_String(const char* arr){
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	00 d0       	rcall	.+0      	; 0xee0 <UART_SEND_String+0x6>
     ee0:	0f 92       	push	r0
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	9b 83       	std	Y+3, r25	; 0x03
     ee8:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
     eea:	19 82       	std	Y+1, r1	; 0x01
     eec:	0e c0       	rjmp	.+28     	; 0xf0a <UART_SEND_String+0x30>
   while(arr[i]!='\0'){
	   UART_Send(arr[i]);
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	28 2f       	mov	r18, r24
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	9b 81       	ldd	r25, Y+3	; 0x03
     ef8:	fc 01       	movw	r30, r24
     efa:	e2 0f       	add	r30, r18
     efc:	f3 1f       	adc	r31, r19
     efe:	80 81       	ld	r24, Z
     f00:	0e 94 08 07 	call	0xe10	; 0xe10 <UART_Send>
	   i++;
     f04:	89 81       	ldd	r24, Y+1	; 0x01
     f06:	8f 5f       	subi	r24, 0xFF	; 255
     f08:	89 83       	std	Y+1, r24	; 0x01
	}

}
void UART_SEND_String(const char* arr){
	u8 i = 0;
   while(arr[i]!='\0'){
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	fc 01       	movw	r30, r24
     f16:	e2 0f       	add	r30, r18
     f18:	f3 1f       	adc	r31, r19
     f1a:	80 81       	ld	r24, Z
     f1c:	88 23       	and	r24, r24
     f1e:	39 f7       	brne	.-50     	; 0xeee <UART_SEND_String+0x14>
	   UART_Send(arr[i]);
	   i++;
   }
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <UART_disable>:
void UART_disable() {
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB_REG, UCSRB_RXEN);
     f34:	aa e2       	ldi	r26, 0x2A	; 42
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	ea e2       	ldi	r30, 0x2A	; 42
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	8f 7e       	andi	r24, 0xEF	; 239
     f40:	8c 93       	st	X, r24
}
     f42:	cf 91       	pop	r28
     f44:	df 91       	pop	r29
     f46:	08 95       	ret

00000f48 <UART_enable>:
void UART_enable() {
     f48:	df 93       	push	r29
     f4a:	cf 93       	push	r28
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB_REG, UCSRB_RXEN);
     f50:	aa e2       	ldi	r26, 0x2A	; 42
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ea e2       	ldi	r30, 0x2A	; 42
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	80 61       	ori	r24, 0x10	; 16
     f5c:	8c 93       	st	X, r24

}
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <Timer0_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATH.h"
#include"TIMER_INTERFACE.h"
#include"TIMER_REG.h"

void Timer0_init(){
     f64:	df 93       	push	r29
     f66:	cf 93       	push	r28
     f68:	cd b7       	in	r28, 0x3d	; 61
     f6a:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM TIMER MODE*/
   SET_BIT(TCCR0_REG,TCCR0_WGM00);
     f6c:	a3 e5       	ldi	r26, 0x53	; 83
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e3 e5       	ldi	r30, 0x53	; 83
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	80 64       	ori	r24, 0x40	; 64
     f78:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_WGM01);
     f7a:	a3 e5       	ldi	r26, 0x53	; 83
     f7c:	b0 e0       	ldi	r27, 0x00	; 0
     f7e:	e3 e5       	ldi	r30, 0x53	; 83
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	80 81       	ld	r24, Z
     f84:	88 60       	ori	r24, 0x08	; 8
     f86:	8c 93       	st	X, r24

   /*Non inverting PWM */
   CLR_BIT(TCCR0_REG,TCCR0_COM00);
     f88:	a3 e5       	ldi	r26, 0x53	; 83
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e3 e5       	ldi	r30, 0x53	; 83
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8f 7e       	andi	r24, 0xEF	; 239
     f94:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_COM01);
     f96:	a3 e5       	ldi	r26, 0x53	; 83
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e3 e5       	ldi	r30, 0x53	; 83
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	80 62       	ori	r24, 0x20	; 32
     fa2:	8c 93       	st	X, r24

   /*Prescaler Clock Select*/
   CLR_BIT(TCCR0_REG,TCCR0_CS00);
     fa4:	a3 e5       	ldi	r26, 0x53	; 83
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e3 e5       	ldi	r30, 0x53	; 83
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	8e 7f       	andi	r24, 0xFE	; 254
     fb0:	8c 93       	st	X, r24
   SET_BIT(TCCR0_REG,TCCR0_CS01);
     fb2:	a3 e5       	ldi	r26, 0x53	; 83
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	e3 e5       	ldi	r30, 0x53	; 83
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	82 60       	ori	r24, 0x02	; 2
     fbe:	8c 93       	st	X, r24
   CLR_BIT(TCCR0_REG,TCCR0_CS02);
     fc0:	a3 e5       	ldi	r26, 0x53	; 83
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e3 e5       	ldi	r30, 0x53	; 83
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	8b 7f       	andi	r24, 0xFB	; 251
     fcc:	8c 93       	st	X, r24


}
     fce:	cf 91       	pop	r28
     fd0:	df 91       	pop	r29
     fd2:	08 95       	ret

00000fd4 <Timer1_init>:

void Timer1_init(){
     fd4:	df 93       	push	r29
     fd6:	cf 93       	push	r28
     fd8:	cd b7       	in	r28, 0x3d	; 61
     fda:	de b7       	in	r29, 0x3e	; 62
	/*Fast PWM Mode ICR1*/
	CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     fdc:	af e4       	ldi	r26, 0x4F	; 79
     fde:	b0 e0       	ldi	r27, 0x00	; 0
     fe0:	ef e4       	ldi	r30, 0x4F	; 79
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	80 81       	ld	r24, Z
     fe6:	8e 7f       	andi	r24, 0xFE	; 254
     fe8:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     fea:	af e4       	ldi	r26, 0x4F	; 79
     fec:	b0 e0       	ldi	r27, 0x00	; 0
     fee:	ef e4       	ldi	r30, 0x4F	; 79
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     ff8:	ae e4       	ldi	r26, 0x4E	; 78
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	ee e4       	ldi	r30, 0x4E	; 78
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	88 60       	ori	r24, 0x08	; 8
    1004:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    1006:	ae e4       	ldi	r26, 0x4E	; 78
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	ee e4       	ldi	r30, 0x4E	; 78
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	80 61       	ori	r24, 0x10	; 16
    1012:	8c 93       	st	X, r24
    /*interrupt enable*/
	//SET_BIT(TIMSK_REG,TIMSK_TOIE1);
	//SET_BIT(TIMSK_REG,TIMSK_OCIE1A);

	/*Mode Fast PWM on OCR1A NON-inverting */
	CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    1014:	af e4       	ldi	r26, 0x4F	; 79
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	ef e4       	ldi	r30, 0x4F	; 79
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	8f 7b       	andi	r24, 0xBF	; 191
    1020:	8c 93       	st	X, r24
	SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1022:	af e4       	ldi	r26, 0x4F	; 79
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	ef e4       	ldi	r30, 0x4F	; 79
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	80 68       	ori	r24, 0x80	; 128
    102e:	8c 93       	st	X, r24
    ICR1L_REG = 20000;
    1030:	e6 e4       	ldi	r30, 0x46	; 70
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 e2       	ldi	r24, 0x20	; 32
    1036:	9e e4       	ldi	r25, 0x4E	; 78
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	80 83       	st	Z, r24
	/*Prescaler = 8*/
	CLR_BIT(TCCR1B_REG,TCCR1B_CS10);
    103c:	ae e4       	ldi	r26, 0x4E	; 78
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ee e4       	ldi	r30, 0x4E	; 78
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8e 7f       	andi	r24, 0xFE	; 254
    1048:	8c 93       	st	X, r24
	SET_BIT(TCCR1B_REG,TCCR1B_CS11);
    104a:	ae e4       	ldi	r26, 0x4E	; 78
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	ee e4       	ldi	r30, 0x4E	; 78
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	82 60       	ori	r24, 0x02	; 2
    1056:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B_REG,TCCR1B_CS12);
    1058:	ae e4       	ldi	r26, 0x4E	; 78
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ee e4       	ldi	r30, 0x4E	; 78
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	8b 7f       	andi	r24, 0xFB	; 251
    1064:	8c 93       	st	X, r24





	}
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <Timer2_init>:
	
void Timer2_init(){
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	cd b7       	in	r28, 0x3d	; 61
    1072:	de b7       	in	r29, 0x3e	; 62
   /*Fast PWM TIMER MODE*/
   SET_BIT(TCCR2_REG,TCCR2_WGM20);
    1074:	a5 e4       	ldi	r26, 0x45	; 69
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e5 e4       	ldi	r30, 0x45	; 69
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 64       	ori	r24, 0x40	; 64
    1080:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_WGM21);
    1082:	a5 e4       	ldi	r26, 0x45	; 69
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e5 e4       	ldi	r30, 0x45	; 69
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	88 60       	ori	r24, 0x08	; 8
    108e:	8c 93       	st	X, r24
   /*PWM Timer Mode*/
   // SET_BIT(TIMSK_REG,TIMSK_TOIE0);
   //SET_BIT(TIMSK_REG,TIMSK_OCIE0);

   /*PWM */
   CLR_BIT(TCCR2_REG,TCCR2_COM20);
    1090:	a5 e4       	ldi	r26, 0x45	; 69
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	e5 e4       	ldi	r30, 0x45	; 69
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	80 81       	ld	r24, Z
    109a:	8f 7e       	andi	r24, 0xEF	; 239
    109c:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_COM21);
    109e:	a5 e4       	ldi	r26, 0x45	; 69
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e5 e4       	ldi	r30, 0x45	; 69
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	80 62       	ori	r24, 0x20	; 32
    10aa:	8c 93       	st	X, r24
   /*compare match output register*/
   //OCR0_REG = 0;


   /*Prescaler Clock Select*/
   CLR_BIT(TCCR2_REG,TCCR2_CS20);
    10ac:	a5 e4       	ldi	r26, 0x45	; 69
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	e5 e4       	ldi	r30, 0x45	; 69
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	8e 7f       	andi	r24, 0xFE	; 254
    10b8:	8c 93       	st	X, r24
   SET_BIT(TCCR2_REG,TCCR2_CS21);
    10ba:	a5 e4       	ldi	r26, 0x45	; 69
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e4       	ldi	r30, 0x45	; 69
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	82 60       	ori	r24, 0x02	; 2
    10c6:	8c 93       	st	X, r24
   CLR_BIT(TCCR2_REG,TCCR2_CS22);
    10c8:	a5 e4       	ldi	r26, 0x45	; 69
    10ca:	b0 e0       	ldi	r27, 0x00	; 0
    10cc:	e5 e4       	ldi	r30, 0x45	; 69
    10ce:	f0 e0       	ldi	r31, 0x00	; 0
    10d0:	80 81       	ld	r24, Z
    10d2:	8b 7f       	andi	r24, 0xFB	; 251
    10d4:	8c 93       	st	X, r24


}
    10d6:	cf 91       	pop	r28
    10d8:	df 91       	pop	r29
    10da:	08 95       	ret

000010dc <SET_TCNT0>:
void SET_TCNT0(u8 value){
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	0f 92       	push	r0
    10e2:	cd b7       	in	r28, 0x3d	; 61
    10e4:	de b7       	in	r29, 0x3e	; 62
    10e6:	89 83       	std	Y+1, r24	; 0x01
	TCNT0_REG = value;
    10e8:	e2 e5       	ldi	r30, 0x52	; 82
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	89 81       	ldd	r24, Y+1	; 0x01
    10ee:	80 83       	st	Z, r24
}
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <SET_OCR0>:
void SET_OCR0(u8 value){
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	0f 92       	push	r0
    10fe:	cd b7       	in	r28, 0x3d	; 61
    1100:	de b7       	in	r29, 0x3e	; 62
    1102:	89 83       	std	Y+1, r24	; 0x01
	OCR0_REG = value;
    1104:	ec e5       	ldi	r30, 0x5C	; 92
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	80 83       	st	Z, r24
}
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <SET_TCNT2>:
void SET_TCNT2(u8 value){
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	0f 92       	push	r0
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	89 83       	std	Y+1, r24	; 0x01
	TCNT2_REG = value;
    1120:	e4 e4       	ldi	r30, 0x44	; 68
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	80 83       	st	Z, r24
}
    1128:	0f 90       	pop	r0
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <SET_OCR2>:
void SET_OCR2(u8 value){
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	0f 92       	push	r0
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	89 83       	std	Y+1, r24	; 0x01
	OCR2_REG = value;
    113c:	e3 e4       	ldi	r30, 0x43	; 67
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	80 83       	st	Z, r24
}
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <SET_TCNT1>:
void SET_TCNT1(u16 value){
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <SET_TCNT1+0x6>
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
    1156:	9a 83       	std	Y+2, r25	; 0x02
    1158:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L_REG = value;
    115a:	ec e4       	ldi	r30, 0x4C	; 76
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	89 81       	ldd	r24, Y+1	; 0x01
    1160:	9a 81       	ldd	r25, Y+2	; 0x02
    1162:	91 83       	std	Z+1, r25	; 0x01
    1164:	80 83       	st	Z, r24
}
    1166:	0f 90       	pop	r0
    1168:	0f 90       	pop	r0
    116a:	cf 91       	pop	r28
    116c:	df 91       	pop	r29
    116e:	08 95       	ret

00001170 <SET_OCR1A>:
void SET_OCR1A(u16 value){
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <SET_OCR1A+0x6>
    1176:	cd b7       	in	r28, 0x3d	; 61
    1178:	de b7       	in	r29, 0x3e	; 62
    117a:	9a 83       	std	Y+2, r25	; 0x02
    117c:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL_REG = value;
    117e:	ea e4       	ldi	r30, 0x4A	; 74
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	91 83       	std	Z+1, r25	; 0x01
    1188:	80 83       	st	Z, r24
}
    118a:	0f 90       	pop	r0
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <SET_OCR1B>:
void SET_OCR1B(u16 value){
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	00 d0       	rcall	.+0      	; 0x119a <SET_OCR1B+0x6>
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
    119e:	9a 83       	std	Y+2, r25	; 0x02
    11a0:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL_REG = value;
    11a2:	e8 e4       	ldi	r30, 0x48	; 72
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	91 83       	std	Z+1, r25	; 0x01
    11ac:	80 83       	st	Z, r24
}
    11ae:	0f 90       	pop	r0
    11b0:	0f 90       	pop	r0
    11b2:	cf 91       	pop	r28
    11b4:	df 91       	pop	r29
    11b6:	08 95       	ret

000011b8 <Globle_Intrrupt_Enable>:
#include"../../UTILS/BIT_MATH.h"
#include "GIE_INTERFACE.h"
#include"GIE_REG.h"


void Globle_Intrrupt_Enable(){
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG_REG,7);
    11c0:	af e5       	ldi	r26, 0x5F	; 95
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	ef e5       	ldi	r30, 0x5F	; 95
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	80 81       	ld	r24, Z
    11ca:	80 68       	ori	r24, 0x80	; 128
    11cc:	8c 93       	st	X, r24

}
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <Globle_Intrrupt_Disable>:

void Globle_Intrrupt_Disable(){
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG_REG,7);
    11dc:	af e5       	ldi	r26, 0x5F	; 95
    11de:	b0 e0       	ldi	r27, 0x00	; 0
    11e0:	ef e5       	ldi	r30, 0x5F	; 95
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	80 81       	ld	r24, Z
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	8c 93       	st	X, r24

}
    11ea:	cf 91       	pop	r28
    11ec:	df 91       	pop	r29
    11ee:	08 95       	ret

000011f0 <INT0_init>:
#include "EXT_INTERRUPT_CONFIG.h"
#include "../../UTILS/STD_TYPES.h"
#include "../../UTILS/BIT_MATH.h"
#include "EXT_INTERRUPT_INTERFACE.h"

INT0_init() {
    11f0:	df 93       	push	r29
    11f2:	cf 93       	push	r28
    11f4:	cd b7       	in	r28, 0x3d	; 61
    11f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_REG, ISC00);
	SET_BIT(MCUCR_REG, ISC01);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCR_REG,ISC00);
    11f8:	a5 e5       	ldi	r26, 0x55	; 85
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e5 e5       	ldi	r30, 0x55	; 85
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	8e 7f       	andi	r24, 0xFE	; 254
    1204:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,ISC01);
    1206:	a5 e5       	ldi	r26, 0x55	; 85
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	e5 e5       	ldi	r30, 0x55	; 85
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	82 60       	ori	r24, 0x02	; 2
    1212:	8c 93       	st	X, r24
	CLR_BIT(MCUCR_REG,ISC01);
#endif

	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT0);
    1214:	ab e5       	ldi	r26, 0x5B	; 91
    1216:	b0 e0       	ldi	r27, 0x00	; 0
    1218:	eb e5       	ldi	r30, 0x5B	; 91
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	80 81       	ld	r24, Z
    121e:	80 64       	ori	r24, 0x40	; 64
    1220:	8c 93       	st	X, r24

}
    1222:	cf 91       	pop	r28
    1224:	df 91       	pop	r29
    1226:	08 95       	ret

00001228 <INT1_init>:

INT1_init() {
    1228:	df 93       	push	r29
    122a:	cf 93       	push	r28
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(MCUCR_REG, ISC10);
	SET_BIT(MCUCR_REG, ISC11);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCR_REG,ISC10);
    1230:	a5 e5       	ldi	r26, 0x55	; 85
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e5       	ldi	r30, 0x55	; 85
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	8b 7f       	andi	r24, 0xFB	; 251
    123c:	8c 93       	st	X, r24
	SET_BIT(MCUCR_REG,ISC11);
    123e:	a5 e5       	ldi	r26, 0x55	; 85
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	e5 e5       	ldi	r30, 0x55	; 85
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	88 60       	ori	r24, 0x08	; 8
    124a:	8c 93       	st	X, r24
#endif


	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT1);
    124c:	ab e5       	ldi	r26, 0x5B	; 91
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	eb e5       	ldi	r30, 0x5B	; 91
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 68       	ori	r24, 0x80	; 128
    1258:	8c 93       	st	X, r24

}
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <INT2_init>:

INT2_init() {
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
#if INT0_Sense_Control == Rising_Edge
	SET_BIT(MCUCSR_REG, ISC2);
#endif

#if INT0_Sense_Control == Falling_Edge
	CLR_BIT(MCUCSR_REG,ISC2);
    1268:	a4 e5       	ldi	r26, 0x54	; 84
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	e4 e5       	ldi	r30, 0x54	; 84
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	8f 7b       	andi	r24, 0xBF	; 191
    1274:	8c 93       	st	X, r24



	//Specific Interrupt Enable

	SET_BIT(GICR_REG, GICR_INT2);
    1276:	ab e5       	ldi	r26, 0x5B	; 91
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	eb e5       	ldi	r30, 0x5B	; 91
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	80 62       	ori	r24, 0x20	; 32
    1282:	8c 93       	st	X, r24

}
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <DIO_SetPin_Value>:
 */
#include "DIO_INTERFACE.H"



void DIO_SetPin_Value(u8 u8_port, u8 u8_pin, u8 value) {
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	27 97       	sbiw	r28, 0x07	; 7
    1294:	0f b6       	in	r0, 0x3f	; 63
    1296:	f8 94       	cli
    1298:	de bf       	out	0x3e, r29	; 62
    129a:	0f be       	out	0x3f, r0	; 63
    129c:	cd bf       	out	0x3d, r28	; 61
    129e:	89 83       	std	Y+1, r24	; 0x01
    12a0:	6a 83       	std	Y+2, r22	; 0x02
    12a2:	4b 83       	std	Y+3, r20	; 0x03
	if (value == HIGH) {
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	81 30       	cpi	r24, 0x01	; 1
    12a8:	09 f0       	breq	.+2      	; 0x12ac <DIO_SetPin_Value+0x22>
    12aa:	6f c0       	rjmp	.+222    	; 0x138a <DIO_SetPin_Value+0x100>
		switch (u8_port) {
    12ac:	89 81       	ldd	r24, Y+1	; 0x01
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	3f 83       	std	Y+7, r19	; 0x07
    12b4:	2e 83       	std	Y+6, r18	; 0x06
    12b6:	8e 81       	ldd	r24, Y+6	; 0x06
    12b8:	9f 81       	ldd	r25, Y+7	; 0x07
    12ba:	81 30       	cpi	r24, 0x01	; 1
    12bc:	91 05       	cpc	r25, r1
    12be:	49 f1       	breq	.+82     	; 0x1312 <DIO_SetPin_Value+0x88>
    12c0:	2e 81       	ldd	r18, Y+6	; 0x06
    12c2:	3f 81       	ldd	r19, Y+7	; 0x07
    12c4:	22 30       	cpi	r18, 0x02	; 2
    12c6:	31 05       	cpc	r19, r1
    12c8:	2c f4       	brge	.+10     	; 0x12d4 <DIO_SetPin_Value+0x4a>
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	9f 81       	ldd	r25, Y+7	; 0x07
    12ce:	00 97       	sbiw	r24, 0x00	; 0
    12d0:	61 f0       	breq	.+24     	; 0x12ea <DIO_SetPin_Value+0x60>
    12d2:	d2 c0       	rjmp	.+420    	; 0x1478 <DIO_SetPin_Value+0x1ee>
    12d4:	2e 81       	ldd	r18, Y+6	; 0x06
    12d6:	3f 81       	ldd	r19, Y+7	; 0x07
    12d8:	22 30       	cpi	r18, 0x02	; 2
    12da:	31 05       	cpc	r19, r1
    12dc:	71 f1       	breq	.+92     	; 0x133a <DIO_SetPin_Value+0xb0>
    12de:	8e 81       	ldd	r24, Y+6	; 0x06
    12e0:	9f 81       	ldd	r25, Y+7	; 0x07
    12e2:	83 30       	cpi	r24, 0x03	; 3
    12e4:	91 05       	cpc	r25, r1
    12e6:	e9 f1       	breq	.+122    	; 0x1362 <DIO_SetPin_Value+0xd8>
    12e8:	c7 c0       	rjmp	.+398    	; 0x1478 <DIO_SetPin_Value+0x1ee>
		case GroupA:
			SET_BIT(PORTA_REG, u8_pin);
    12ea:	ab e3       	ldi	r26, 0x3B	; 59
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	eb e3       	ldi	r30, 0x3B	; 59
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	48 2f       	mov	r20, r24
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	28 2f       	mov	r18, r24
    12fa:	30 e0       	ldi	r19, 0x00	; 0
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	02 2e       	mov	r0, r18
    1302:	02 c0       	rjmp	.+4      	; 0x1308 <DIO_SetPin_Value+0x7e>
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	0a 94       	dec	r0
    130a:	e2 f7       	brpl	.-8      	; 0x1304 <DIO_SetPin_Value+0x7a>
    130c:	84 2b       	or	r24, r20
    130e:	8c 93       	st	X, r24
    1310:	b3 c0       	rjmp	.+358    	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			SET_BIT(PORTB_REG, u8_pin);
    1312:	a8 e3       	ldi	r26, 0x38	; 56
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e8 e3       	ldi	r30, 0x38	; 56
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	48 2f       	mov	r20, r24
    131e:	8a 81       	ldd	r24, Y+2	; 0x02
    1320:	28 2f       	mov	r18, r24
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	02 2e       	mov	r0, r18
    132a:	02 c0       	rjmp	.+4      	; 0x1330 <DIO_SetPin_Value+0xa6>
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	0a 94       	dec	r0
    1332:	e2 f7       	brpl	.-8      	; 0x132c <DIO_SetPin_Value+0xa2>
    1334:	84 2b       	or	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	9f c0       	rjmp	.+318    	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			SET_BIT(PORTC_REG, u8_pin);
    133a:	a5 e3       	ldi	r26, 0x35	; 53
    133c:	b0 e0       	ldi	r27, 0x00	; 0
    133e:	e5 e3       	ldi	r30, 0x35	; 53
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	48 2f       	mov	r20, r24
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	02 2e       	mov	r0, r18
    1352:	02 c0       	rjmp	.+4      	; 0x1358 <DIO_SetPin_Value+0xce>
    1354:	88 0f       	add	r24, r24
    1356:	99 1f       	adc	r25, r25
    1358:	0a 94       	dec	r0
    135a:	e2 f7       	brpl	.-8      	; 0x1354 <DIO_SetPin_Value+0xca>
    135c:	84 2b       	or	r24, r20
    135e:	8c 93       	st	X, r24
    1360:	8b c0       	rjmp	.+278    	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			SET_BIT(PORTD_REG, u8_pin);
    1362:	a2 e3       	ldi	r26, 0x32	; 50
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e2 e3       	ldi	r30, 0x32	; 50
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	8a 81       	ldd	r24, Y+2	; 0x02
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_SetPin_Value+0xf6>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_SetPin_Value+0xf2>
    1384:	84 2b       	or	r24, r20
    1386:	8c 93       	st	X, r24
    1388:	77 c0       	rjmp	.+238    	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;

		}

	}
	else if (value == LOW) {
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	88 23       	and	r24, r24
    138e:	09 f0       	breq	.+2      	; 0x1392 <DIO_SetPin_Value+0x108>
    1390:	73 c0       	rjmp	.+230    	; 0x1478 <DIO_SetPin_Value+0x1ee>
		switch (u8_port) {
    1392:	89 81       	ldd	r24, Y+1	; 0x01
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3d 83       	std	Y+5, r19	; 0x05
    139a:	2c 83       	std	Y+4, r18	; 0x04
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	59 f1       	breq	.+86     	; 0x13fc <DIO_SetPin_Value+0x172>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <DIO_SetPin_Value+0x130>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	69 f0       	breq	.+26     	; 0x13d2 <DIO_SetPin_Value+0x148>
    13b8:	5f c0       	rjmp	.+190    	; 0x1478 <DIO_SetPin_Value+0x1ee>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	89 f1       	breq	.+98     	; 0x1426 <DIO_SetPin_Value+0x19c>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_SetPin_Value+0x146>
    13ce:	40 c0       	rjmp	.+128    	; 0x1450 <DIO_SetPin_Value+0x1c6>
    13d0:	53 c0       	rjmp	.+166    	; 0x1478 <DIO_SetPin_Value+0x1ee>
		case GroupA:
			CLR_BIT(PORTA_REG, u8_pin);
    13d2:	ab e3       	ldi	r26, 0x3B	; 59
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	eb e3       	ldi	r30, 0x3B	; 59
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 2e       	mov	r0, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_SetPin_Value+0x166>
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	0a 94       	dec	r0
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_SetPin_Value+0x162>
    13f4:	80 95       	com	r24
    13f6:	84 23       	and	r24, r20
    13f8:	8c 93       	st	X, r24
    13fa:	3e c0       	rjmp	.+124    	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupB:
			CLR_BIT(PORTB_REG, u8_pin);
    13fc:	a8 e3       	ldi	r26, 0x38	; 56
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e8 e3       	ldi	r30, 0x38	; 56
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	48 2f       	mov	r20, r24
    1408:	8a 81       	ldd	r24, Y+2	; 0x02
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	81 e0       	ldi	r24, 0x01	; 1
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	02 2e       	mov	r0, r18
    1414:	02 c0       	rjmp	.+4      	; 0x141a <DIO_SetPin_Value+0x190>
    1416:	88 0f       	add	r24, r24
    1418:	99 1f       	adc	r25, r25
    141a:	0a 94       	dec	r0
    141c:	e2 f7       	brpl	.-8      	; 0x1416 <DIO_SetPin_Value+0x18c>
    141e:	80 95       	com	r24
    1420:	84 23       	and	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	29 c0       	rjmp	.+82     	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupC:
			CLR_BIT(PORTC_REG, u8_pin);
    1426:	a5 e3       	ldi	r26, 0x35	; 53
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e5 e3       	ldi	r30, 0x35	; 53
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <DIO_SetPin_Value+0x1ba>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <DIO_SetPin_Value+0x1b6>
    1448:	80 95       	com	r24
    144a:	84 23       	and	r24, r20
    144c:	8c 93       	st	X, r24
    144e:	14 c0       	rjmp	.+40     	; 0x1478 <DIO_SetPin_Value+0x1ee>
			break;
		case GroupD:
			CLR_BIT(PORTD_REG, u8_pin);
    1450:	a2 e3       	ldi	r26, 0x32	; 50
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	e2 e3       	ldi	r30, 0x32	; 50
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	48 2f       	mov	r20, r24
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	28 2f       	mov	r18, r24
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 2e       	mov	r0, r18
    1468:	02 c0       	rjmp	.+4      	; 0x146e <DIO_SetPin_Value+0x1e4>
    146a:	88 0f       	add	r24, r24
    146c:	99 1f       	adc	r25, r25
    146e:	0a 94       	dec	r0
    1470:	e2 f7       	brpl	.-8      	; 0x146a <DIO_SetPin_Value+0x1e0>
    1472:	80 95       	com	r24
    1474:	84 23       	and	r24, r20
    1476:	8c 93       	st	X, r24
			break;
		}
	}
}
    1478:	27 96       	adiw	r28, 0x07	; 7
    147a:	0f b6       	in	r0, 0x3f	; 63
    147c:	f8 94       	cli
    147e:	de bf       	out	0x3e, r29	; 62
    1480:	0f be       	out	0x3f, r0	; 63
    1482:	cd bf       	out	0x3d, r28	; 61
    1484:	cf 91       	pop	r28
    1486:	df 91       	pop	r29
    1488:	08 95       	ret

0000148a <DIO_SetPin_Direction>:





void DIO_SetPin_Direction(u8 u8_port, u8 u8_pin, u8 direction) {
    148a:	df 93       	push	r29
    148c:	cf 93       	push	r28
    148e:	cd b7       	in	r28, 0x3d	; 61
    1490:	de b7       	in	r29, 0x3e	; 62
    1492:	27 97       	sbiw	r28, 0x07	; 7
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
    14a2:	4b 83       	std	Y+3, r20	; 0x03
	if (direction == OUTPUT) {
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	09 f0       	breq	.+2      	; 0x14ac <DIO_SetPin_Direction+0x22>
    14aa:	6f c0       	rjmp	.+222    	; 0x158a <DIO_SetPin_Direction+0x100>
		switch (u8_port) {
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	3f 83       	std	Y+7, r19	; 0x07
    14b4:	2e 83       	std	Y+6, r18	; 0x06
    14b6:	8e 81       	ldd	r24, Y+6	; 0x06
    14b8:	9f 81       	ldd	r25, Y+7	; 0x07
    14ba:	81 30       	cpi	r24, 0x01	; 1
    14bc:	91 05       	cpc	r25, r1
    14be:	49 f1       	breq	.+82     	; 0x1512 <DIO_SetPin_Direction+0x88>
    14c0:	2e 81       	ldd	r18, Y+6	; 0x06
    14c2:	3f 81       	ldd	r19, Y+7	; 0x07
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	2c f4       	brge	.+10     	; 0x14d4 <DIO_SetPin_Direction+0x4a>
    14ca:	8e 81       	ldd	r24, Y+6	; 0x06
    14cc:	9f 81       	ldd	r25, Y+7	; 0x07
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	61 f0       	breq	.+24     	; 0x14ea <DIO_SetPin_Direction+0x60>
    14d2:	d2 c0       	rjmp	.+420    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
    14d4:	2e 81       	ldd	r18, Y+6	; 0x06
    14d6:	3f 81       	ldd	r19, Y+7	; 0x07
    14d8:	22 30       	cpi	r18, 0x02	; 2
    14da:	31 05       	cpc	r19, r1
    14dc:	71 f1       	breq	.+92     	; 0x153a <DIO_SetPin_Direction+0xb0>
    14de:	8e 81       	ldd	r24, Y+6	; 0x06
    14e0:	9f 81       	ldd	r25, Y+7	; 0x07
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	e9 f1       	breq	.+122    	; 0x1562 <DIO_SetPin_Direction+0xd8>
    14e8:	c7 c0       	rjmp	.+398    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			SET_BIT(DDRA_REG, u8_pin);
    14ea:	aa e3       	ldi	r26, 0x3A	; 58
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ea e3       	ldi	r30, 0x3A	; 58
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8a 81       	ldd	r24, Y+2	; 0x02
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	02 2e       	mov	r0, r18
    1502:	02 c0       	rjmp	.+4      	; 0x1508 <DIO_SetPin_Direction+0x7e>
    1504:	88 0f       	add	r24, r24
    1506:	99 1f       	adc	r25, r25
    1508:	0a 94       	dec	r0
    150a:	e2 f7       	brpl	.-8      	; 0x1504 <DIO_SetPin_Direction+0x7a>
    150c:	84 2b       	or	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	b3 c0       	rjmp	.+358    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			SET_BIT(DDRB_REG, u8_pin);
    1512:	a7 e3       	ldi	r26, 0x37	; 55
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e7 e3       	ldi	r30, 0x37	; 55
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8a 81       	ldd	r24, Y+2	; 0x02
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <DIO_SetPin_Direction+0xa6>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <DIO_SetPin_Direction+0xa2>
    1534:	84 2b       	or	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	9f c0       	rjmp	.+318    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			SET_BIT(DDRC_REG, u8_pin);
    153a:	a4 e3       	ldi	r26, 0x34	; 52
    153c:	b0 e0       	ldi	r27, 0x00	; 0
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	80 81       	ld	r24, Z
    1544:	48 2f       	mov	r20, r24
    1546:	8a 81       	ldd	r24, Y+2	; 0x02
    1548:	28 2f       	mov	r18, r24
    154a:	30 e0       	ldi	r19, 0x00	; 0
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	02 2e       	mov	r0, r18
    1552:	02 c0       	rjmp	.+4      	; 0x1558 <DIO_SetPin_Direction+0xce>
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	0a 94       	dec	r0
    155a:	e2 f7       	brpl	.-8      	; 0x1554 <DIO_SetPin_Direction+0xca>
    155c:	84 2b       	or	r24, r20
    155e:	8c 93       	st	X, r24
    1560:	8b c0       	rjmp	.+278    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			SET_BIT(DDRD_REG, u8_pin);
    1562:	a1 e3       	ldi	r26, 0x31	; 49
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e1 e3       	ldi	r30, 0x31	; 49
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	48 2f       	mov	r20, r24
    156e:	8a 81       	ldd	r24, Y+2	; 0x02
    1570:	28 2f       	mov	r18, r24
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	90 e0       	ldi	r25, 0x00	; 0
    1578:	02 2e       	mov	r0, r18
    157a:	02 c0       	rjmp	.+4      	; 0x1580 <DIO_SetPin_Direction+0xf6>
    157c:	88 0f       	add	r24, r24
    157e:	99 1f       	adc	r25, r25
    1580:	0a 94       	dec	r0
    1582:	e2 f7       	brpl	.-8      	; 0x157c <DIO_SetPin_Direction+0xf2>
    1584:	84 2b       	or	r24, r20
    1586:	8c 93       	st	X, r24
    1588:	77 c0       	rjmp	.+238    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;

		}

	}
	else if (direction == INPUT) {
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	88 23       	and	r24, r24
    158e:	09 f0       	breq	.+2      	; 0x1592 <DIO_SetPin_Direction+0x108>
    1590:	73 c0       	rjmp	.+230    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
		switch (u8_port) {
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	28 2f       	mov	r18, r24
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	3d 83       	std	Y+5, r19	; 0x05
    159a:	2c 83       	std	Y+4, r18	; 0x04
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	9d 81       	ldd	r25, Y+5	; 0x05
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	91 05       	cpc	r25, r1
    15a4:	59 f1       	breq	.+86     	; 0x15fc <DIO_SetPin_Direction+0x172>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	22 30       	cpi	r18, 0x02	; 2
    15ac:	31 05       	cpc	r19, r1
    15ae:	2c f4       	brge	.+10     	; 0x15ba <DIO_SetPin_Direction+0x130>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	00 97       	sbiw	r24, 0x00	; 0
    15b6:	69 f0       	breq	.+26     	; 0x15d2 <DIO_SetPin_Direction+0x148>
    15b8:	5f c0       	rjmp	.+190    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
    15ba:	2c 81       	ldd	r18, Y+4	; 0x04
    15bc:	3d 81       	ldd	r19, Y+5	; 0x05
    15be:	22 30       	cpi	r18, 0x02	; 2
    15c0:	31 05       	cpc	r19, r1
    15c2:	89 f1       	breq	.+98     	; 0x1626 <DIO_SetPin_Direction+0x19c>
    15c4:	8c 81       	ldd	r24, Y+4	; 0x04
    15c6:	9d 81       	ldd	r25, Y+5	; 0x05
    15c8:	83 30       	cpi	r24, 0x03	; 3
    15ca:	91 05       	cpc	r25, r1
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <DIO_SetPin_Direction+0x146>
    15ce:	40 c0       	rjmp	.+128    	; 0x1650 <DIO_SetPin_Direction+0x1c6>
    15d0:	53 c0       	rjmp	.+166    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
		case GroupA:
			CLR_BIT(DDRA_REG, u8_pin);
    15d2:	aa e3       	ldi	r26, 0x3A	; 58
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ea e3       	ldi	r30, 0x3A	; 58
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_SetPin_Direction+0x166>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_SetPin_Direction+0x162>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
    15fa:	3e c0       	rjmp	.+124    	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupB:
			CLR_BIT(DDRB_REG, u8_pin);
    15fc:	a7 e3       	ldi	r26, 0x37	; 55
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	e7 e3       	ldi	r30, 0x37	; 55
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <DIO_SetPin_Direction+0x190>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <DIO_SetPin_Direction+0x18c>
    161e:	80 95       	com	r24
    1620:	84 23       	and	r24, r20
    1622:	8c 93       	st	X, r24
    1624:	29 c0       	rjmp	.+82     	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupC:
			CLR_BIT(DDRC_REG, u8_pin);
    1626:	a4 e3       	ldi	r26, 0x34	; 52
    1628:	b0 e0       	ldi	r27, 0x00	; 0
    162a:	e4 e3       	ldi	r30, 0x34	; 52
    162c:	f0 e0       	ldi	r31, 0x00	; 0
    162e:	80 81       	ld	r24, Z
    1630:	48 2f       	mov	r20, r24
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	81 e0       	ldi	r24, 0x01	; 1
    163a:	90 e0       	ldi	r25, 0x00	; 0
    163c:	02 2e       	mov	r0, r18
    163e:	02 c0       	rjmp	.+4      	; 0x1644 <DIO_SetPin_Direction+0x1ba>
    1640:	88 0f       	add	r24, r24
    1642:	99 1f       	adc	r25, r25
    1644:	0a 94       	dec	r0
    1646:	e2 f7       	brpl	.-8      	; 0x1640 <DIO_SetPin_Direction+0x1b6>
    1648:	80 95       	com	r24
    164a:	84 23       	and	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	14 c0       	rjmp	.+40     	; 0x1678 <DIO_SetPin_Direction+0x1ee>
			break;
		case GroupD:
			CLR_BIT(DDRD_REG, u8_pin);
    1650:	a1 e3       	ldi	r26, 0x31	; 49
    1652:	b0 e0       	ldi	r27, 0x00	; 0
    1654:	e1 e3       	ldi	r30, 0x31	; 49
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	80 81       	ld	r24, Z
    165a:	48 2f       	mov	r20, r24
    165c:	8a 81       	ldd	r24, Y+2	; 0x02
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	81 e0       	ldi	r24, 0x01	; 1
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	02 2e       	mov	r0, r18
    1668:	02 c0       	rjmp	.+4      	; 0x166e <DIO_SetPin_Direction+0x1e4>
    166a:	88 0f       	add	r24, r24
    166c:	99 1f       	adc	r25, r25
    166e:	0a 94       	dec	r0
    1670:	e2 f7       	brpl	.-8      	; 0x166a <DIO_SetPin_Direction+0x1e0>
    1672:	80 95       	com	r24
    1674:	84 23       	and	r24, r20
    1676:	8c 93       	st	X, r24
			break;
		}
	}
}
    1678:	27 96       	adiw	r28, 0x07	; 7
    167a:	0f b6       	in	r0, 0x3f	; 63
    167c:	f8 94       	cli
    167e:	de bf       	out	0x3e, r29	; 62
    1680:	0f be       	out	0x3f, r0	; 63
    1682:	cd bf       	out	0x3d, r28	; 61
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <DIO_SetPort_Value>:





void DIO_SetPort_Value(u8 u8_port,u8 value){
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	00 d0       	rcall	.+0      	; 0x1690 <DIO_SetPort_Value+0x6>
    1690:	00 d0       	rcall	.+0      	; 0x1692 <DIO_SetPort_Value+0x8>
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	89 83       	std	Y+1, r24	; 0x01
    1698:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    169a:	89 81       	ldd	r24, Y+1	; 0x01
    169c:	28 2f       	mov	r18, r24
    169e:	30 e0       	ldi	r19, 0x00	; 0
    16a0:	3c 83       	std	Y+4, r19	; 0x04
    16a2:	2b 83       	std	Y+3, r18	; 0x03
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	91 05       	cpc	r25, r1
    16ac:	d1 f0       	breq	.+52     	; 0x16e2 <DIO_SetPort_Value+0x58>
    16ae:	2b 81       	ldd	r18, Y+3	; 0x03
    16b0:	3c 81       	ldd	r19, Y+4	; 0x04
    16b2:	22 30       	cpi	r18, 0x02	; 2
    16b4:	31 05       	cpc	r19, r1
    16b6:	2c f4       	brge	.+10     	; 0x16c2 <DIO_SetPort_Value+0x38>
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	00 97       	sbiw	r24, 0x00	; 0
    16be:	61 f0       	breq	.+24     	; 0x16d8 <DIO_SetPort_Value+0x4e>
    16c0:	1e c0       	rjmp	.+60     	; 0x16fe <DIO_SetPort_Value+0x74>
    16c2:	2b 81       	ldd	r18, Y+3	; 0x03
    16c4:	3c 81       	ldd	r19, Y+4	; 0x04
    16c6:	22 30       	cpi	r18, 0x02	; 2
    16c8:	31 05       	cpc	r19, r1
    16ca:	81 f0       	breq	.+32     	; 0x16ec <DIO_SetPort_Value+0x62>
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	83 30       	cpi	r24, 0x03	; 3
    16d2:	91 05       	cpc	r25, r1
    16d4:	81 f0       	breq	.+32     	; 0x16f6 <DIO_SetPort_Value+0x6c>
    16d6:	13 c0       	rjmp	.+38     	; 0x16fe <DIO_SetPort_Value+0x74>
	case GroupA: PORTA_REG = value;break;
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	80 83       	st	Z, r24
    16e0:	0e c0       	rjmp	.+28     	; 0x16fe <DIO_SetPort_Value+0x74>
	case GroupB: PORTB_REG = value;break;
    16e2:	e8 e3       	ldi	r30, 0x38	; 56
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	80 83       	st	Z, r24
    16ea:	09 c0       	rjmp	.+18     	; 0x16fe <DIO_SetPort_Value+0x74>
	case GroupC: PORTC_REG = value;break;
    16ec:	e5 e3       	ldi	r30, 0x35	; 53
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	80 83       	st	Z, r24
    16f4:	04 c0       	rjmp	.+8      	; 0x16fe <DIO_SetPort_Value+0x74>
	case GroupD: PORTD_REG = value;break;
    16f6:	e2 e3       	ldi	r30, 0x32	; 50
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	8a 81       	ldd	r24, Y+2	; 0x02
    16fc:	80 83       	st	Z, r24

	}

}
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	0f 90       	pop	r0
    1704:	0f 90       	pop	r0
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	08 95       	ret

0000170c <DIO_SetPort_Direction>:





void DIO_SetPort_Direction(u8 u8_port,u8 direction){
    170c:	df 93       	push	r29
    170e:	cf 93       	push	r28
    1710:	00 d0       	rcall	.+0      	; 0x1712 <DIO_SetPort_Direction+0x6>
    1712:	00 d0       	rcall	.+0      	; 0x1714 <DIO_SetPort_Direction+0x8>
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	89 83       	std	Y+1, r24	; 0x01
    171a:	6a 83       	std	Y+2, r22	; 0x02
	switch(u8_port){
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3c 83       	std	Y+4, r19	; 0x04
    1724:	2b 83       	std	Y+3, r18	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	d1 f0       	breq	.+52     	; 0x1764 <DIO_SetPort_Direction+0x58>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	2c f4       	brge	.+10     	; 0x1744 <DIO_SetPort_Direction+0x38>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	61 f0       	breq	.+24     	; 0x175a <DIO_SetPort_Direction+0x4e>
    1742:	1e c0       	rjmp	.+60     	; 0x1780 <DIO_SetPort_Direction+0x74>
    1744:	2b 81       	ldd	r18, Y+3	; 0x03
    1746:	3c 81       	ldd	r19, Y+4	; 0x04
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	81 f0       	breq	.+32     	; 0x176e <DIO_SetPort_Direction+0x62>
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	83 30       	cpi	r24, 0x03	; 3
    1754:	91 05       	cpc	r25, r1
    1756:	81 f0       	breq	.+32     	; 0x1778 <DIO_SetPort_Direction+0x6c>
    1758:	13 c0       	rjmp	.+38     	; 0x1780 <DIO_SetPort_Direction+0x74>
	case GroupA: DDRA_REG = direction;break;
    175a:	ea e3       	ldi	r30, 0x3A	; 58
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	80 83       	st	Z, r24
    1762:	0e c0       	rjmp	.+28     	; 0x1780 <DIO_SetPort_Direction+0x74>
	case GroupB: DDRB_REG = direction;break;
    1764:	e7 e3       	ldi	r30, 0x37	; 55
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	80 83       	st	Z, r24
    176c:	09 c0       	rjmp	.+18     	; 0x1780 <DIO_SetPort_Direction+0x74>
	case GroupC: DDRC_REG = direction;break;
    176e:	e4 e3       	ldi	r30, 0x34	; 52
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	8a 81       	ldd	r24, Y+2	; 0x02
    1774:	80 83       	st	Z, r24
    1776:	04 c0       	rjmp	.+8      	; 0x1780 <DIO_SetPort_Direction+0x74>
	case GroupD: DDRD_REG = direction;break;
    1778:	e1 e3       	ldi	r30, 0x31	; 49
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	80 83       	st	Z, r24

	}

}
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <DIO_GetPinValue>:





u8 DIO_GetPinValue(u8 u8_port, u8 u8_pin){
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	00 d0       	rcall	.+0      	; 0x1794 <DIO_GetPinValue+0x6>
    1794:	00 d0       	rcall	.+0      	; 0x1796 <DIO_GetPinValue+0x8>
    1796:	0f 92       	push	r0
    1798:	cd b7       	in	r28, 0x3d	; 61
    179a:	de b7       	in	r29, 0x3e	; 62
    179c:	8a 83       	std	Y+2, r24	; 0x02
    179e:	6b 83       	std	Y+3, r22	; 0x03
	u8 value = 0;
    17a0:	19 82       	std	Y+1, r1	; 0x01
	switch(u8_port){
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	4c 81       	ldd	r20, Y+4	; 0x04
    17ae:	5d 81       	ldd	r21, Y+5	; 0x05
    17b0:	41 30       	cpi	r20, 0x01	; 1
    17b2:	51 05       	cpc	r21, r1
    17b4:	41 f1       	breq	.+80     	; 0x1806 <DIO_GetPinValue+0x78>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	91 05       	cpc	r25, r1
    17be:	34 f4       	brge	.+12     	; 0x17cc <DIO_GetPinValue+0x3e>
    17c0:	2c 81       	ldd	r18, Y+4	; 0x04
    17c2:	3d 81       	ldd	r19, Y+5	; 0x05
    17c4:	21 15       	cp	r18, r1
    17c6:	31 05       	cpc	r19, r1
    17c8:	61 f0       	breq	.+24     	; 0x17e2 <DIO_GetPinValue+0x54>
    17ca:	52 c0       	rjmp	.+164    	; 0x1870 <DIO_GetPinValue+0xe2>
    17cc:	4c 81       	ldd	r20, Y+4	; 0x04
    17ce:	5d 81       	ldd	r21, Y+5	; 0x05
    17d0:	42 30       	cpi	r20, 0x02	; 2
    17d2:	51 05       	cpc	r21, r1
    17d4:	51 f1       	breq	.+84     	; 0x182a <DIO_GetPinValue+0x9c>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	83 30       	cpi	r24, 0x03	; 3
    17dc:	91 05       	cpc	r25, r1
    17de:	b9 f1       	breq	.+110    	; 0x184e <DIO_GetPinValue+0xc0>
    17e0:	47 c0       	rjmp	.+142    	; 0x1870 <DIO_GetPinValue+0xe2>
	case GroupA:value = GET_BIT(PINA_REG,u8_pin);break;
    17e2:	e9 e3       	ldi	r30, 0x39	; 57
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	28 2f       	mov	r18, r24
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	88 2f       	mov	r24, r24
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	a9 01       	movw	r20, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_GetPinValue+0x6c>
    17f6:	55 95       	asr	r21
    17f8:	47 95       	ror	r20
    17fa:	8a 95       	dec	r24
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_GetPinValue+0x68>
    17fe:	ca 01       	movw	r24, r20
    1800:	81 70       	andi	r24, 0x01	; 1
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	35 c0       	rjmp	.+106    	; 0x1870 <DIO_GetPinValue+0xe2>
	case GroupB:value = GET_BIT(PINB_REG,u8_pin);break;
    1806:	e6 e3       	ldi	r30, 0x36	; 54
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	28 2f       	mov	r18, r24
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	8b 81       	ldd	r24, Y+3	; 0x03
    1812:	88 2f       	mov	r24, r24
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	a9 01       	movw	r20, r18
    1818:	02 c0       	rjmp	.+4      	; 0x181e <DIO_GetPinValue+0x90>
    181a:	55 95       	asr	r21
    181c:	47 95       	ror	r20
    181e:	8a 95       	dec	r24
    1820:	e2 f7       	brpl	.-8      	; 0x181a <DIO_GetPinValue+0x8c>
    1822:	ca 01       	movw	r24, r20
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	23 c0       	rjmp	.+70     	; 0x1870 <DIO_GetPinValue+0xe2>
	case GroupC:value = GET_BIT(PINC_REG,u8_pin);break;
    182a:	e3 e3       	ldi	r30, 0x33	; 51
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <DIO_GetPinValue+0xb4>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <DIO_GetPinValue+0xb0>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	89 83       	std	Y+1, r24	; 0x01
    184c:	11 c0       	rjmp	.+34     	; 0x1870 <DIO_GetPinValue+0xe2>
	case GroupD:value = GET_BIT(PIND_REG,u8_pin);break;
    184e:	e0 e3       	ldi	r30, 0x30	; 48
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	28 2f       	mov	r18, r24
    1856:	30 e0       	ldi	r19, 0x00	; 0
    1858:	8b 81       	ldd	r24, Y+3	; 0x03
    185a:	88 2f       	mov	r24, r24
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	a9 01       	movw	r20, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <DIO_GetPinValue+0xd8>
    1862:	55 95       	asr	r21
    1864:	47 95       	ror	r20
    1866:	8a 95       	dec	r24
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <DIO_GetPinValue+0xd4>
    186a:	ca 01       	movw	r24, r20
    186c:	81 70       	andi	r24, 0x01	; 1
    186e:	89 83       	std	Y+1, r24	; 0x01

	}
	return value;
    1870:	89 81       	ldd	r24, Y+1	; 0x01
}
    1872:	0f 90       	pop	r0
    1874:	0f 90       	pop	r0
    1876:	0f 90       	pop	r0
    1878:	0f 90       	pop	r0
    187a:	0f 90       	pop	r0
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <ADC_init>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "../ADC/ADC_INTERFACE.h"
#include "../ADC/ADC_REG.h"

void ADC_init(){
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	cd b7       	in	r28, 0x3d	; 61
    1888:	de b7       	in	r29, 0x3e	; 62
	//ADC Voltage Reference Selection to AVCC
	SET_BIT(ADMUX_REG,ADMUX_REFS0);
    188a:	a7 e2       	ldi	r26, 0x27	; 39
    188c:	b0 e0       	ldi	r27, 0x00	; 0
    188e:	e7 e2       	ldi	r30, 0x27	; 39
    1890:	f0 e0       	ldi	r31, 0x00	; 0
    1892:	80 81       	ld	r24, Z
    1894:	80 64       	ori	r24, 0x40	; 64
    1896:	8c 93       	st	X, r24
	CLR_BIT(ADMUX_REG,ADMUX_REFS1);
    1898:	a7 e2       	ldi	r26, 0x27	; 39
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e7 e2       	ldi	r30, 0x27	; 39
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8f 77       	andi	r24, 0x7F	; 127
    18a4:	8c 93       	st	X, r24

    //ADC Right Adjust
	CLR_BIT(ADMUX_REG,ADMUX_ADLAR);
    18a6:	a7 e2       	ldi	r26, 0x27	; 39
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e7 e2       	ldi	r30, 0x27	; 39
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	8f 7d       	andi	r24, 0xDF	; 223
    18b2:	8c 93       	st	X, r24

	//ADC Prescaler Clock Selection to 128 (the slowest speed)
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS0);
    18b4:	a6 e2       	ldi	r26, 0x26	; 38
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e6 e2       	ldi	r30, 0x26	; 38
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	81 60       	ori	r24, 0x01	; 1
    18c0:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS1);
    18c2:	a6 e2       	ldi	r26, 0x26	; 38
    18c4:	b0 e0       	ldi	r27, 0x00	; 0
    18c6:	e6 e2       	ldi	r30, 0x26	; 38
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	80 81       	ld	r24, Z
    18cc:	82 60       	ori	r24, 0x02	; 2
    18ce:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADCSRA_ADPS2);
    18d0:	a6 e2       	ldi	r26, 0x26	; 38
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e6 e2       	ldi	r30, 0x26	; 38
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	84 60       	ori	r24, 0x04	; 4
    18dc:	8c 93       	st	X, r24

    //ADC Enable
	SET_BIT(ADCSRA_REG, ADCSRA_ADEN);
    18de:	a6 e2       	ldi	r26, 0x26	; 38
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	e6 e2       	ldi	r30, 0x26	; 38
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	80 68       	ori	r24, 0x80	; 128
    18ea:	8c 93       	st	X, r24
}
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	08 95       	ret

000018f2 <ADC_Read_Sych>:

u16 ADC_Read_Sych(u8 channel){
    18f2:	df 93       	push	r29
    18f4:	cf 93       	push	r28
    18f6:	00 d0       	rcall	.+0      	; 0x18f8 <ADC_Read_Sych+0x6>
    18f8:	00 d0       	rcall	.+0      	; 0x18fa <ADC_Read_Sych+0x8>
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <ADC_Read_Sych+0xa>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	8d 83       	std	Y+5, r24	; 0x05
	u32 time = 100000;
    1902:	80 ea       	ldi	r24, 0xA0	; 160
    1904:	96 e8       	ldi	r25, 0x86	; 134
    1906:	9c 83       	std	Y+4, r25	; 0x04
    1908:	8b 83       	std	Y+3, r24	; 0x03
	u32 cnt = 0;
    190a:	1a 82       	std	Y+2, r1	; 0x02
    190c:	19 82       	std	Y+1, r1	; 0x01
	//Channel Select
	ADMUX_REG &= 0b11100000;
    190e:	a7 e2       	ldi	r26, 0x27	; 39
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e7 e2       	ldi	r30, 0x27	; 39
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	80 7e       	andi	r24, 0xE0	; 224
    191a:	8c 93       	st	X, r24
	ADMUX_REG |= channel;
    191c:	a7 e2       	ldi	r26, 0x27	; 39
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e7 e2       	ldi	r30, 0x27	; 39
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	90 81       	ld	r25, Z
    1926:	8d 81       	ldd	r24, Y+5	; 0x05
    1928:	89 2b       	or	r24, r25
    192a:	8c 93       	st	X, r24

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);
    192c:	a6 e2       	ldi	r26, 0x26	; 38
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	e6 e2       	ldi	r30, 0x26	; 38
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	80 64       	ori	r24, 0x40	; 64
    1938:	8c 93       	st	X, r24
    193a:	05 c0       	rjmp	.+10     	; 0x1946 <ADC_Read_Sych+0x54>

	while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 )|| cnt != time){
		cnt++;
    193c:	89 81       	ldd	r24, Y+1	; 0x01
    193e:	9a 81       	ldd	r25, Y+2	; 0x02
    1940:	01 96       	adiw	r24, 0x01	; 1
    1942:	9a 83       	std	Y+2, r25	; 0x02
    1944:	89 83       	std	Y+1, r24	; 0x01
	ADMUX_REG |= channel;

	//Start Conversion
	SET_BIT(ADCSRA_REG,ADCSRA_ADSC);

	while((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)==0 )|| cnt != time){
    1946:	e6 e2       	ldi	r30, 0x26	; 38
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	29 81       	ldd	r18, Y+1	; 0x01
    194e:	3a 81       	ldd	r19, Y+2	; 0x02
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	28 17       	cp	r18, r24
    1956:	39 07       	cpc	r19, r25
    1958:	89 f7       	brne	.-30     	; 0x193c <ADC_Read_Sych+0x4a>
		cnt++;
	}

	//Clear ADC Flag for the next conversion because No INTERRUPT is used
	SET_BIT(ADCSRA_REG,ADCSRA_ADIF);
    195a:	a6 e2       	ldi	r26, 0x26	; 38
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e6 e2       	ldi	r30, 0x26	; 38
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	80 61       	ori	r24, 0x10	; 16
    1966:	8c 93       	st	X, r24

	//Return the reading
    return ADCL_REG;
    1968:	e4 e2       	ldi	r30, 0x24	; 36
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01


}
    1970:	26 96       	adiw	r28, 0x06	; 6
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <Shift>:
#include"../../UTILS/STD_TYPES.h"
#include"../../UTILS/BIT_MATh.h"
#include "SHIFT_REGISTER_INTERFACE.h"
#include "../../MCAL/DIO/DIO_INTERFACE.h"

void Shift(u8 port,u8 latch_pin,u8 data_pin,u8 clk_pin,u16 binary){
    1982:	0f 93       	push	r16
    1984:	1f 93       	push	r17
    1986:	df 93       	push	r29
    1988:	cf 93       	push	r28
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	27 97       	sbiw	r28, 0x07	; 7
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	f8 94       	cli
    1994:	de bf       	out	0x3e, r29	; 62
    1996:	0f be       	out	0x3f, r0	; 63
    1998:	cd bf       	out	0x3d, r28	; 61
    199a:	8a 83       	std	Y+2, r24	; 0x02
    199c:	6b 83       	std	Y+3, r22	; 0x03
    199e:	4c 83       	std	Y+4, r20	; 0x04
    19a0:	2d 83       	std	Y+5, r18	; 0x05
    19a2:	1f 83       	std	Y+7, r17	; 0x07
    19a4:	0e 83       	std	Y+6, r16	; 0x06

	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	6b 81       	ldd	r22, Y+3	; 0x03
    19aa:	40 e0       	ldi	r20, 0x00	; 0
    19ac:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
    19b0:	8a 81       	ldd	r24, Y+2	; 0x02
    19b2:	6d 81       	ldd	r22, Y+5	; 0x05
    19b4:	40 e0       	ldi	r20, 0x00	; 0
    19b6:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	DIO_SetPin_Value(port,clk_pin,1);
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	6d 81       	ldd	r22, Y+5	; 0x05
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	for(u8 i =0;i<16;i++){
    19c4:	19 82       	std	Y+1, r1	; 0x01
    19c6:	27 c0       	rjmp	.+78     	; 0x1a16 <Shift+0x94>
		if(GET_BIT(binary,i)==1)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	8e 81       	ldd	r24, Y+6	; 0x06
    19d0:	9f 81       	ldd	r25, Y+7	; 0x07
    19d2:	02 2e       	mov	r0, r18
    19d4:	02 c0       	rjmp	.+4      	; 0x19da <Shift+0x58>
    19d6:	96 95       	lsr	r25
    19d8:	87 95       	ror	r24
    19da:	0a 94       	dec	r0
    19dc:	e2 f7       	brpl	.-8      	; 0x19d6 <Shift+0x54>
    19de:	81 70       	andi	r24, 0x01	; 1
    19e0:	90 70       	andi	r25, 0x00	; 0
    19e2:	88 23       	and	r24, r24
    19e4:	31 f0       	breq	.+12     	; 0x19f2 <Shift+0x70>
		  DIO_SetPin_Value(port,data_pin,1);
    19e6:	8a 81       	ldd	r24, Y+2	; 0x02
    19e8:	6c 81       	ldd	r22, Y+4	; 0x04
    19ea:	41 e0       	ldi	r20, 0x01	; 1
    19ec:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    19f0:	05 c0       	rjmp	.+10     	; 0x19fc <Shift+0x7a>
		else
			DIO_SetPin_Value(port,data_pin,0);
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	6c 81       	ldd	r22, Y+4	; 0x04
    19f6:	40 e0       	ldi	r20, 0x00	; 0
    19f8:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
		//clock trigger
		DIO_SetPin_Value(port,clk_pin,0);
    19fc:	8a 81       	ldd	r24, Y+2	; 0x02
    19fe:	6d 81       	ldd	r22, Y+5	; 0x05
    1a00:	40 e0       	ldi	r20, 0x00	; 0
    1a02:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
		DIO_SetPin_Value(port,clk_pin,1);
    1a06:	8a 81       	ldd	r24, Y+2	; 0x02
    1a08:	6d 81       	ldd	r22, Y+5	; 0x05
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	//latch low
	DIO_SetPin_Value(port,latch_pin,0);
	//clock trigger
	DIO_SetPin_Value(port,clk_pin,0);
	DIO_SetPin_Value(port,clk_pin,1);
	for(u8 i =0;i<16;i++){
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	8f 5f       	subi	r24, 0xFF	; 255
    1a14:	89 83       	std	Y+1, r24	; 0x01
    1a16:	89 81       	ldd	r24, Y+1	; 0x01
    1a18:	80 31       	cpi	r24, 0x10	; 16
    1a1a:	b0 f2       	brcs	.-84     	; 0x19c8 <Shift+0x46>
		DIO_SetPin_Value(port,clk_pin,1);

	}

   //latch high
	DIO_SetPin_Value(port,latch_pin,1);
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	6b 81       	ldd	r22, Y+3	; 0x03
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>

}
    1a26:	27 96       	adiw	r28, 0x07	; 7
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	cf 91       	pop	r28
    1a34:	df 91       	pop	r29
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	08 95       	ret

00001a3c <Motor_PWM_8BIT>:
 *      Author: Mustapha
 */
#include "../../MCAL/Timer/TIMER_INTERFACE.h"
#include"../../UTILS/STD_TYPES.h"

void Motor_PWM_8BIT(u8 value){
    1a3c:	df 93       	push	r29
    1a3e:	cf 93       	push	r28
    1a40:	0f 92       	push	r0
    1a42:	cd b7       	in	r28, 0x3d	; 61
    1a44:	de b7       	in	r29, 0x3e	; 62
    1a46:	89 83       	std	Y+1, r24	; 0x01
    SET_OCR0(value);
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <SET_OCR0>

}
    1a4e:	0f 90       	pop	r0
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <Motor_MAXSPEED_8BIT>:
void Motor_MAXSPEED_8BIT(){
    1a56:	df 93       	push	r29
    1a58:	cf 93       	push	r28
    1a5a:	cd b7       	in	r28, 0x3d	; 61
    1a5c:	de b7       	in	r29, 0x3e	; 62
    SET_OCR0(255);
    1a5e:	8f ef       	ldi	r24, 0xFF	; 255
    1a60:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <SET_OCR0>
}
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <Motor_PWM_16BIT>:
void Motor_PWM_16BIT(u16 value){
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <Motor_PWM_16BIT+0x6>
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01
	SET_OCR1A(value);
    1a78:	89 81       	ldd	r24, Y+1	; 0x01
    1a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a7c:	0e 94 b8 08 	call	0x1170	; 0x1170 <SET_OCR1A>
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <Motor_MAXSPEED_16BIT>:
void Motor_MAXSPEED_16BIT(){
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	cd b7       	in	r28, 0x3d	; 61
    1a90:	de b7       	in	r29, 0x3e	; 62
	SET_OCR1A(65535);
    1a92:	8f ef       	ldi	r24, 0xFF	; 255
    1a94:	9f ef       	ldi	r25, 0xFF	; 255
    1a96:	0e 94 b8 08 	call	0x1170	; 0x1170 <SET_OCR1A>
}
    1a9a:	cf 91       	pop	r28
    1a9c:	df 91       	pop	r29
    1a9e:	08 95       	ret

00001aa0 <LCD8Bit_Send_Command>:
#include "../CLCD1602/CLCD_INTERFACE.h"

/**************/
/* 8-BIT MODE */
/**************/
void LCD8Bit_Send_Command(u8 command){
    1aa0:	df 93       	push	r29
    1aa2:	cf 93       	push	r28
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	6d 97       	sbiw	r28, 0x1d	; 29
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send COMMAND
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,LOW);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	60 e0       	ldi	r22, 0x00	; 0
    1aba:	40 e0       	ldi	r20, 0x00	; 0
    1abc:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,command);
    1ac0:	82 e0       	ldi	r24, 0x02	; 2
    1ac2:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac4:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	41 e0       	ldi	r20, 0x01	; 1
    1ace:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    1ad2:	80 e0       	ldi	r24, 0x00	; 0
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	a0 e0       	ldi	r26, 0x00	; 0
    1ad8:	b0 e4       	ldi	r27, 0x40	; 64
    1ada:	89 8f       	std	Y+25, r24	; 0x19
    1adc:	9a 8f       	std	Y+26, r25	; 0x1a
    1ade:	ab 8f       	std	Y+27, r26	; 0x1b
    1ae0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ae2:	69 8d       	ldd	r22, Y+25	; 0x19
    1ae4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ae6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ae8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	4a ef       	ldi	r20, 0xFA	; 250
    1af0:	54 e4       	ldi	r21, 0x44	; 68
    1af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
    1afc:	9e 8b       	std	Y+22, r25	; 0x16
    1afe:	af 8b       	std	Y+23, r26	; 0x17
    1b00:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b02:	6d 89       	ldd	r22, Y+21	; 0x15
    1b04:	7e 89       	ldd	r23, Y+22	; 0x16
    1b06:	8f 89       	ldd	r24, Y+23	; 0x17
    1b08:	98 8d       	ldd	r25, Y+24	; 0x18
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	30 e0       	ldi	r19, 0x00	; 0
    1b0e:	40 e8       	ldi	r20, 0x80	; 128
    1b10:	5f e3       	ldi	r21, 0x3F	; 63
    1b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b16:	88 23       	and	r24, r24
    1b18:	2c f4       	brge	.+10     	; 0x1b24 <LCD8Bit_Send_Command+0x84>
		__ticks = 1;
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9c 8b       	std	Y+20, r25	; 0x14
    1b20:	8b 8b       	std	Y+19, r24	; 0x13
    1b22:	3f c0       	rjmp	.+126    	; 0x1ba2 <LCD8Bit_Send_Command+0x102>
	else if (__tmp > 65535)
    1b24:	6d 89       	ldd	r22, Y+21	; 0x15
    1b26:	7e 89       	ldd	r23, Y+22	; 0x16
    1b28:	8f 89       	ldd	r24, Y+23	; 0x17
    1b2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1b2c:	20 e0       	ldi	r18, 0x00	; 0
    1b2e:	3f ef       	ldi	r19, 0xFF	; 255
    1b30:	4f e7       	ldi	r20, 0x7F	; 127
    1b32:	57 e4       	ldi	r21, 0x47	; 71
    1b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b38:	18 16       	cp	r1, r24
    1b3a:	4c f5       	brge	.+82     	; 0x1b8e <LCD8Bit_Send_Command+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b3c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b3e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b40:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b42:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b44:	20 e0       	ldi	r18, 0x00	; 0
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	40 e2       	ldi	r20, 0x20	; 32
    1b4a:	51 e4       	ldi	r21, 0x41	; 65
    1b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b50:	dc 01       	movw	r26, r24
    1b52:	cb 01       	movw	r24, r22
    1b54:	bc 01       	movw	r22, r24
    1b56:	cd 01       	movw	r24, r26
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9c 8b       	std	Y+20, r25	; 0x14
    1b62:	8b 8b       	std	Y+19, r24	; 0x13
    1b64:	0f c0       	rjmp	.+30     	; 0x1b84 <LCD8Bit_Send_Command+0xe4>
    1b66:	88 ec       	ldi	r24, 0xC8	; 200
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	9a 8b       	std	Y+18, r25	; 0x12
    1b6c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b6e:	89 89       	ldd	r24, Y+17	; 0x11
    1b70:	9a 89       	ldd	r25, Y+18	; 0x12
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD8Bit_Send_Command+0xd2>
    1b76:	9a 8b       	std	Y+18, r25	; 0x12
    1b78:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b7c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	9c 8b       	std	Y+20, r25	; 0x14
    1b82:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b84:	8b 89       	ldd	r24, Y+19	; 0x13
    1b86:	9c 89       	ldd	r25, Y+20	; 0x14
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	69 f7       	brne	.-38     	; 0x1b66 <LCD8Bit_Send_Command+0xc6>
    1b8c:	14 c0       	rjmp	.+40     	; 0x1bb6 <LCD8Bit_Send_Command+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b8e:	6d 89       	ldd	r22, Y+21	; 0x15
    1b90:	7e 89       	ldd	r23, Y+22	; 0x16
    1b92:	8f 89       	ldd	r24, Y+23	; 0x17
    1b94:	98 8d       	ldd	r25, Y+24	; 0x18
    1b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	9c 8b       	std	Y+20, r25	; 0x14
    1ba0:	8b 8b       	std	Y+19, r24	; 0x13
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ba6:	98 8b       	std	Y+16, r25	; 0x10
    1ba8:	8f 87       	std	Y+15, r24	; 0x0f
    1baa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bac:	98 89       	ldd	r25, Y+16	; 0x10
    1bae:	01 97       	sbiw	r24, 0x01	; 1
    1bb0:	f1 f7       	brne	.-4      	; 0x1bae <LCD8Bit_Send_Command+0x10e>
    1bb2:	98 8b       	std	Y+16, r25	; 0x10
    1bb4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	61 e0       	ldi	r22, 0x01	; 1
    1bba:	40 e0       	ldi	r20, 0x00	; 0
    1bbc:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    1bc0:	80 e0       	ldi	r24, 0x00	; 0
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a0 e0       	ldi	r26, 0x00	; 0
    1bc6:	b0 e4       	ldi	r27, 0x40	; 64
    1bc8:	8b 87       	std	Y+11, r24	; 0x0b
    1bca:	9c 87       	std	Y+12, r25	; 0x0c
    1bcc:	ad 87       	std	Y+13, r26	; 0x0d
    1bce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bd0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bd2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bd4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	4a ef       	ldi	r20, 0xFA	; 250
    1bde:	54 e4       	ldi	r21, 0x44	; 68
    1be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	8f 83       	std	Y+7, r24	; 0x07
    1bea:	98 87       	std	Y+8, r25	; 0x08
    1bec:	a9 87       	std	Y+9, r26	; 0x09
    1bee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e8       	ldi	r20, 0x80	; 128
    1bfe:	5f e3       	ldi	r21, 0x3F	; 63
    1c00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	2c f4       	brge	.+10     	; 0x1c12 <LCD8Bit_Send_Command+0x172>
		__ticks = 1;
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	9e 83       	std	Y+6, r25	; 0x06
    1c0e:	8d 83       	std	Y+5, r24	; 0x05
    1c10:	3f c0       	rjmp	.+126    	; 0x1c90 <LCD8Bit_Send_Command+0x1f0>
	else if (__tmp > 65535)
    1c12:	6f 81       	ldd	r22, Y+7	; 0x07
    1c14:	78 85       	ldd	r23, Y+8	; 0x08
    1c16:	89 85       	ldd	r24, Y+9	; 0x09
    1c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	4c f5       	brge	.+82     	; 0x1c7c <LCD8Bit_Send_Command+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c30:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c32:	20 e0       	ldi	r18, 0x00	; 0
    1c34:	30 e0       	ldi	r19, 0x00	; 0
    1c36:	40 e2       	ldi	r20, 0x20	; 32
    1c38:	51 e4       	ldi	r21, 0x41	; 65
    1c3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c3e:	dc 01       	movw	r26, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	bc 01       	movw	r22, r24
    1c44:	cd 01       	movw	r24, r26
    1c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4a:	dc 01       	movw	r26, r24
    1c4c:	cb 01       	movw	r24, r22
    1c4e:	9e 83       	std	Y+6, r25	; 0x06
    1c50:	8d 83       	std	Y+5, r24	; 0x05
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <LCD8Bit_Send_Command+0x1d2>
    1c54:	88 ec       	ldi	r24, 0xC8	; 200
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	9c 83       	std	Y+4, r25	; 0x04
    1c5a:	8b 83       	std	Y+3, r24	; 0x03
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c60:	01 97       	sbiw	r24, 0x01	; 1
    1c62:	f1 f7       	brne	.-4      	; 0x1c60 <LCD8Bit_Send_Command+0x1c0>
    1c64:	9c 83       	std	Y+4, r25	; 0x04
    1c66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c68:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	69 f7       	brne	.-38     	; 0x1c54 <LCD8Bit_Send_Command+0x1b4>
    1c7a:	14 c0       	rjmp	.+40     	; 0x1ca4 <LCD8Bit_Send_Command+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c7e:	78 85       	ldd	r23, Y+8	; 0x08
    1c80:	89 85       	ldd	r24, Y+9	; 0x09
    1c82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	9e 83       	std	Y+6, r25	; 0x06
    1c8e:	8d 83       	std	Y+5, r24	; 0x05
    1c90:	8d 81       	ldd	r24, Y+5	; 0x05
    1c92:	9e 81       	ldd	r25, Y+6	; 0x06
    1c94:	9a 83       	std	Y+2, r25	; 0x02
    1c96:	89 83       	std	Y+1, r24	; 0x01
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	01 97       	sbiw	r24, 0x01	; 1
    1c9e:	f1 f7       	brne	.-4      	; 0x1c9c <LCD8Bit_Send_Command+0x1fc>
    1ca0:	9a 83       	std	Y+2, r25	; 0x02
    1ca2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);

}
    1ca4:	6d 96       	adiw	r28, 0x1d	; 29
    1ca6:	0f b6       	in	r0, 0x3f	; 63
    1ca8:	f8 94       	cli
    1caa:	de bf       	out	0x3e, r29	; 62
    1cac:	0f be       	out	0x3f, r0	; 63
    1cae:	cd bf       	out	0x3d, r28	; 61
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <LCD8Bit_Send_Data>:

void LCD8Bit_Send_Data(u8 data){
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	6d 97       	sbiw	r28, 0x1d	; 29
    1cc0:	0f b6       	in	r0, 0x3f	; 63
    1cc2:	f8 94       	cli
    1cc4:	de bf       	out	0x3e, r29	; 62
    1cc6:	0f be       	out	0x3f, r0	; 63
    1cc8:	cd bf       	out	0x3d, r28	; 61
    1cca:	8d 8f       	std	Y+29, r24	; 0x1d
	//RW is 0 to Write
    // DIO_SetPin_Value(LCD_Command_Port,LCD_RW_Pin,LOW);
	//RS is 0 to Send DATA
     DIO_SetPin_Value(LCD_Command_Port,LCD_RS_Pin,HIGH);
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	//Send Command
    DIO_SetPort_Value(LCD_Data_Port,data);
    1cd6:	82 e0       	ldi	r24, 0x02	; 2
    1cd8:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1cda:	0e 94 45 0b 	call	0x168a	; 0x168a <DIO_SetPort_Value>
	//Enable
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,HIGH);
    1cde:	80 e0       	ldi	r24, 0x00	; 0
    1ce0:	61 e0       	ldi	r22, 0x01	; 1
    1ce2:	41 e0       	ldi	r20, 0x01	; 1
    1ce4:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    1ce8:	80 e0       	ldi	r24, 0x00	; 0
    1cea:	90 e0       	ldi	r25, 0x00	; 0
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e4       	ldi	r27, 0x40	; 64
    1cf0:	89 8f       	std	Y+25, r24	; 0x19
    1cf2:	9a 8f       	std	Y+26, r25	; 0x1a
    1cf4:	ab 8f       	std	Y+27, r26	; 0x1b
    1cf6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf8:	69 8d       	ldd	r22, Y+25	; 0x19
    1cfa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cfc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cfe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d00:	20 e0       	ldi	r18, 0x00	; 0
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	4a ef       	ldi	r20, 0xFA	; 250
    1d06:	54 e4       	ldi	r21, 0x44	; 68
    1d08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	8d 8b       	std	Y+21, r24	; 0x15
    1d12:	9e 8b       	std	Y+22, r25	; 0x16
    1d14:	af 8b       	std	Y+23, r26	; 0x17
    1d16:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d18:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1d20:	20 e0       	ldi	r18, 0x00	; 0
    1d22:	30 e0       	ldi	r19, 0x00	; 0
    1d24:	40 e8       	ldi	r20, 0x80	; 128
    1d26:	5f e3       	ldi	r21, 0x3F	; 63
    1d28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2c:	88 23       	and	r24, r24
    1d2e:	2c f4       	brge	.+10     	; 0x1d3a <LCD8Bit_Send_Data+0x84>
		__ticks = 1;
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	9c 8b       	std	Y+20, r25	; 0x14
    1d36:	8b 8b       	std	Y+19, r24	; 0x13
    1d38:	3f c0       	rjmp	.+126    	; 0x1db8 <LCD8Bit_Send_Data+0x102>
	else if (__tmp > 65535)
    1d3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d40:	98 8d       	ldd	r25, Y+24	; 0x18
    1d42:	20 e0       	ldi	r18, 0x00	; 0
    1d44:	3f ef       	ldi	r19, 0xFF	; 255
    1d46:	4f e7       	ldi	r20, 0x7F	; 127
    1d48:	57 e4       	ldi	r21, 0x47	; 71
    1d4a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d4e:	18 16       	cp	r1, r24
    1d50:	4c f5       	brge	.+82     	; 0x1da4 <LCD8Bit_Send_Data+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e2       	ldi	r20, 0x20	; 32
    1d60:	51 e4       	ldi	r21, 0x41	; 65
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	bc 01       	movw	r22, r24
    1d6c:	cd 01       	movw	r24, r26
    1d6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d72:	dc 01       	movw	r26, r24
    1d74:	cb 01       	movw	r24, r22
    1d76:	9c 8b       	std	Y+20, r25	; 0x14
    1d78:	8b 8b       	std	Y+19, r24	; 0x13
    1d7a:	0f c0       	rjmp	.+30     	; 0x1d9a <LCD8Bit_Send_Data+0xe4>
    1d7c:	88 ec       	ldi	r24, 0xC8	; 200
    1d7e:	90 e0       	ldi	r25, 0x00	; 0
    1d80:	9a 8b       	std	Y+18, r25	; 0x12
    1d82:	89 8b       	std	Y+17, r24	; 0x11
    1d84:	89 89       	ldd	r24, Y+17	; 0x11
    1d86:	9a 89       	ldd	r25, Y+18	; 0x12
    1d88:	01 97       	sbiw	r24, 0x01	; 1
    1d8a:	f1 f7       	brne	.-4      	; 0x1d88 <LCD8Bit_Send_Data+0xd2>
    1d8c:	9a 8b       	std	Y+18, r25	; 0x12
    1d8e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d90:	8b 89       	ldd	r24, Y+19	; 0x13
    1d92:	9c 89       	ldd	r25, Y+20	; 0x14
    1d94:	01 97       	sbiw	r24, 0x01	; 1
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	00 97       	sbiw	r24, 0x00	; 0
    1da0:	69 f7       	brne	.-38     	; 0x1d7c <LCD8Bit_Send_Data+0xc6>
    1da2:	14 c0       	rjmp	.+40     	; 0x1dcc <LCD8Bit_Send_Data+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1da4:	6d 89       	ldd	r22, Y+21	; 0x15
    1da6:	7e 89       	ldd	r23, Y+22	; 0x16
    1da8:	8f 89       	ldd	r24, Y+23	; 0x17
    1daa:	98 8d       	ldd	r25, Y+24	; 0x18
    1dac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db0:	dc 01       	movw	r26, r24
    1db2:	cb 01       	movw	r24, r22
    1db4:	9c 8b       	std	Y+20, r25	; 0x14
    1db6:	8b 8b       	std	Y+19, r24	; 0x13
    1db8:	8b 89       	ldd	r24, Y+19	; 0x13
    1dba:	9c 89       	ldd	r25, Y+20	; 0x14
    1dbc:	98 8b       	std	Y+16, r25	; 0x10
    1dbe:	8f 87       	std	Y+15, r24	; 0x0f
    1dc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dc2:	98 89       	ldd	r25, Y+16	; 0x10
    1dc4:	01 97       	sbiw	r24, 0x01	; 1
    1dc6:	f1 f7       	brne	.-4      	; 0x1dc4 <LCD8Bit_Send_Data+0x10e>
    1dc8:	98 8b       	std	Y+16, r25	; 0x10
    1dca:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(2);
    DIO_SetPin_Value(LCD_Command_Port,LCD_ENA_Pin,LOW);
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	61 e0       	ldi	r22, 0x01	; 1
    1dd0:	40 e0       	ldi	r20, 0x00	; 0
    1dd2:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e4       	ldi	r27, 0x40	; 64
    1dde:	8b 87       	std	Y+11, r24	; 0x0b
    1de0:	9c 87       	std	Y+12, r25	; 0x0c
    1de2:	ad 87       	std	Y+13, r26	; 0x0d
    1de4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1de8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dee:	20 e0       	ldi	r18, 0x00	; 0
    1df0:	30 e0       	ldi	r19, 0x00	; 0
    1df2:	4a ef       	ldi	r20, 0xFA	; 250
    1df4:	54 e4       	ldi	r21, 0x44	; 68
    1df6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	8f 83       	std	Y+7, r24	; 0x07
    1e00:	98 87       	std	Y+8, r25	; 0x08
    1e02:	a9 87       	std	Y+9, r26	; 0x09
    1e04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e06:	6f 81       	ldd	r22, Y+7	; 0x07
    1e08:	78 85       	ldd	r23, Y+8	; 0x08
    1e0a:	89 85       	ldd	r24, Y+9	; 0x09
    1e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	30 e0       	ldi	r19, 0x00	; 0
    1e12:	40 e8       	ldi	r20, 0x80	; 128
    1e14:	5f e3       	ldi	r21, 0x3F	; 63
    1e16:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e1a:	88 23       	and	r24, r24
    1e1c:	2c f4       	brge	.+10     	; 0x1e28 <LCD8Bit_Send_Data+0x172>
		__ticks = 1;
    1e1e:	81 e0       	ldi	r24, 0x01	; 1
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9e 83       	std	Y+6, r25	; 0x06
    1e24:	8d 83       	std	Y+5, r24	; 0x05
    1e26:	3f c0       	rjmp	.+126    	; 0x1ea6 <LCD8Bit_Send_Data+0x1f0>
	else if (__tmp > 65535)
    1e28:	6f 81       	ldd	r22, Y+7	; 0x07
    1e2a:	78 85       	ldd	r23, Y+8	; 0x08
    1e2c:	89 85       	ldd	r24, Y+9	; 0x09
    1e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	3f ef       	ldi	r19, 0xFF	; 255
    1e34:	4f e7       	ldi	r20, 0x7F	; 127
    1e36:	57 e4       	ldi	r21, 0x47	; 71
    1e38:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e3c:	18 16       	cp	r1, r24
    1e3e:	4c f5       	brge	.+82     	; 0x1e92 <LCD8Bit_Send_Data+0x1dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	40 e2       	ldi	r20, 0x20	; 32
    1e4e:	51 e4       	ldi	r21, 0x41	; 65
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	bc 01       	movw	r22, r24
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	9e 83       	std	Y+6, r25	; 0x06
    1e66:	8d 83       	std	Y+5, r24	; 0x05
    1e68:	0f c0       	rjmp	.+30     	; 0x1e88 <LCD8Bit_Send_Data+0x1d2>
    1e6a:	88 ec       	ldi	r24, 0xC8	; 200
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	9c 83       	std	Y+4, r25	; 0x04
    1e70:	8b 83       	std	Y+3, r24	; 0x03
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	9c 81       	ldd	r25, Y+4	; 0x04
    1e76:	01 97       	sbiw	r24, 0x01	; 1
    1e78:	f1 f7       	brne	.-4      	; 0x1e76 <LCD8Bit_Send_Data+0x1c0>
    1e7a:	9c 83       	std	Y+4, r25	; 0x04
    1e7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	01 97       	sbiw	r24, 0x01	; 1
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e88:	8d 81       	ldd	r24, Y+5	; 0x05
    1e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e8c:	00 97       	sbiw	r24, 0x00	; 0
    1e8e:	69 f7       	brne	.-38     	; 0x1e6a <LCD8Bit_Send_Data+0x1b4>
    1e90:	14 c0       	rjmp	.+40     	; 0x1eba <LCD8Bit_Send_Data+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e92:	6f 81       	ldd	r22, Y+7	; 0x07
    1e94:	78 85       	ldd	r23, Y+8	; 0x08
    1e96:	89 85       	ldd	r24, Y+9	; 0x09
    1e98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ea8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eaa:	9a 83       	std	Y+2, r25	; 0x02
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <LCD8Bit_Send_Data+0x1fc>
    1eb6:	9a 83       	std	Y+2, r25	; 0x02
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(2);


}
    1eba:	6d 96       	adiw	r28, 0x1d	; 29
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	de bf       	out	0x3e, r29	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	cd bf       	out	0x3d, r28	; 61
    1ec6:	cf 91       	pop	r28
    1ec8:	df 91       	pop	r29
    1eca:	08 95       	ret

00001ecc <LCD8Bit_init>:
void LCD8Bit_init(){
    1ecc:	df 93       	push	r29
    1ece:	cf 93       	push	r28
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	2e 97       	sbiw	r28, 0x0e	; 14
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	90 e0       	ldi	r25, 0x00	; 0
    1ee4:	a0 e2       	ldi	r26, 0x20	; 32
    1ee6:	b2 e4       	ldi	r27, 0x42	; 66
    1ee8:	8b 87       	std	Y+11, r24	; 0x0b
    1eea:	9c 87       	std	Y+12, r25	; 0x0c
    1eec:	ad 87       	std	Y+13, r26	; 0x0d
    1eee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ef2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ef4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ef6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	8f 83       	std	Y+7, r24	; 0x07
    1f0a:	98 87       	std	Y+8, r25	; 0x08
    1f0c:	a9 87       	std	Y+9, r26	; 0x09
    1f0e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f10:	6f 81       	ldd	r22, Y+7	; 0x07
    1f12:	78 85       	ldd	r23, Y+8	; 0x08
    1f14:	89 85       	ldd	r24, Y+9	; 0x09
    1f16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <LCD8Bit_init+0x66>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9e 83       	std	Y+6, r25	; 0x06
    1f2e:	8d 83       	std	Y+5, r24	; 0x05
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <LCD8Bit_init+0xe4>
	else if (__tmp > 65535)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <LCD8Bit_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9e 83       	std	Y+6, r25	; 0x06
    1f70:	8d 83       	std	Y+5, r24	; 0x05
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <LCD8Bit_init+0xc6>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9c 83       	std	Y+4, r25	; 0x04
    1f7a:	8b 83       	std	Y+3, r24	; 0x03
    1f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD8Bit_init+0xb4>
    1f84:	9c 83       	std	Y+4, r25	; 0x04
    1f86:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9e 83       	std	Y+6, r25	; 0x06
    1f90:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8d 81       	ldd	r24, Y+5	; 0x05
    1f94:	9e 81       	ldd	r25, Y+6	; 0x06
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <LCD8Bit_init+0xa8>
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <LCD8Bit_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f9e:	78 85       	ldd	r23, Y+8	; 0x08
    1fa0:	89 85       	ldd	r24, Y+9	; 0x09
    1fa2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9e 83       	std	Y+6, r25	; 0x06
    1fae:	8d 83       	std	Y+5, r24	; 0x05
    1fb0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <LCD8Bit_init+0xf0>
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
    //Wait more than 30 ms
	_delay_ms(40);
	//Function Set
	LCD8Bit_Send_Command(FUNC_SET);
    1fc4:	88 e3       	ldi	r24, 0x38	; 56
    1fc6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	//ON OFF Control
	LCD8Bit_Send_Command(ON_OFF);
    1fca:	8c e0       	ldi	r24, 0x0C	; 12
    1fcc:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	//Clear
	LCD8Bit_Send_Command(LCD8Bit_CLEAR);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
}
    1fd6:	2e 96       	adiw	r28, 0x0e	; 14
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	cf 91       	pop	r28
    1fe4:	df 91       	pop	r29
    1fe6:	08 95       	ret

00001fe8 <LCD_Send_String>:


/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
    1fe8:	df 93       	push	r29
    1fea:	cf 93       	push	r28
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <LCD_Send_String+0x6>
    1fee:	0f 92       	push	r0
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
    1ff4:	9b 83       	std	Y+3, r25	; 0x03
    1ff6:	8a 83       	std	Y+2, r24	; 0x02
	u8 cnt = 0;
    1ff8:	19 82       	std	Y+1, r1	; 0x01
    1ffa:	0e c0       	rjmp	.+28     	; 0x2018 <LCD_Send_String+0x30>
	while(word[cnt] != '\0'){
		LCD8Bit_Send_Data(word[cnt]);
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	9b 81       	ldd	r25, Y+3	; 0x03
    2006:	fc 01       	movw	r30, r24
    2008:	e2 0f       	add	r30, r18
    200a:	f3 1f       	adc	r31, r19
    200c:	80 81       	ld	r24, Z
    200e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
		cnt++;
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	8f 5f       	subi	r24, 0xFF	; 255
    2016:	89 83       	std	Y+1, r24	; 0x01
/***************/
/*LCD FUNCTIONS*/
/***************/
void LCD_Send_String(const char* word){
	u8 cnt = 0;
	while(word[cnt] != '\0'){
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	fc 01       	movw	r30, r24
    2024:	e2 0f       	add	r30, r18
    2026:	f3 1f       	adc	r31, r19
    2028:	80 81       	ld	r24, Z
    202a:	88 23       	and	r24, r24
    202c:	39 f7       	brne	.-50     	; 0x1ffc <LCD_Send_String+0x14>
		LCD8Bit_Send_Data(word[cnt]);
		cnt++;
	}
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	cf 91       	pop	r28
    2036:	df 91       	pop	r29
    2038:	08 95       	ret

0000203a <LCD_Send_Int>:

void LCD_Send_Int(u32 num){
    203a:	df 93       	push	r29
    203c:	cf 93       	push	r28
    203e:	cd b7       	in	r28, 0x3d	; 61
    2040:	de b7       	in	r29, 0x3e	; 62
    2042:	2c 97       	sbiw	r28, 0x0c	; 12
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	9c 87       	std	Y+12, r25	; 0x0c
    2050:	8b 87       	std	Y+11, r24	; 0x0b
	char arr[10];
	itoa(num,arr,10);
    2052:	8b 85       	ldd	r24, Y+11	; 0x0b
    2054:	9c 85       	ldd	r25, Y+12	; 0x0c
    2056:	9e 01       	movw	r18, r28
    2058:	2f 5f       	subi	r18, 0xFF	; 255
    205a:	3f 4f       	sbci	r19, 0xFF	; 255
    205c:	b9 01       	movw	r22, r18
    205e:	4a e0       	ldi	r20, 0x0A	; 10
    2060:	50 e0       	ldi	r21, 0x00	; 0
    2062:	0e 94 ea 26 	call	0x4dd4	; 0x4dd4 <itoa>
	LCD_Send_String(arr);
    2066:	ce 01       	movw	r24, r28
    2068:	01 96       	adiw	r24, 0x01	; 1
    206a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>

}
    206e:	2c 96       	adiw	r28, 0x0c	; 12
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	cf 91       	pop	r28
    207c:	df 91       	pop	r29
    207e:	08 95       	ret

00002080 <LCD_GOTOXY>:


void LCD_GOTOXY(u8 x, u8 y){
    2080:	df 93       	push	r29
    2082:	cf 93       	push	r28
    2084:	00 d0       	rcall	.+0      	; 0x2086 <LCD_GOTOXY+0x6>
    2086:	0f 92       	push	r0
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	8a 83       	std	Y+2, r24	; 0x02
    208e:	6b 83       	std	Y+3, r22	; 0x03
	u8 DDRAM_ADDRESS = 0;
    2090:	19 82       	std	Y+1, r1	; 0x01
	if(y == 0){
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	88 23       	and	r24, r24
    2096:	11 f4       	brne	.+4      	; 0x209c <LCD_GOTOXY+0x1c>
		DDRAM_ADDRESS = x;
    2098:	8a 81       	ldd	r24, Y+2	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	}
	if(y == 1){
    209c:	8b 81       	ldd	r24, Y+3	; 0x03
    209e:	81 30       	cpi	r24, 0x01	; 1
    20a0:	19 f4       	brne	.+6      	; 0x20a8 <LCD_GOTOXY+0x28>
	    DDRAM_ADDRESS = x + 0x40;
    20a2:	8a 81       	ldd	r24, Y+2	; 0x02
    20a4:	80 5c       	subi	r24, 0xC0	; 192
    20a6:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD8Bit_Send_Command(DDRAM_ADDRESS + 128);
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	80 58       	subi	r24, 0x80	; 128
    20ac:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
}
    20b0:	0f 90       	pop	r0
    20b2:	0f 90       	pop	r0
    20b4:	0f 90       	pop	r0
    20b6:	cf 91       	pop	r28
    20b8:	df 91       	pop	r29
    20ba:	08 95       	ret

000020bc <LCD_Save_Character>:

void LCD_Save_Character(u8* arr,u8 BlockNumber){
    20bc:	df 93       	push	r29
    20be:	cf 93       	push	r28
    20c0:	00 d0       	rcall	.+0      	; 0x20c2 <LCD_Save_Character+0x6>
    20c2:	00 d0       	rcall	.+0      	; 0x20c4 <LCD_Save_Character+0x8>
    20c4:	0f 92       	push	r0
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	6d 83       	std	Y+5, r22	; 0x05
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    20d0:	1a 82       	std	Y+2, r1	; 0x02
	CGRAM = BlockNumber * 8;
    20d2:	8d 81       	ldd	r24, Y+5	; 0x05
    20d4:	88 2f       	mov	r24, r24
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	88 0f       	add	r24, r24
    20da:	99 1f       	adc	r25, r25
    20dc:	88 0f       	add	r24, r24
    20de:	99 1f       	adc	r25, r25
    20e0:	88 0f       	add	r24, r24
    20e2:	99 1f       	adc	r25, r25
    20e4:	8a 83       	std	Y+2, r24	; 0x02
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    20e6:	8a 81       	ldd	r24, Y+2	; 0x02
    20e8:	80 5c       	subi	r24, 0xC0	; 192
    20ea:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	for(u8 i = 0 ;i<8;i++){
    20ee:	19 82       	std	Y+1, r1	; 0x01
    20f0:	0e c0       	rjmp	.+28     	; 0x210e <LCD_Save_Character+0x52>
		LCD8Bit_Send_Data(arr[i]);
    20f2:	89 81       	ldd	r24, Y+1	; 0x01
    20f4:	28 2f       	mov	r18, r24
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	8b 81       	ldd	r24, Y+3	; 0x03
    20fa:	9c 81       	ldd	r25, Y+4	; 0x04
    20fc:	fc 01       	movw	r30, r24
    20fe:	e2 0f       	add	r30, r18
    2100:	f3 1f       	adc	r31, r19
    2102:	80 81       	ld	r24, Z
    2104:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
	CGRAM = BlockNumber * 8;
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
	for(u8 i = 0 ;i<8;i++){
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	8f 5f       	subi	r24, 0xFF	; 255
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	89 81       	ldd	r24, Y+1	; 0x01
    2110:	88 30       	cpi	r24, 0x08	; 8
    2112:	78 f3       	brcs	.-34     	; 0x20f2 <LCD_Save_Character+0x36>
		LCD8Bit_Send_Data(arr[i]);
	}

}
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	0f 90       	pop	r0
    211a:	0f 90       	pop	r0
    211c:	0f 90       	pop	r0
    211e:	cf 91       	pop	r28
    2120:	df 91       	pop	r29
    2122:	08 95       	ret

00002124 <LCD_Display_Character>:


void LCD_Display_Character(u8 BlockNumber ,u8 x ,u8 y){
    2124:	df 93       	push	r29
    2126:	cf 93       	push	r28
    2128:	00 d0       	rcall	.+0      	; 0x212a <LCD_Display_Character+0x6>
    212a:	00 d0       	rcall	.+0      	; 0x212c <LCD_Display_Character+0x8>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	8a 83       	std	Y+2, r24	; 0x02
    2132:	6b 83       	std	Y+3, r22	; 0x03
    2134:	4c 83       	std	Y+4, r20	; 0x04
	//Calculate CGRAM ADDRESS
	u8 CGRAM = 0;
    2136:	19 82       	std	Y+1, r1	; 0x01
	CGRAM = BlockNumber * 8;
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	88 2f       	mov	r24, r24
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	88 0f       	add	r24, r24
    2140:	99 1f       	adc	r25, r25
    2142:	88 0f       	add	r24, r24
    2144:	99 1f       	adc	r25, r25
    2146:	88 0f       	add	r24, r24
    2148:	99 1f       	adc	r25, r25
    214a:	89 83       	std	Y+1, r24	; 0x01
	//Write the Character in CGRAM
	LCD8Bit_Send_Command(CGRAM + 64);
    214c:	89 81       	ldd	r24, Y+1	; 0x01
    214e:	80 5c       	subi	r24, 0xC0	; 192
    2150:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	//Goto to print position
	LCD_GOTOXY(x,y);
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	6c 81       	ldd	r22, Y+4	; 0x04
    2158:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
	//Write the character on the DDRAM (LCD)
	LCD8Bit_Send_Data(BlockNumber);
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
    }
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <BuzzerON>:
#include <avr/delay.h>

#include "../../Config.h"


void BuzzerON(){
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
  DIO_SetPin_Value(BuzzerPort,BuzzerPin,HIGH);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	64 e0       	ldi	r22, 0x04	; 4
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
}
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <BuzzerOFF>:
void BuzzerOFF(){
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	  DIO_SetPin_Value(BuzzerPort,BuzzerPin,LOW);
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	64 e0       	ldi	r22, 0x04	; 4
    2194:	40 e0       	ldi	r20, 0x00	; 0
    2196:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>

}
    219a:	cf 91       	pop	r28
    219c:	df 91       	pop	r29
    219e:	08 95       	ret

000021a0 <BuzzerTOGGLE>:
void BuzzerTOGGLE(u32 ontime){
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	60 97       	sbiw	r28, 0x10	; 16
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	98 8b       	std	Y+16, r25	; 0x10
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
	BuzzerON();
    21b8:	0e 94 b8 10 	call	0x2170	; 0x2170 <BuzzerON>
    _delay_ms(ontime);
    21bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    21be:	98 89       	ldd	r25, Y+16	; 0x10
    21c0:	cc 01       	movw	r24, r24
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	b0 e0       	ldi	r27, 0x00	; 0
    21c6:	bc 01       	movw	r22, r24
    21c8:	cd 01       	movw	r24, r26
    21ca:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__floatunsisf>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	8b 87       	std	Y+11, r24	; 0x0b
    21d4:	9c 87       	std	Y+12, r25	; 0x0c
    21d6:	ad 87       	std	Y+13, r26	; 0x0d
    21d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21da:	6b 85       	ldd	r22, Y+11	; 0x0b
    21dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    21de:	8d 85       	ldd	r24, Y+13	; 0x0d
    21e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	4a ef       	ldi	r20, 0xFA	; 250
    21e8:	54 e4       	ldi	r21, 0x44	; 68
    21ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ee:	dc 01       	movw	r26, r24
    21f0:	cb 01       	movw	r24, r22
    21f2:	8f 83       	std	Y+7, r24	; 0x07
    21f4:	98 87       	std	Y+8, r25	; 0x08
    21f6:	a9 87       	std	Y+9, r26	; 0x09
    21f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21fa:	6f 81       	ldd	r22, Y+7	; 0x07
    21fc:	78 85       	ldd	r23, Y+8	; 0x08
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	40 e8       	ldi	r20, 0x80	; 128
    2208:	5f e3       	ldi	r21, 0x3F	; 63
    220a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    220e:	88 23       	and	r24, r24
    2210:	2c f4       	brge	.+10     	; 0x221c <BuzzerTOGGLE+0x7c>
		__ticks = 1;
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	9e 83       	std	Y+6, r25	; 0x06
    2218:	8d 83       	std	Y+5, r24	; 0x05
    221a:	3f c0       	rjmp	.+126    	; 0x229a <BuzzerTOGGLE+0xfa>
	else if (__tmp > 65535)
    221c:	6f 81       	ldd	r22, Y+7	; 0x07
    221e:	78 85       	ldd	r23, Y+8	; 0x08
    2220:	89 85       	ldd	r24, Y+9	; 0x09
    2222:	9a 85       	ldd	r25, Y+10	; 0x0a
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	3f ef       	ldi	r19, 0xFF	; 255
    2228:	4f e7       	ldi	r20, 0x7F	; 127
    222a:	57 e4       	ldi	r21, 0x47	; 71
    222c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2230:	18 16       	cp	r1, r24
    2232:	4c f5       	brge	.+82     	; 0x2286 <BuzzerTOGGLE+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2234:	6b 85       	ldd	r22, Y+11	; 0x0b
    2236:	7c 85       	ldd	r23, Y+12	; 0x0c
    2238:	8d 85       	ldd	r24, Y+13	; 0x0d
    223a:	9e 85       	ldd	r25, Y+14	; 0x0e
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e2       	ldi	r20, 0x20	; 32
    2242:	51 e4       	ldi	r21, 0x41	; 65
    2244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2248:	dc 01       	movw	r26, r24
    224a:	cb 01       	movw	r24, r22
    224c:	bc 01       	movw	r22, r24
    224e:	cd 01       	movw	r24, r26
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	0f c0       	rjmp	.+30     	; 0x227c <BuzzerTOGGLE+0xdc>
    225e:	88 ec       	ldi	r24, 0xC8	; 200
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	8b 83       	std	Y+3, r24	; 0x03
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <BuzzerTOGGLE+0xca>
    226e:	9c 83       	std	Y+4, r25	; 0x04
    2270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2272:	8d 81       	ldd	r24, Y+5	; 0x05
    2274:	9e 81       	ldd	r25, Y+6	; 0x06
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	69 f7       	brne	.-38     	; 0x225e <BuzzerTOGGLE+0xbe>
    2284:	14 c0       	rjmp	.+40     	; 0x22ae <BuzzerTOGGLE+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2286:	6f 81       	ldd	r22, Y+7	; 0x07
    2288:	78 85       	ldd	r23, Y+8	; 0x08
    228a:	89 85       	ldd	r24, Y+9	; 0x09
    228c:	9a 85       	ldd	r25, Y+10	; 0x0a
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	9e 83       	std	Y+6, r25	; 0x06
    2298:	8d 83       	std	Y+5, r24	; 0x05
    229a:	8d 81       	ldd	r24, Y+5	; 0x05
    229c:	9e 81       	ldd	r25, Y+6	; 0x06
    229e:	9a 83       	std	Y+2, r25	; 0x02
    22a0:	89 83       	std	Y+1, r24	; 0x01
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	9a 81       	ldd	r25, Y+2	; 0x02
    22a6:	01 97       	sbiw	r24, 0x01	; 1
    22a8:	f1 f7       	brne	.-4      	; 0x22a6 <BuzzerTOGGLE+0x106>
    22aa:	9a 83       	std	Y+2, r25	; 0x02
    22ac:	89 83       	std	Y+1, r24	; 0x01
	BuzzerOFF();
    22ae:	0e 94 c4 10 	call	0x2188	; 0x2188 <BuzzerOFF>
}
    22b2:	60 96       	adiw	r28, 0x10	; 16
    22b4:	0f b6       	in	r0, 0x3f	; 63
    22b6:	f8 94       	cli
    22b8:	de bf       	out	0x3e, r29	; 62
    22ba:	0f be       	out	0x3f, r0	; 63
    22bc:	cd bf       	out	0x3d, r28	; 61
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <main>:
static char password_input[5],username_input[5],command[5], ca,flag = 1,
usernum = 99, passnum = 99 ;
u16 lm35_reading = 0,potentiometer_reading = 0,
		photoresistor_reading = 0,infrared_reading = 0;
void BluetoothRead(char *array);
int main() {
    22c4:	0f 93       	push	r16
    22c6:	1f 93       	push	r17
    22c8:	df 93       	push	r29
    22ca:	cf 93       	push	r28
    22cc:	cd b7       	in	r28, 0x3d	; 61
    22ce:	de b7       	in	r29, 0x3e	; 62
    22d0:	c8 55       	subi	r28, 0x58	; 88
    22d2:	d1 40       	sbci	r29, 0x01	; 1
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	f8 94       	cli
    22d8:	de bf       	out	0x3e, r29	; 62
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	cd bf       	out	0x3d, r28	; 61

	/*Pin Directions*/
	DDRA = 0b00000011;
    22de:	ea e3       	ldi	r30, 0x3A	; 58
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	80 83       	st	Z, r24
	DDRB = 0b11111111;
    22e6:	e7 e3       	ldi	r30, 0x37	; 55
    22e8:	f0 e0       	ldi	r31, 0x00	; 0
    22ea:	8f ef       	ldi	r24, 0xFF	; 255
    22ec:	80 83       	st	Z, r24
	DDRC = 0b11111111;
    22ee:	e4 e3       	ldi	r30, 0x34	; 52
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	8f ef       	ldi	r24, 0xFF	; 255
    22f4:	80 83       	st	Z, r24
	DDRD = 0b11110010;
    22f6:	e1 e3       	ldi	r30, 0x31	; 49
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	82 ef       	ldi	r24, 0xF2	; 242
    22fc:	80 83       	st	Z, r24
	//Pulling-up emergency bottoms
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN , OUTPUT);
    22fe:	83 e0       	ldi	r24, 0x03	; 3
    2300:	62 e0       	ldi	r22, 0x02	; 2
    2302:	41 e0       	ldi	r20, 0x01	; 1
    2304:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	DIO_SetPin_Value(EmergencyBottomPORT,EmergencyBottomPIN_STOP , OUTPUT);
    2308:	83 e0       	ldi	r24, 0x03	; 3
    230a:	63 e0       	ldi	r22, 0x03	; 3
    230c:	41 e0       	ldi	r20, 0x01	; 1
    230e:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>


	//Peripherals initialization
	Globle_Intrrupt_Enable();
    2312:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <Globle_Intrrupt_Enable>
	INT0_init();
    2316:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <INT0_init>
	INT1_init();
    231a:	0e 94 14 09 	call	0x1228	; 0x1228 <INT1_init>
	LCD8Bit_init();
    231e:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <LCD8Bit_init>
	UART_init();
    2322:	0e 94 c9 06 	call	0xd92	; 0xd92 <UART_init>
	ADC_init();
    2326:	0e 94 41 0c 	call	0x1882	; 0x1882 <ADC_init>
    Timer0_init();
    232a:	0e 94 b2 07 	call	0xf64	; 0xf64 <Timer0_init>
    Timer1_init();
    232e:	0e 94 ea 07 	call	0xfd4	; 0xfd4 <Timer1_init>
    Timer2_init();
    2332:	0e 94 36 08 	call	0x106c	; 0x106c <Timer2_init>


	/***********************************************************/
	/******************   Enter the system   *******************/
	/***********************************************************/
    ServoAngle(closeangle);
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <ServoAngle>

	//Entering the username (username phase)
	for(u8 j=1;j<4;j++){
    233e:	fe 01       	movw	r30, r28
    2340:	e8 5a       	subi	r30, 0xA8	; 168
    2342:	fe 4f       	sbci	r31, 0xFE	; 254
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 83       	st	Z, r24
    2348:	5f c4       	rjmp	.+2238   	; 0x2c08 <main+0x944>
    LCD_Send_String("Enter your");
    234a:	80 e6       	ldi	r24, 0x60	; 96
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	LCD_GOTOXY(0,1);
    2352:	80 e0       	ldi	r24, 0x00	; 0
    2354:	61 e0       	ldi	r22, 0x01	; 1
    2356:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
    LCD_Send_String("Username");
    235a:	8b e6       	ldi	r24, 0x6B	; 107
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    2362:	fe 01       	movw	r30, r28
    2364:	e3 5b       	subi	r30, 0xB3	; 179
    2366:	fe 4f       	sbci	r31, 0xFE	; 254
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e8       	ldi	r25, 0x80	; 128
    236c:	ab e3       	ldi	r26, 0x3B	; 59
    236e:	b5 e4       	ldi	r27, 0x45	; 69
    2370:	80 83       	st	Z, r24
    2372:	91 83       	std	Z+1, r25	; 0x01
    2374:	a2 83       	std	Z+2, r26	; 0x02
    2376:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	8e 01       	movw	r16, r28
    237a:	07 5b       	subi	r16, 0xB7	; 183
    237c:	1e 4f       	sbci	r17, 0xFE	; 254
    237e:	fe 01       	movw	r30, r28
    2380:	e3 5b       	subi	r30, 0xB3	; 179
    2382:	fe 4f       	sbci	r31, 0xFE	; 254
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a ef       	ldi	r20, 0xFA	; 250
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	f8 01       	movw	r30, r16
    239e:	80 83       	st	Z, r24
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	a2 83       	std	Z+2, r26	; 0x02
    23a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23a6:	fe 01       	movw	r30, r28
    23a8:	e7 5b       	subi	r30, 0xB7	; 183
    23aa:	fe 4f       	sbci	r31, 0xFE	; 254
    23ac:	60 81       	ld	r22, Z
    23ae:	71 81       	ldd	r23, Z+1	; 0x01
    23b0:	82 81       	ldd	r24, Z+2	; 0x02
    23b2:	93 81       	ldd	r25, Z+3	; 0x03
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e8       	ldi	r20, 0x80	; 128
    23ba:	5f e3       	ldi	r21, 0x3F	; 63
    23bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	44 f4       	brge	.+16     	; 0x23d4 <main+0x110>
		__ticks = 1;
    23c4:	fe 01       	movw	r30, r28
    23c6:	e9 5b       	subi	r30, 0xB9	; 185
    23c8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ca:	81 e0       	ldi	r24, 0x01	; 1
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	91 83       	std	Z+1, r25	; 0x01
    23d0:	80 83       	st	Z, r24
    23d2:	64 c0       	rjmp	.+200    	; 0x249c <main+0x1d8>
	else if (__tmp > 65535)
    23d4:	fe 01       	movw	r30, r28
    23d6:	e7 5b       	subi	r30, 0xB7	; 183
    23d8:	fe 4f       	sbci	r31, 0xFE	; 254
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	0c f0       	brlt	.+2      	; 0x23f4 <main+0x130>
    23f2:	43 c0       	rjmp	.+134    	; 0x247a <main+0x1b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	fe 01       	movw	r30, r28
    23f6:	e3 5b       	subi	r30, 0xB3	; 179
    23f8:	fe 4f       	sbci	r31, 0xFE	; 254
    23fa:	60 81       	ld	r22, Z
    23fc:	71 81       	ldd	r23, Z+1	; 0x01
    23fe:	82 81       	ldd	r24, Z+2	; 0x02
    2400:	93 81       	ldd	r25, Z+3	; 0x03
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e2       	ldi	r20, 0x20	; 32
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    240e:	dc 01       	movw	r26, r24
    2410:	cb 01       	movw	r24, r22
    2412:	8e 01       	movw	r16, r28
    2414:	09 5b       	subi	r16, 0xB9	; 185
    2416:	1e 4f       	sbci	r17, 0xFE	; 254
    2418:	bc 01       	movw	r22, r24
    241a:	cd 01       	movw	r24, r26
    241c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	f8 01       	movw	r30, r16
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	1f c0       	rjmp	.+62     	; 0x246a <main+0x1a6>
    242c:	fe 01       	movw	r30, r28
    242e:	eb 5b       	subi	r30, 0xBB	; 187
    2430:	fe 4f       	sbci	r31, 0xFE	; 254
    2432:	88 ec       	ldi	r24, 0xC8	; 200
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	91 83       	std	Z+1, r25	; 0x01
    2438:	80 83       	st	Z, r24
    243a:	fe 01       	movw	r30, r28
    243c:	eb 5b       	subi	r30, 0xBB	; 187
    243e:	fe 4f       	sbci	r31, 0xFE	; 254
    2440:	80 81       	ld	r24, Z
    2442:	91 81       	ldd	r25, Z+1	; 0x01
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <main+0x180>
    2448:	fe 01       	movw	r30, r28
    244a:	eb 5b       	subi	r30, 0xBB	; 187
    244c:	fe 4f       	sbci	r31, 0xFE	; 254
    244e:	91 83       	std	Z+1, r25	; 0x01
    2450:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2452:	de 01       	movw	r26, r28
    2454:	a9 5b       	subi	r26, 0xB9	; 185
    2456:	be 4f       	sbci	r27, 0xFE	; 254
    2458:	fe 01       	movw	r30, r28
    245a:	e9 5b       	subi	r30, 0xB9	; 185
    245c:	fe 4f       	sbci	r31, 0xFE	; 254
    245e:	80 81       	ld	r24, Z
    2460:	91 81       	ldd	r25, Z+1	; 0x01
    2462:	01 97       	sbiw	r24, 0x01	; 1
    2464:	11 96       	adiw	r26, 0x01	; 1
    2466:	9c 93       	st	X, r25
    2468:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    246a:	fe 01       	movw	r30, r28
    246c:	e9 5b       	subi	r30, 0xB9	; 185
    246e:	fe 4f       	sbci	r31, 0xFE	; 254
    2470:	80 81       	ld	r24, Z
    2472:	91 81       	ldd	r25, Z+1	; 0x01
    2474:	00 97       	sbiw	r24, 0x00	; 0
    2476:	d1 f6       	brne	.-76     	; 0x242c <main+0x168>
    2478:	27 c0       	rjmp	.+78     	; 0x24c8 <main+0x204>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    247a:	8e 01       	movw	r16, r28
    247c:	09 5b       	subi	r16, 0xB9	; 185
    247e:	1e 4f       	sbci	r17, 0xFE	; 254
    2480:	fe 01       	movw	r30, r28
    2482:	e7 5b       	subi	r30, 0xB7	; 183
    2484:	fe 4f       	sbci	r31, 0xFE	; 254
    2486:	60 81       	ld	r22, Z
    2488:	71 81       	ldd	r23, Z+1	; 0x01
    248a:	82 81       	ldd	r24, Z+2	; 0x02
    248c:	93 81       	ldd	r25, Z+3	; 0x03
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	f8 01       	movw	r30, r16
    2498:	91 83       	std	Z+1, r25	; 0x01
    249a:	80 83       	st	Z, r24
    249c:	de 01       	movw	r26, r28
    249e:	ad 5b       	subi	r26, 0xBD	; 189
    24a0:	be 4f       	sbci	r27, 0xFE	; 254
    24a2:	fe 01       	movw	r30, r28
    24a4:	e9 5b       	subi	r30, 0xB9	; 185
    24a6:	fe 4f       	sbci	r31, 0xFE	; 254
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	8d 93       	st	X+, r24
    24ae:	9c 93       	st	X, r25
    24b0:	fe 01       	movw	r30, r28
    24b2:	ed 5b       	subi	r30, 0xBD	; 189
    24b4:	fe 4f       	sbci	r31, 0xFE	; 254
    24b6:	80 81       	ld	r24, Z
    24b8:	91 81       	ldd	r25, Z+1	; 0x01
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <main+0x1f6>
    24be:	fe 01       	movw	r30, r28
    24c0:	ed 5b       	subi	r30, 0xBD	; 189
    24c2:	fe 4f       	sbci	r31, 0xFE	; 254
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    _delay_ms(3000);
    LCD8Bit_Send_Command(0x01);
    24c8:	81 e0       	ldi	r24, 0x01	; 1
    24ca:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
    LCD_Send_String("Username:");
    24ce:	84 e7       	ldi	r24, 0x74	; 116
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	BluetoothRead(username_input);
    24d6:	8f e2       	ldi	r24, 0x2F	; 47
    24d8:	93 e0       	ldi	r25, 0x03	; 3
    24da:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <BluetoothRead>
	for(u8 i = 0;i<10;i++){
    24de:	fe 01       	movw	r30, r28
    24e0:	e9 5a       	subi	r30, 0xA9	; 169
    24e2:	fe 4f       	sbci	r31, 0xFE	; 254
    24e4:	10 82       	st	Z, r1
    24e6:	e5 c0       	rjmp	.+458    	; 0x26b2 <main+0x3ee>
	if(strcmp(username_input,users[i].username)==0){
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 5a       	subi	r30, 0xA9	; 169
    24ec:	fe 4f       	sbci	r31, 0xFE	; 254
    24ee:	80 81       	ld	r24, Z
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	9c 01       	movw	r18, r24
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	22 0f       	add	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	82 0f       	add	r24, r18
    2504:	93 1f       	adc	r25, r19
    2506:	9c 01       	movw	r18, r24
    2508:	26 54       	subi	r18, 0x46	; 70
    250a:	3d 4f       	sbci	r19, 0xFD	; 253
    250c:	8f e2       	ldi	r24, 0x2F	; 47
    250e:	93 e0       	ldi	r25, 0x03	; 3
    2510:	b9 01       	movw	r22, r18
    2512:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	09 f0       	breq	.+2      	; 0x251c <main+0x258>
    251a:	c2 c0       	rjmp	.+388    	; 0x26a0 <main+0x3dc>
	    LCD8Bit_Send_Command(0x01);
    251c:	81 e0       	ldi	r24, 0x01	; 1
    251e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	    LCD_Send_String("OK");
    2522:	8e e7       	ldi	r24, 0x7E	; 126
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	    usernum = i;
    252a:	fe 01       	movw	r30, r28
    252c:	e9 5a       	subi	r30, 0xA9	; 169
    252e:	fe 4f       	sbci	r31, 0xFE	; 254
    2530:	80 81       	ld	r24, Z
    2532:	80 93 1f 03 	sts	0x031F, r24
    2536:	fe 01       	movw	r30, r28
    2538:	e1 5c       	subi	r30, 0xC1	; 193
    253a:	fe 4f       	sbci	r31, 0xFE	; 254
    253c:	80 e0       	ldi	r24, 0x00	; 0
    253e:	90 e8       	ldi	r25, 0x80	; 128
    2540:	ab e3       	ldi	r26, 0x3B	; 59
    2542:	b5 e4       	ldi	r27, 0x45	; 69
    2544:	80 83       	st	Z, r24
    2546:	91 83       	std	Z+1, r25	; 0x01
    2548:	a2 83       	std	Z+2, r26	; 0x02
    254a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254c:	8e 01       	movw	r16, r28
    254e:	05 5c       	subi	r16, 0xC5	; 197
    2550:	1e 4f       	sbci	r17, 0xFE	; 254
    2552:	fe 01       	movw	r30, r28
    2554:	e1 5c       	subi	r30, 0xC1	; 193
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a ef       	ldi	r20, 0xFA	; 250
    2566:	54 e4       	ldi	r21, 0x44	; 68
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	f8 01       	movw	r30, r16
    2572:	80 83       	st	Z, r24
    2574:	91 83       	std	Z+1, r25	; 0x01
    2576:	a2 83       	std	Z+2, r26	; 0x02
    2578:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    257a:	fe 01       	movw	r30, r28
    257c:	e5 5c       	subi	r30, 0xC5	; 197
    257e:	fe 4f       	sbci	r31, 0xFE	; 254
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	44 f4       	brge	.+16     	; 0x25a8 <main+0x2e4>
		__ticks = 1;
    2598:	fe 01       	movw	r30, r28
    259a:	e7 5c       	subi	r30, 0xC7	; 199
    259c:	fe 4f       	sbci	r31, 0xFE	; 254
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	91 83       	std	Z+1, r25	; 0x01
    25a4:	80 83       	st	Z, r24
    25a6:	64 c0       	rjmp	.+200    	; 0x2670 <main+0x3ac>
	else if (__tmp > 65535)
    25a8:	fe 01       	movw	r30, r28
    25aa:	e5 5c       	subi	r30, 0xC5	; 197
    25ac:	fe 4f       	sbci	r31, 0xFE	; 254
    25ae:	60 81       	ld	r22, Z
    25b0:	71 81       	ldd	r23, Z+1	; 0x01
    25b2:	82 81       	ldd	r24, Z+2	; 0x02
    25b4:	93 81       	ldd	r25, Z+3	; 0x03
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f e7       	ldi	r20, 0x7F	; 127
    25bc:	57 e4       	ldi	r21, 0x47	; 71
    25be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25c2:	18 16       	cp	r1, r24
    25c4:	0c f0       	brlt	.+2      	; 0x25c8 <main+0x304>
    25c6:	43 c0       	rjmp	.+134    	; 0x264e <main+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c8:	fe 01       	movw	r30, r28
    25ca:	e1 5c       	subi	r30, 0xC1	; 193
    25cc:	fe 4f       	sbci	r31, 0xFE	; 254
    25ce:	60 81       	ld	r22, Z
    25d0:	71 81       	ldd	r23, Z+1	; 0x01
    25d2:	82 81       	ldd	r24, Z+2	; 0x02
    25d4:	93 81       	ldd	r25, Z+3	; 0x03
    25d6:	20 e0       	ldi	r18, 0x00	; 0
    25d8:	30 e0       	ldi	r19, 0x00	; 0
    25da:	40 e2       	ldi	r20, 0x20	; 32
    25dc:	51 e4       	ldi	r21, 0x41	; 65
    25de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	8e 01       	movw	r16, r28
    25e8:	07 5c       	subi	r16, 0xC7	; 199
    25ea:	1e 4f       	sbci	r17, 0xFE	; 254
    25ec:	bc 01       	movw	r22, r24
    25ee:	cd 01       	movw	r24, r26
    25f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	f8 01       	movw	r30, r16
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	80 83       	st	Z, r24
    25fe:	1f c0       	rjmp	.+62     	; 0x263e <main+0x37a>
    2600:	fe 01       	movw	r30, r28
    2602:	e9 5c       	subi	r30, 0xC9	; 201
    2604:	fe 4f       	sbci	r31, 0xFE	; 254
    2606:	88 ec       	ldi	r24, 0xC8	; 200
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
    260e:	fe 01       	movw	r30, r28
    2610:	e9 5c       	subi	r30, 0xC9	; 201
    2612:	fe 4f       	sbci	r31, 0xFE	; 254
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	f1 f7       	brne	.-4      	; 0x2618 <main+0x354>
    261c:	fe 01       	movw	r30, r28
    261e:	e9 5c       	subi	r30, 0xC9	; 201
    2620:	fe 4f       	sbci	r31, 0xFE	; 254
    2622:	91 83       	std	Z+1, r25	; 0x01
    2624:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	de 01       	movw	r26, r28
    2628:	a7 5c       	subi	r26, 0xC7	; 199
    262a:	be 4f       	sbci	r27, 0xFE	; 254
    262c:	fe 01       	movw	r30, r28
    262e:	e7 5c       	subi	r30, 0xC7	; 199
    2630:	fe 4f       	sbci	r31, 0xFE	; 254
    2632:	80 81       	ld	r24, Z
    2634:	91 81       	ldd	r25, Z+1	; 0x01
    2636:	01 97       	sbiw	r24, 0x01	; 1
    2638:	11 96       	adiw	r26, 0x01	; 1
    263a:	9c 93       	st	X, r25
    263c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    263e:	fe 01       	movw	r30, r28
    2640:	e7 5c       	subi	r30, 0xC7	; 199
    2642:	fe 4f       	sbci	r31, 0xFE	; 254
    2644:	80 81       	ld	r24, Z
    2646:	91 81       	ldd	r25, Z+1	; 0x01
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	d1 f6       	brne	.-76     	; 0x2600 <main+0x33c>
    264c:	39 c0       	rjmp	.+114    	; 0x26c0 <main+0x3fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264e:	8e 01       	movw	r16, r28
    2650:	07 5c       	subi	r16, 0xC7	; 199
    2652:	1e 4f       	sbci	r17, 0xFE	; 254
    2654:	fe 01       	movw	r30, r28
    2656:	e5 5c       	subi	r30, 0xC5	; 197
    2658:	fe 4f       	sbci	r31, 0xFE	; 254
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	f8 01       	movw	r30, r16
    266c:	91 83       	std	Z+1, r25	; 0x01
    266e:	80 83       	st	Z, r24
    2670:	de 01       	movw	r26, r28
    2672:	ab 5c       	subi	r26, 0xCB	; 203
    2674:	be 4f       	sbci	r27, 0xFE	; 254
    2676:	fe 01       	movw	r30, r28
    2678:	e7 5c       	subi	r30, 0xC7	; 199
    267a:	fe 4f       	sbci	r31, 0xFE	; 254
    267c:	80 81       	ld	r24, Z
    267e:	91 81       	ldd	r25, Z+1	; 0x01
    2680:	11 96       	adiw	r26, 0x01	; 1
    2682:	9c 93       	st	X, r25
    2684:	8e 93       	st	-X, r24
    2686:	fe 01       	movw	r30, r28
    2688:	eb 5c       	subi	r30, 0xCB	; 203
    268a:	fe 4f       	sbci	r31, 0xFE	; 254
    268c:	80 81       	ld	r24, Z
    268e:	91 81       	ldd	r25, Z+1	; 0x01
    2690:	01 97       	sbiw	r24, 0x01	; 1
    2692:	f1 f7       	brne	.-4      	; 0x2690 <main+0x3cc>
    2694:	fe 01       	movw	r30, r28
    2696:	eb 5c       	subi	r30, 0xCB	; 203
    2698:	fe 4f       	sbci	r31, 0xFE	; 254
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24
    269e:	10 c0       	rjmp	.+32     	; 0x26c0 <main+0x3fc>
    LCD_Send_String("Username");
    _delay_ms(3000);
    LCD8Bit_Send_Command(0x01);
    LCD_Send_String("Username:");
	BluetoothRead(username_input);
	for(u8 i = 0;i<10;i++){
    26a0:	de 01       	movw	r26, r28
    26a2:	a9 5a       	subi	r26, 0xA9	; 169
    26a4:	be 4f       	sbci	r27, 0xFE	; 254
    26a6:	fe 01       	movw	r30, r28
    26a8:	e9 5a       	subi	r30, 0xA9	; 169
    26aa:	fe 4f       	sbci	r31, 0xFE	; 254
    26ac:	80 81       	ld	r24, Z
    26ae:	8f 5f       	subi	r24, 0xFF	; 255
    26b0:	8c 93       	st	X, r24
    26b2:	fe 01       	movw	r30, r28
    26b4:	e9 5a       	subi	r30, 0xA9	; 169
    26b6:	fe 4f       	sbci	r31, 0xFE	; 254
    26b8:	80 81       	ld	r24, Z
    26ba:	8a 30       	cpi	r24, 0x0A	; 10
    26bc:	08 f4       	brcc	.+2      	; 0x26c0 <main+0x3fc>
    26be:	14 cf       	rjmp	.-472    	; 0x24e8 <main+0x224>
	    usernum = i;
	    _delay_ms(3000);
	    break;
	    }
	  }
	if(usernum <10 && usernum>=0){
    26c0:	80 91 1f 03 	lds	r24, 0x031F
    26c4:	8a 30       	cpi	r24, 0x0A	; 10
    26c6:	08 f4       	brcc	.+2      	; 0x26ca <main+0x406>
    26c8:	c5 c2       	rjmp	.+1418   	; 0x2c54 <main+0x990>

      break;

	 }
	if((usernum >9 ||usernum<0) && j<3){
    26ca:	80 91 1f 03 	lds	r24, 0x031F
    26ce:	8a 30       	cpi	r24, 0x0A	; 10
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <main+0x410>
    26d2:	d8 c0       	rjmp	.+432    	; 0x2884 <main+0x5c0>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e8 5a       	subi	r30, 0xA8	; 168
    26d8:	fe 4f       	sbci	r31, 0xFE	; 254
    26da:	80 81       	ld	r24, Z
    26dc:	83 30       	cpi	r24, 0x03	; 3
    26de:	08 f0       	brcs	.+2      	; 0x26e2 <main+0x41e>
    26e0:	d1 c0       	rjmp	.+418    	; 0x2884 <main+0x5c0>
	    LCD8Bit_Send_Command(0x01);
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	    LCD_Send_String("Wrong Username");
    26e8:	81 e8       	ldi	r24, 0x81	; 129
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
		LCD_GOTOXY(0,1);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	61 e0       	ldi	r22, 0x01	; 1
    26f4:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
		LCD_Send_Int(3-j);
    26f8:	fe 01       	movw	r30, r28
    26fa:	e8 5a       	subi	r30, 0xA8	; 168
    26fc:	fe 4f       	sbci	r31, 0xFE	; 254
    26fe:	80 81       	ld	r24, Z
    2700:	28 2f       	mov	r18, r24
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	83 e0       	ldi	r24, 0x03	; 3
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	82 1b       	sub	r24, r18
    270a:	93 0b       	sbc	r25, r19
    270c:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
	    LCD_Send_String(" tries left!");
    2710:	80 e9       	ldi	r24, 0x90	; 144
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    2718:	fe 01       	movw	r30, r28
    271a:	ef 5c       	subi	r30, 0xCF	; 207
    271c:	fe 4f       	sbci	r31, 0xFE	; 254
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	90 e4       	ldi	r25, 0x40	; 64
    2722:	ac e9       	ldi	r26, 0x9C	; 156
    2724:	b5 e4       	ldi	r27, 0x45	; 69
    2726:	80 83       	st	Z, r24
    2728:	91 83       	std	Z+1, r25	; 0x01
    272a:	a2 83       	std	Z+2, r26	; 0x02
    272c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    272e:	8e 01       	movw	r16, r28
    2730:	03 5d       	subi	r16, 0xD3	; 211
    2732:	1e 4f       	sbci	r17, 0xFE	; 254
    2734:	fe 01       	movw	r30, r28
    2736:	ef 5c       	subi	r30, 0xCF	; 207
    2738:	fe 4f       	sbci	r31, 0xFE	; 254
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	82 81       	ldd	r24, Z+2	; 0x02
    2740:	93 81       	ldd	r25, Z+3	; 0x03
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	4a ef       	ldi	r20, 0xFA	; 250
    2748:	54 e4       	ldi	r21, 0x44	; 68
    274a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	f8 01       	movw	r30, r16
    2754:	80 83       	st	Z, r24
    2756:	91 83       	std	Z+1, r25	; 0x01
    2758:	a2 83       	std	Z+2, r26	; 0x02
    275a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    275c:	fe 01       	movw	r30, r28
    275e:	e3 5d       	subi	r30, 0xD3	; 211
    2760:	fe 4f       	sbci	r31, 0xFE	; 254
    2762:	60 81       	ld	r22, Z
    2764:	71 81       	ldd	r23, Z+1	; 0x01
    2766:	82 81       	ldd	r24, Z+2	; 0x02
    2768:	93 81       	ldd	r25, Z+3	; 0x03
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e8       	ldi	r20, 0x80	; 128
    2770:	5f e3       	ldi	r21, 0x3F	; 63
    2772:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2776:	88 23       	and	r24, r24
    2778:	44 f4       	brge	.+16     	; 0x278a <main+0x4c6>
		__ticks = 1;
    277a:	fe 01       	movw	r30, r28
    277c:	e5 5d       	subi	r30, 0xD5	; 213
    277e:	fe 4f       	sbci	r31, 0xFE	; 254
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	91 83       	std	Z+1, r25	; 0x01
    2786:	80 83       	st	Z, r24
    2788:	64 c0       	rjmp	.+200    	; 0x2852 <main+0x58e>
	else if (__tmp > 65535)
    278a:	fe 01       	movw	r30, r28
    278c:	e3 5d       	subi	r30, 0xD3	; 211
    278e:	fe 4f       	sbci	r31, 0xFE	; 254
    2790:	60 81       	ld	r22, Z
    2792:	71 81       	ldd	r23, Z+1	; 0x01
    2794:	82 81       	ldd	r24, Z+2	; 0x02
    2796:	93 81       	ldd	r25, Z+3	; 0x03
    2798:	20 e0       	ldi	r18, 0x00	; 0
    279a:	3f ef       	ldi	r19, 0xFF	; 255
    279c:	4f e7       	ldi	r20, 0x7F	; 127
    279e:	57 e4       	ldi	r21, 0x47	; 71
    27a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27a4:	18 16       	cp	r1, r24
    27a6:	0c f0       	brlt	.+2      	; 0x27aa <main+0x4e6>
    27a8:	43 c0       	rjmp	.+134    	; 0x2830 <main+0x56c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27aa:	fe 01       	movw	r30, r28
    27ac:	ef 5c       	subi	r30, 0xCF	; 207
    27ae:	fe 4f       	sbci	r31, 0xFE	; 254
    27b0:	60 81       	ld	r22, Z
    27b2:	71 81       	ldd	r23, Z+1	; 0x01
    27b4:	82 81       	ldd	r24, Z+2	; 0x02
    27b6:	93 81       	ldd	r25, Z+3	; 0x03
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	40 e2       	ldi	r20, 0x20	; 32
    27be:	51 e4       	ldi	r21, 0x41	; 65
    27c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c4:	dc 01       	movw	r26, r24
    27c6:	cb 01       	movw	r24, r22
    27c8:	8e 01       	movw	r16, r28
    27ca:	05 5d       	subi	r16, 0xD5	; 213
    27cc:	1e 4f       	sbci	r17, 0xFE	; 254
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	f8 01       	movw	r30, r16
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
    27e0:	1f c0       	rjmp	.+62     	; 0x2820 <main+0x55c>
    27e2:	fe 01       	movw	r30, r28
    27e4:	e7 5d       	subi	r30, 0xD7	; 215
    27e6:	fe 4f       	sbci	r31, 0xFE	; 254
    27e8:	88 ec       	ldi	r24, 0xC8	; 200
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	91 83       	std	Z+1, r25	; 0x01
    27ee:	80 83       	st	Z, r24
    27f0:	fe 01       	movw	r30, r28
    27f2:	e7 5d       	subi	r30, 0xD7	; 215
    27f4:	fe 4f       	sbci	r31, 0xFE	; 254
    27f6:	80 81       	ld	r24, Z
    27f8:	91 81       	ldd	r25, Z+1	; 0x01
    27fa:	01 97       	sbiw	r24, 0x01	; 1
    27fc:	f1 f7       	brne	.-4      	; 0x27fa <main+0x536>
    27fe:	fe 01       	movw	r30, r28
    2800:	e7 5d       	subi	r30, 0xD7	; 215
    2802:	fe 4f       	sbci	r31, 0xFE	; 254
    2804:	91 83       	std	Z+1, r25	; 0x01
    2806:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2808:	de 01       	movw	r26, r28
    280a:	a5 5d       	subi	r26, 0xD5	; 213
    280c:	be 4f       	sbci	r27, 0xFE	; 254
    280e:	fe 01       	movw	r30, r28
    2810:	e5 5d       	subi	r30, 0xD5	; 213
    2812:	fe 4f       	sbci	r31, 0xFE	; 254
    2814:	80 81       	ld	r24, Z
    2816:	91 81       	ldd	r25, Z+1	; 0x01
    2818:	01 97       	sbiw	r24, 0x01	; 1
    281a:	11 96       	adiw	r26, 0x01	; 1
    281c:	9c 93       	st	X, r25
    281e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	fe 01       	movw	r30, r28
    2822:	e5 5d       	subi	r30, 0xD5	; 213
    2824:	fe 4f       	sbci	r31, 0xFE	; 254
    2826:	80 81       	ld	r24, Z
    2828:	91 81       	ldd	r25, Z+1	; 0x01
    282a:	00 97       	sbiw	r24, 0x00	; 0
    282c:	d1 f6       	brne	.-76     	; 0x27e2 <main+0x51e>
    282e:	27 c0       	rjmp	.+78     	; 0x287e <main+0x5ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2830:	8e 01       	movw	r16, r28
    2832:	05 5d       	subi	r16, 0xD5	; 213
    2834:	1e 4f       	sbci	r17, 0xFE	; 254
    2836:	fe 01       	movw	r30, r28
    2838:	e3 5d       	subi	r30, 0xD3	; 211
    283a:	fe 4f       	sbci	r31, 0xFE	; 254
    283c:	60 81       	ld	r22, Z
    283e:	71 81       	ldd	r23, Z+1	; 0x01
    2840:	82 81       	ldd	r24, Z+2	; 0x02
    2842:	93 81       	ldd	r25, Z+3	; 0x03
    2844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	f8 01       	movw	r30, r16
    284e:	91 83       	std	Z+1, r25	; 0x01
    2850:	80 83       	st	Z, r24
    2852:	de 01       	movw	r26, r28
    2854:	a9 5d       	subi	r26, 0xD9	; 217
    2856:	be 4f       	sbci	r27, 0xFE	; 254
    2858:	fe 01       	movw	r30, r28
    285a:	e5 5d       	subi	r30, 0xD5	; 213
    285c:	fe 4f       	sbci	r31, 0xFE	; 254
    285e:	80 81       	ld	r24, Z
    2860:	91 81       	ldd	r25, Z+1	; 0x01
    2862:	8d 93       	st	X+, r24
    2864:	9c 93       	st	X, r25
    2866:	fe 01       	movw	r30, r28
    2868:	e9 5d       	subi	r30, 0xD9	; 217
    286a:	fe 4f       	sbci	r31, 0xFE	; 254
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	01 97       	sbiw	r24, 0x01	; 1
    2872:	f1 f7       	brne	.-4      	; 0x2870 <main+0x5ac>
    2874:	fe 01       	movw	r30, r28
    2876:	e9 5d       	subi	r30, 0xD9	; 217
    2878:	fe 4f       	sbci	r31, 0xFE	; 254
    287a:	91 83       	std	Z+1, r25	; 0x01
    287c:	80 83       	st	Z, r24
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
    287e:	81 e0       	ldi	r24, 0x01	; 1
    2880:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>

	 }
	if(j==3 &&(usernum >9 ||usernum<0)){
    2884:	fe 01       	movw	r30, r28
    2886:	e8 5a       	subi	r30, 0xA8	; 168
    2888:	fe 4f       	sbci	r31, 0xFE	; 254
    288a:	80 81       	ld	r24, Z
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	09 f0       	breq	.+2      	; 0x2892 <main+0x5ce>
    2890:	b2 c1       	rjmp	.+868    	; 0x2bf6 <main+0x932>
    2892:	80 91 1f 03 	lds	r24, 0x031F
    2896:	8a 30       	cpi	r24, 0x0A	; 10
    2898:	08 f4       	brcc	.+2      	; 0x289c <main+0x5d8>
    289a:	ad c1       	rjmp	.+858    	; 0x2bf6 <main+0x932>
	    LCD8Bit_Send_Command(0x01);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	    LCD_Send_String("Wrong Username");
    28a2:	81 e8       	ldi	r24, 0x81	; 129
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
		LCD_GOTOXY(0,1);
    28aa:	80 e0       	ldi	r24, 0x00	; 0
    28ac:	61 e0       	ldi	r22, 0x01	; 1
    28ae:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
	    LCD_Send_String("No tries left!");
    28b2:	8d e9       	ldi	r24, 0x9D	; 157
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 5d       	subi	r30, 0xDD	; 221
    28be:	fe 4f       	sbci	r31, 0xFE	; 254
    28c0:	80 e0       	ldi	r24, 0x00	; 0
    28c2:	90 e4       	ldi	r25, 0x40	; 64
    28c4:	ac e9       	ldi	r26, 0x9C	; 156
    28c6:	b5 e4       	ldi	r27, 0x45	; 69
    28c8:	80 83       	st	Z, r24
    28ca:	91 83       	std	Z+1, r25	; 0x01
    28cc:	a2 83       	std	Z+2, r26	; 0x02
    28ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d0:	8e 01       	movw	r16, r28
    28d2:	01 5e       	subi	r16, 0xE1	; 225
    28d4:	1e 4f       	sbci	r17, 0xFE	; 254
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 5d       	subi	r30, 0xDD	; 221
    28da:	fe 4f       	sbci	r31, 0xFE	; 254
    28dc:	60 81       	ld	r22, Z
    28de:	71 81       	ldd	r23, Z+1	; 0x01
    28e0:	82 81       	ldd	r24, Z+2	; 0x02
    28e2:	93 81       	ldd	r25, Z+3	; 0x03
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a ef       	ldi	r20, 0xFA	; 250
    28ea:	54 e4       	ldi	r21, 0x44	; 68
    28ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f0:	dc 01       	movw	r26, r24
    28f2:	cb 01       	movw	r24, r22
    28f4:	f8 01       	movw	r30, r16
    28f6:	80 83       	st	Z, r24
    28f8:	91 83       	std	Z+1, r25	; 0x01
    28fa:	a2 83       	std	Z+2, r26	; 0x02
    28fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    28fe:	fe 01       	movw	r30, r28
    2900:	e1 5e       	subi	r30, 0xE1	; 225
    2902:	fe 4f       	sbci	r31, 0xFE	; 254
    2904:	60 81       	ld	r22, Z
    2906:	71 81       	ldd	r23, Z+1	; 0x01
    2908:	82 81       	ldd	r24, Z+2	; 0x02
    290a:	93 81       	ldd	r25, Z+3	; 0x03
    290c:	20 e0       	ldi	r18, 0x00	; 0
    290e:	30 e0       	ldi	r19, 0x00	; 0
    2910:	40 e8       	ldi	r20, 0x80	; 128
    2912:	5f e3       	ldi	r21, 0x3F	; 63
    2914:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2918:	88 23       	and	r24, r24
    291a:	44 f4       	brge	.+16     	; 0x292c <main+0x668>
		__ticks = 1;
    291c:	fe 01       	movw	r30, r28
    291e:	e3 5e       	subi	r30, 0xE3	; 227
    2920:	fe 4f       	sbci	r31, 0xFE	; 254
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	91 83       	std	Z+1, r25	; 0x01
    2928:	80 83       	st	Z, r24
    292a:	64 c0       	rjmp	.+200    	; 0x29f4 <main+0x730>
	else if (__tmp > 65535)
    292c:	fe 01       	movw	r30, r28
    292e:	e1 5e       	subi	r30, 0xE1	; 225
    2930:	fe 4f       	sbci	r31, 0xFE	; 254
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	0c f0       	brlt	.+2      	; 0x294c <main+0x688>
    294a:	43 c0       	rjmp	.+134    	; 0x29d2 <main+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294c:	fe 01       	movw	r30, r28
    294e:	ed 5d       	subi	r30, 0xDD	; 221
    2950:	fe 4f       	sbci	r31, 0xFE	; 254
    2952:	60 81       	ld	r22, Z
    2954:	71 81       	ldd	r23, Z+1	; 0x01
    2956:	82 81       	ldd	r24, Z+2	; 0x02
    2958:	93 81       	ldd	r25, Z+3	; 0x03
    295a:	20 e0       	ldi	r18, 0x00	; 0
    295c:	30 e0       	ldi	r19, 0x00	; 0
    295e:	40 e2       	ldi	r20, 0x20	; 32
    2960:	51 e4       	ldi	r21, 0x41	; 65
    2962:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	8e 01       	movw	r16, r28
    296c:	03 5e       	subi	r16, 0xE3	; 227
    296e:	1e 4f       	sbci	r17, 0xFE	; 254
    2970:	bc 01       	movw	r22, r24
    2972:	cd 01       	movw	r24, r26
    2974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	f8 01       	movw	r30, r16
    297e:	91 83       	std	Z+1, r25	; 0x01
    2980:	80 83       	st	Z, r24
    2982:	1f c0       	rjmp	.+62     	; 0x29c2 <main+0x6fe>
    2984:	fe 01       	movw	r30, r28
    2986:	e5 5e       	subi	r30, 0xE5	; 229
    2988:	fe 4f       	sbci	r31, 0xFE	; 254
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	fe 01       	movw	r30, r28
    2994:	e5 5e       	subi	r30, 0xE5	; 229
    2996:	fe 4f       	sbci	r31, 0xFE	; 254
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <main+0x6d8>
    29a0:	fe 01       	movw	r30, r28
    29a2:	e5 5e       	subi	r30, 0xE5	; 229
    29a4:	fe 4f       	sbci	r31, 0xFE	; 254
    29a6:	91 83       	std	Z+1, r25	; 0x01
    29a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29aa:	de 01       	movw	r26, r28
    29ac:	a3 5e       	subi	r26, 0xE3	; 227
    29ae:	be 4f       	sbci	r27, 0xFE	; 254
    29b0:	fe 01       	movw	r30, r28
    29b2:	e3 5e       	subi	r30, 0xE3	; 227
    29b4:	fe 4f       	sbci	r31, 0xFE	; 254
    29b6:	80 81       	ld	r24, Z
    29b8:	91 81       	ldd	r25, Z+1	; 0x01
    29ba:	01 97       	sbiw	r24, 0x01	; 1
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	9c 93       	st	X, r25
    29c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29c2:	fe 01       	movw	r30, r28
    29c4:	e3 5e       	subi	r30, 0xE3	; 227
    29c6:	fe 4f       	sbci	r31, 0xFE	; 254
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	d1 f6       	brne	.-76     	; 0x2984 <main+0x6c0>
    29d0:	27 c0       	rjmp	.+78     	; 0x2a20 <main+0x75c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29d2:	8e 01       	movw	r16, r28
    29d4:	03 5e       	subi	r16, 0xE3	; 227
    29d6:	1e 4f       	sbci	r17, 0xFE	; 254
    29d8:	fe 01       	movw	r30, r28
    29da:	e1 5e       	subi	r30, 0xE1	; 225
    29dc:	fe 4f       	sbci	r31, 0xFE	; 254
    29de:	60 81       	ld	r22, Z
    29e0:	71 81       	ldd	r23, Z+1	; 0x01
    29e2:	82 81       	ldd	r24, Z+2	; 0x02
    29e4:	93 81       	ldd	r25, Z+3	; 0x03
    29e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	f8 01       	movw	r30, r16
    29f0:	91 83       	std	Z+1, r25	; 0x01
    29f2:	80 83       	st	Z, r24
    29f4:	de 01       	movw	r26, r28
    29f6:	a7 5e       	subi	r26, 0xE7	; 231
    29f8:	be 4f       	sbci	r27, 0xFE	; 254
    29fa:	fe 01       	movw	r30, r28
    29fc:	e3 5e       	subi	r30, 0xE3	; 227
    29fe:	fe 4f       	sbci	r31, 0xFE	; 254
    2a00:	80 81       	ld	r24, Z
    2a02:	91 81       	ldd	r25, Z+1	; 0x01
    2a04:	8d 93       	st	X+, r24
    2a06:	9c 93       	st	X, r25
    2a08:	fe 01       	movw	r30, r28
    2a0a:	e7 5e       	subi	r30, 0xE7	; 231
    2a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a0e:	80 81       	ld	r24, Z
    2a10:	91 81       	ldd	r25, Z+1	; 0x01
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	f1 f7       	brne	.-4      	; 0x2a12 <main+0x74e>
    2a16:	fe 01       	movw	r30, r28
    2a18:	e7 5e       	subi	r30, 0xE7	; 231
    2a1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a1c:	91 83       	std	Z+1, r25	; 0x01
    2a1e:	80 83       	st	Z, r24
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	    for(u8 o = 0;o<10;o++){
    2a26:	fe 01       	movw	r30, r28
    2a28:	ea 5a       	subi	r30, 0xAA	; 170
    2a2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2c:	10 82       	st	Z, r1
    2a2e:	dc c0       	rjmp	.+440    	; 0x2be8 <main+0x924>
		    LCD8Bit_Send_Command(0x01);
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
		    LCD_Send_String("System Shutdown");
    2a36:	8c ea       	ldi	r24, 0xAC	; 172
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
			LCD_GOTOXY(0,1);
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	61 e0       	ldi	r22, 0x01	; 1
    2a42:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
			LCD_Send_Int(10-o);
    2a46:	fe 01       	movw	r30, r28
    2a48:	ea 5a       	subi	r30, 0xAA	; 170
    2a4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4c:	80 81       	ld	r24, Z
    2a4e:	28 2f       	mov	r18, r24
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	8a e0       	ldi	r24, 0x0A	; 10
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	82 1b       	sub	r24, r18
    2a58:	93 0b       	sbc	r25, r19
    2a5a:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
		    LCD_Send_String(" Seconds");
    2a5e:	8c eb       	ldi	r24, 0xBC	; 188
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    2a66:	fe 01       	movw	r30, r28
    2a68:	eb 5e       	subi	r30, 0xEB	; 235
    2a6a:	fe 4f       	sbci	r31, 0xFE	; 254
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	aa e7       	ldi	r26, 0x7A	; 122
    2a72:	b4 e4       	ldi	r27, 0x44	; 68
    2a74:	80 83       	st	Z, r24
    2a76:	91 83       	std	Z+1, r25	; 0x01
    2a78:	a2 83       	std	Z+2, r26	; 0x02
    2a7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	0f 5e       	subi	r16, 0xEF	; 239
    2a80:	1e 4f       	sbci	r17, 0xFE	; 254
    2a82:	fe 01       	movw	r30, r28
    2a84:	eb 5e       	subi	r30, 0xEB	; 235
    2a86:	fe 4f       	sbci	r31, 0xFE	; 254
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	f8 01       	movw	r30, r16
    2aa2:	80 83       	st	Z, r24
    2aa4:	91 83       	std	Z+1, r25	; 0x01
    2aa6:	a2 83       	std	Z+2, r26	; 0x02
    2aa8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2aaa:	fe 01       	movw	r30, r28
    2aac:	ef 5e       	subi	r30, 0xEF	; 239
    2aae:	fe 4f       	sbci	r31, 0xFE	; 254
    2ab0:	60 81       	ld	r22, Z
    2ab2:	71 81       	ldd	r23, Z+1	; 0x01
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e8       	ldi	r20, 0x80	; 128
    2abe:	5f e3       	ldi	r21, 0x3F	; 63
    2ac0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	44 f4       	brge	.+16     	; 0x2ad8 <main+0x814>
		__ticks = 1;
    2ac8:	fe 01       	movw	r30, r28
    2aca:	e1 5f       	subi	r30, 0xF1	; 241
    2acc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	91 83       	std	Z+1, r25	; 0x01
    2ad4:	80 83       	st	Z, r24
    2ad6:	64 c0       	rjmp	.+200    	; 0x2ba0 <main+0x8dc>
	else if (__tmp > 65535)
    2ad8:	fe 01       	movw	r30, r28
    2ada:	ef 5e       	subi	r30, 0xEF	; 239
    2adc:	fe 4f       	sbci	r31, 0xFE	; 254
    2ade:	60 81       	ld	r22, Z
    2ae0:	71 81       	ldd	r23, Z+1	; 0x01
    2ae2:	82 81       	ldd	r24, Z+2	; 0x02
    2ae4:	93 81       	ldd	r25, Z+3	; 0x03
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	3f ef       	ldi	r19, 0xFF	; 255
    2aea:	4f e7       	ldi	r20, 0x7F	; 127
    2aec:	57 e4       	ldi	r21, 0x47	; 71
    2aee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	0c f0       	brlt	.+2      	; 0x2af8 <main+0x834>
    2af6:	43 c0       	rjmp	.+134    	; 0x2b7e <main+0x8ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2af8:	fe 01       	movw	r30, r28
    2afa:	eb 5e       	subi	r30, 0xEB	; 235
    2afc:	fe 4f       	sbci	r31, 0xFE	; 254
    2afe:	60 81       	ld	r22, Z
    2b00:	71 81       	ldd	r23, Z+1	; 0x01
    2b02:	82 81       	ldd	r24, Z+2	; 0x02
    2b04:	93 81       	ldd	r25, Z+3	; 0x03
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e2       	ldi	r20, 0x20	; 32
    2b0c:	51 e4       	ldi	r21, 0x41	; 65
    2b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	8e 01       	movw	r16, r28
    2b18:	01 5f       	subi	r16, 0xF1	; 241
    2b1a:	1e 4f       	sbci	r17, 0xFE	; 254
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	f8 01       	movw	r30, r16
    2b2a:	91 83       	std	Z+1, r25	; 0x01
    2b2c:	80 83       	st	Z, r24
    2b2e:	1f c0       	rjmp	.+62     	; 0x2b6e <main+0x8aa>
    2b30:	fe 01       	movw	r30, r28
    2b32:	e3 5f       	subi	r30, 0xF3	; 243
    2b34:	fe 4f       	sbci	r31, 0xFE	; 254
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	91 83       	std	Z+1, r25	; 0x01
    2b3c:	80 83       	st	Z, r24
    2b3e:	fe 01       	movw	r30, r28
    2b40:	e3 5f       	subi	r30, 0xF3	; 243
    2b42:	fe 4f       	sbci	r31, 0xFE	; 254
    2b44:	80 81       	ld	r24, Z
    2b46:	91 81       	ldd	r25, Z+1	; 0x01
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <main+0x884>
    2b4c:	fe 01       	movw	r30, r28
    2b4e:	e3 5f       	subi	r30, 0xF3	; 243
    2b50:	fe 4f       	sbci	r31, 0xFE	; 254
    2b52:	91 83       	std	Z+1, r25	; 0x01
    2b54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b56:	de 01       	movw	r26, r28
    2b58:	a1 5f       	subi	r26, 0xF1	; 241
    2b5a:	be 4f       	sbci	r27, 0xFE	; 254
    2b5c:	fe 01       	movw	r30, r28
    2b5e:	e1 5f       	subi	r30, 0xF1	; 241
    2b60:	fe 4f       	sbci	r31, 0xFE	; 254
    2b62:	80 81       	ld	r24, Z
    2b64:	91 81       	ldd	r25, Z+1	; 0x01
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	11 96       	adiw	r26, 0x01	; 1
    2b6a:	9c 93       	st	X, r25
    2b6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b6e:	fe 01       	movw	r30, r28
    2b70:	e1 5f       	subi	r30, 0xF1	; 241
    2b72:	fe 4f       	sbci	r31, 0xFE	; 254
    2b74:	80 81       	ld	r24, Z
    2b76:	91 81       	ldd	r25, Z+1	; 0x01
    2b78:	00 97       	sbiw	r24, 0x00	; 0
    2b7a:	d1 f6       	brne	.-76     	; 0x2b30 <main+0x86c>
    2b7c:	27 c0       	rjmp	.+78     	; 0x2bcc <main+0x908>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b7e:	8e 01       	movw	r16, r28
    2b80:	01 5f       	subi	r16, 0xF1	; 241
    2b82:	1e 4f       	sbci	r17, 0xFE	; 254
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 5e       	subi	r30, 0xEF	; 239
    2b88:	fe 4f       	sbci	r31, 0xFE	; 254
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	f8 01       	movw	r30, r16
    2b9c:	91 83       	std	Z+1, r25	; 0x01
    2b9e:	80 83       	st	Z, r24
    2ba0:	de 01       	movw	r26, r28
    2ba2:	a5 5f       	subi	r26, 0xF5	; 245
    2ba4:	be 4f       	sbci	r27, 0xFE	; 254
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	e1 5f       	subi	r30, 0xF1	; 241
    2baa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bac:	80 81       	ld	r24, Z
    2bae:	91 81       	ldd	r25, Z+1	; 0x01
    2bb0:	8d 93       	st	X+, r24
    2bb2:	9c 93       	st	X, r25
    2bb4:	fe 01       	movw	r30, r28
    2bb6:	e5 5f       	subi	r30, 0xF5	; 245
    2bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    2bba:	80 81       	ld	r24, Z
    2bbc:	91 81       	ldd	r25, Z+1	; 0x01
    2bbe:	01 97       	sbiw	r24, 0x01	; 1
    2bc0:	f1 f7       	brne	.-4      	; 0x2bbe <main+0x8fa>
    2bc2:	fe 01       	movw	r30, r28
    2bc4:	e5 5f       	subi	r30, 0xF5	; 245
    2bc6:	fe 4f       	sbci	r31, 0xFE	; 254
    2bc8:	91 83       	std	Z+1, r25	; 0x01
    2bca:	80 83       	st	Z, r24
		    _delay_ms(1000);
		    LCD8Bit_Send_Command(0x01);
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
            flag = 0;
    2bd2:	10 92 1e 03 	sts	0x031E, r1
	    LCD_Send_String("Wrong Username");
		LCD_GOTOXY(0,1);
	    LCD_Send_String("No tries left!");
	    _delay_ms(5000);
	    LCD8Bit_Send_Command(0x01);
	    for(u8 o = 0;o<10;o++){
    2bd6:	de 01       	movw	r26, r28
    2bd8:	aa 5a       	subi	r26, 0xAA	; 170
    2bda:	be 4f       	sbci	r27, 0xFE	; 254
    2bdc:	fe 01       	movw	r30, r28
    2bde:	ea 5a       	subi	r30, 0xAA	; 170
    2be0:	fe 4f       	sbci	r31, 0xFE	; 254
    2be2:	80 81       	ld	r24, Z
    2be4:	8f 5f       	subi	r24, 0xFF	; 255
    2be6:	8c 93       	st	X, r24
    2be8:	fe 01       	movw	r30, r28
    2bea:	ea 5a       	subi	r30, 0xAA	; 170
    2bec:	fe 4f       	sbci	r31, 0xFE	; 254
    2bee:	80 81       	ld	r24, Z
    2bf0:	8a 30       	cpi	r24, 0x0A	; 10
    2bf2:	08 f4       	brcc	.+2      	; 0x2bf6 <main+0x932>
    2bf4:	1d cf       	rjmp	.-454    	; 0x2a30 <main+0x76c>
	/******************   Enter the system   *******************/
	/***********************************************************/
    ServoAngle(closeangle);

	//Entering the username (username phase)
	for(u8 j=1;j<4;j++){
    2bf6:	de 01       	movw	r26, r28
    2bf8:	a8 5a       	subi	r26, 0xA8	; 168
    2bfa:	be 4f       	sbci	r27, 0xFE	; 254
    2bfc:	fe 01       	movw	r30, r28
    2bfe:	e8 5a       	subi	r30, 0xA8	; 168
    2c00:	fe 4f       	sbci	r31, 0xFE	; 254
    2c02:	80 81       	ld	r24, Z
    2c04:	8f 5f       	subi	r24, 0xFF	; 255
    2c06:	8c 93       	st	X, r24
    2c08:	fe 01       	movw	r30, r28
    2c0a:	e8 5a       	subi	r30, 0xA8	; 168
    2c0c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c0e:	80 81       	ld	r24, Z
    2c10:	84 30       	cpi	r24, 0x04	; 4
    2c12:	08 f4       	brcc	.+2      	; 0x2c16 <main+0x952>
    2c14:	9a cb       	rjmp	.-2252   	; 0x234a <main+0x86>
    2c16:	1e c0       	rjmp	.+60     	; 0x2c54 <main+0x990>
            flag = 0;
	    }
	  }
	}
    while(flag == 0){
    	for(u8 i = 0;i<10;i++){
    2c18:	fe 01       	movw	r30, r28
    2c1a:	eb 5a       	subi	r30, 0xAB	; 171
    2c1c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1e:	10 82       	st	Z, r1
    2c20:	13 c0       	rjmp	.+38     	; 0x2c48 <main+0x984>
    		if(i==5)
    2c22:	fe 01       	movw	r30, r28
    2c24:	eb 5a       	subi	r30, 0xAB	; 171
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	80 81       	ld	r24, Z
    2c2a:	85 30       	cpi	r24, 0x05	; 5
    2c2c:	21 f4       	brne	.+8      	; 0x2c36 <main+0x972>
    			i=0;
    2c2e:	fe 01       	movw	r30, r28
    2c30:	eb 5a       	subi	r30, 0xAB	; 171
    2c32:	fe 4f       	sbci	r31, 0xFE	; 254
    2c34:	10 82       	st	Z, r1
            flag = 0;
	    }
	  }
	}
    while(flag == 0){
    	for(u8 i = 0;i<10;i++){
    2c36:	de 01       	movw	r26, r28
    2c38:	ab 5a       	subi	r26, 0xAB	; 171
    2c3a:	be 4f       	sbci	r27, 0xFE	; 254
    2c3c:	fe 01       	movw	r30, r28
    2c3e:	eb 5a       	subi	r30, 0xAB	; 171
    2c40:	fe 4f       	sbci	r31, 0xFE	; 254
    2c42:	80 81       	ld	r24, Z
    2c44:	8f 5f       	subi	r24, 0xFF	; 255
    2c46:	8c 93       	st	X, r24
    2c48:	fe 01       	movw	r30, r28
    2c4a:	eb 5a       	subi	r30, 0xAB	; 171
    2c4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c4e:	80 81       	ld	r24, Z
    2c50:	8a 30       	cpi	r24, 0x0A	; 10
    2c52:	38 f3       	brcs	.-50     	; 0x2c22 <main+0x95e>
		    LCD8Bit_Send_Command(0x01);
            flag = 0;
	    }
	  }
	}
    while(flag == 0){
    2c54:	80 91 1e 03 	lds	r24, 0x031E
    2c58:	88 23       	and	r24, r24
    2c5a:	f1 f2       	breq	.-68     	; 0x2c18 <main+0x954>
    2c5c:	fe 01       	movw	r30, r28
    2c5e:	e9 5f       	subi	r30, 0xF9	; 249
    2c60:	fe 4f       	sbci	r31, 0xFE	; 254
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	90 e0       	ldi	r25, 0x00	; 0
    2c66:	aa e7       	ldi	r26, 0x7A	; 122
    2c68:	b4 e4       	ldi	r27, 0x44	; 68
    2c6a:	80 83       	st	Z, r24
    2c6c:	91 83       	std	Z+1, r25	; 0x01
    2c6e:	a2 83       	std	Z+2, r26	; 0x02
    2c70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c72:	8e 01       	movw	r16, r28
    2c74:	0d 5f       	subi	r16, 0xFD	; 253
    2c76:	1e 4f       	sbci	r17, 0xFE	; 254
    2c78:	fe 01       	movw	r30, r28
    2c7a:	e9 5f       	subi	r30, 0xF9	; 249
    2c7c:	fe 4f       	sbci	r31, 0xFE	; 254
    2c7e:	60 81       	ld	r22, Z
    2c80:	71 81       	ldd	r23, Z+1	; 0x01
    2c82:	82 81       	ldd	r24, Z+2	; 0x02
    2c84:	93 81       	ldd	r25, Z+3	; 0x03
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	4a ef       	ldi	r20, 0xFA	; 250
    2c8c:	54 e4       	ldi	r21, 0x44	; 68
    2c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c92:	dc 01       	movw	r26, r24
    2c94:	cb 01       	movw	r24, r22
    2c96:	f8 01       	movw	r30, r16
    2c98:	80 83       	st	Z, r24
    2c9a:	91 83       	std	Z+1, r25	; 0x01
    2c9c:	a2 83       	std	Z+2, r26	; 0x02
    2c9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	ed 5f       	subi	r30, 0xFD	; 253
    2ca4:	fe 4f       	sbci	r31, 0xFE	; 254
    2ca6:	60 81       	ld	r22, Z
    2ca8:	71 81       	ldd	r23, Z+1	; 0x01
    2caa:	82 81       	ldd	r24, Z+2	; 0x02
    2cac:	93 81       	ldd	r25, Z+3	; 0x03
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e8       	ldi	r20, 0x80	; 128
    2cb4:	5f e3       	ldi	r21, 0x3F	; 63
    2cb6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cba:	88 23       	and	r24, r24
    2cbc:	44 f4       	brge	.+16     	; 0x2cce <main+0xa0a>
		__ticks = 1;
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ef 5f       	subi	r30, 0xFF	; 255
    2cc2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	91 83       	std	Z+1, r25	; 0x01
    2cca:	80 83       	st	Z, r24
    2ccc:	64 c0       	rjmp	.+200    	; 0x2d96 <main+0xad2>
	else if (__tmp > 65535)
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 5f       	subi	r30, 0xFD	; 253
    2cd2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cd4:	60 81       	ld	r22, Z
    2cd6:	71 81       	ldd	r23, Z+1	; 0x01
    2cd8:	82 81       	ldd	r24, Z+2	; 0x02
    2cda:	93 81       	ldd	r25, Z+3	; 0x03
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	3f ef       	ldi	r19, 0xFF	; 255
    2ce0:	4f e7       	ldi	r20, 0x7F	; 127
    2ce2:	57 e4       	ldi	r21, 0x47	; 71
    2ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ce8:	18 16       	cp	r1, r24
    2cea:	0c f0       	brlt	.+2      	; 0x2cee <main+0xa2a>
    2cec:	43 c0       	rjmp	.+134    	; 0x2d74 <main+0xab0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cee:	fe 01       	movw	r30, r28
    2cf0:	e9 5f       	subi	r30, 0xF9	; 249
    2cf2:	fe 4f       	sbci	r31, 0xFE	; 254
    2cf4:	60 81       	ld	r22, Z
    2cf6:	71 81       	ldd	r23, Z+1	; 0x01
    2cf8:	82 81       	ldd	r24, Z+2	; 0x02
    2cfa:	93 81       	ldd	r25, Z+3	; 0x03
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e2       	ldi	r20, 0x20	; 32
    2d02:	51 e4       	ldi	r21, 0x41	; 65
    2d04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d08:	dc 01       	movw	r26, r24
    2d0a:	cb 01       	movw	r24, r22
    2d0c:	8e 01       	movw	r16, r28
    2d0e:	0f 5f       	subi	r16, 0xFF	; 255
    2d10:	1e 4f       	sbci	r17, 0xFE	; 254
    2d12:	bc 01       	movw	r22, r24
    2d14:	cd 01       	movw	r24, r26
    2d16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	f8 01       	movw	r30, r16
    2d20:	91 83       	std	Z+1, r25	; 0x01
    2d22:	80 83       	st	Z, r24
    2d24:	1f c0       	rjmp	.+62     	; 0x2d64 <main+0xaa0>
    2d26:	fe 01       	movw	r30, r28
    2d28:	e1 50       	subi	r30, 0x01	; 1
    2d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d2c:	88 ec       	ldi	r24, 0xC8	; 200
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	91 83       	std	Z+1, r25	; 0x01
    2d32:	80 83       	st	Z, r24
    2d34:	fe 01       	movw	r30, r28
    2d36:	e1 50       	subi	r30, 0x01	; 1
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	01 97       	sbiw	r24, 0x01	; 1
    2d40:	f1 f7       	brne	.-4      	; 0x2d3e <main+0xa7a>
    2d42:	fe 01       	movw	r30, r28
    2d44:	e1 50       	subi	r30, 0x01	; 1
    2d46:	ff 4f       	sbci	r31, 0xFF	; 255
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d4c:	de 01       	movw	r26, r28
    2d4e:	af 5f       	subi	r26, 0xFF	; 255
    2d50:	be 4f       	sbci	r27, 0xFE	; 254
    2d52:	fe 01       	movw	r30, r28
    2d54:	ef 5f       	subi	r30, 0xFF	; 255
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	01 97       	sbiw	r24, 0x01	; 1
    2d5e:	11 96       	adiw	r26, 0x01	; 1
    2d60:	9c 93       	st	X, r25
    2d62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d64:	fe 01       	movw	r30, r28
    2d66:	ef 5f       	subi	r30, 0xFF	; 255
    2d68:	fe 4f       	sbci	r31, 0xFE	; 254
    2d6a:	80 81       	ld	r24, Z
    2d6c:	91 81       	ldd	r25, Z+1	; 0x01
    2d6e:	00 97       	sbiw	r24, 0x00	; 0
    2d70:	d1 f6       	brne	.-76     	; 0x2d26 <main+0xa62>
    2d72:	27 c0       	rjmp	.+78     	; 0x2dc2 <main+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d74:	8e 01       	movw	r16, r28
    2d76:	0f 5f       	subi	r16, 0xFF	; 255
    2d78:	1e 4f       	sbci	r17, 0xFE	; 254
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ed 5f       	subi	r30, 0xFD	; 253
    2d7e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d80:	60 81       	ld	r22, Z
    2d82:	71 81       	ldd	r23, Z+1	; 0x01
    2d84:	82 81       	ldd	r24, Z+2	; 0x02
    2d86:	93 81       	ldd	r25, Z+3	; 0x03
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	f8 01       	movw	r30, r16
    2d92:	91 83       	std	Z+1, r25	; 0x01
    2d94:	80 83       	st	Z, r24
    2d96:	de 01       	movw	r26, r28
    2d98:	a3 50       	subi	r26, 0x03	; 3
    2d9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d9c:	fe 01       	movw	r30, r28
    2d9e:	ef 5f       	subi	r30, 0xFF	; 255
    2da0:	fe 4f       	sbci	r31, 0xFE	; 254
    2da2:	80 81       	ld	r24, Z
    2da4:	91 81       	ldd	r25, Z+1	; 0x01
    2da6:	8d 93       	st	X+, r24
    2da8:	9c 93       	st	X, r25
    2daa:	fe 01       	movw	r30, r28
    2dac:	e3 50       	subi	r30, 0x03	; 3
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	80 81       	ld	r24, Z
    2db2:	91 81       	ldd	r25, Z+1	; 0x01
    2db4:	01 97       	sbiw	r24, 0x01	; 1
    2db6:	f1 f7       	brne	.-4      	; 0x2db4 <main+0xaf0>
    2db8:	fe 01       	movw	r30, r28
    2dba:	e3 50       	subi	r30, 0x03	; 3
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    			i=0;
    	}
    }
	//Entering Password
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	for(u8 j=1;j<4;j++){
    2dc8:	fe 01       	movw	r30, r28
    2dca:	ec 5a       	subi	r30, 0xAC	; 172
    2dcc:	fe 4f       	sbci	r31, 0xFE	; 254
    2dce:	81 e0       	ldi	r24, 0x01	; 1
    2dd0:	80 83       	st	Z, r24
    2dd2:	60 c4       	rjmp	.+2240   	; 0x3694 <main+0x13d0>
	    LCD_Send_String("Enter your");
    2dd4:	80 e6       	ldi	r24, 0x60	; 96
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
		LCD_GOTOXY(0,1);
    2ddc:	80 e0       	ldi	r24, 0x00	; 0
    2dde:	61 e0       	ldi	r22, 0x01	; 1
    2de0:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
	    LCD_Send_String("Password");
    2de4:	85 ec       	ldi	r24, 0xC5	; 197
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    2dec:	fe 01       	movw	r30, r28
    2dee:	e7 50       	subi	r30, 0x07	; 7
    2df0:	ff 4f       	sbci	r31, 0xFF	; 255
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	90 e8       	ldi	r25, 0x80	; 128
    2df6:	ab e3       	ldi	r26, 0x3B	; 59
    2df8:	b5 e4       	ldi	r27, 0x45	; 69
    2dfa:	80 83       	st	Z, r24
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	a2 83       	std	Z+2, r26	; 0x02
    2e00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e02:	8e 01       	movw	r16, r28
    2e04:	0b 50       	subi	r16, 0x0B	; 11
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e7 50       	subi	r30, 0x07	; 7
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	20 e0       	ldi	r18, 0x00	; 0
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	4a ef       	ldi	r20, 0xFA	; 250
    2e1c:	54 e4       	ldi	r21, 0x44	; 68
    2e1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	f8 01       	movw	r30, r16
    2e28:	80 83       	st	Z, r24
    2e2a:	91 83       	std	Z+1, r25	; 0x01
    2e2c:	a2 83       	std	Z+2, r26	; 0x02
    2e2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2e30:	fe 01       	movw	r30, r28
    2e32:	eb 50       	subi	r30, 0x0B	; 11
    2e34:	ff 4f       	sbci	r31, 0xFF	; 255
    2e36:	60 81       	ld	r22, Z
    2e38:	71 81       	ldd	r23, Z+1	; 0x01
    2e3a:	82 81       	ldd	r24, Z+2	; 0x02
    2e3c:	93 81       	ldd	r25, Z+3	; 0x03
    2e3e:	20 e0       	ldi	r18, 0x00	; 0
    2e40:	30 e0       	ldi	r19, 0x00	; 0
    2e42:	40 e8       	ldi	r20, 0x80	; 128
    2e44:	5f e3       	ldi	r21, 0x3F	; 63
    2e46:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e4a:	88 23       	and	r24, r24
    2e4c:	44 f4       	brge	.+16     	; 0x2e5e <main+0xb9a>
		__ticks = 1;
    2e4e:	fe 01       	movw	r30, r28
    2e50:	ed 50       	subi	r30, 0x0D	; 13
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	81 e0       	ldi	r24, 0x01	; 1
    2e56:	90 e0       	ldi	r25, 0x00	; 0
    2e58:	91 83       	std	Z+1, r25	; 0x01
    2e5a:	80 83       	st	Z, r24
    2e5c:	64 c0       	rjmp	.+200    	; 0x2f26 <main+0xc62>
	else if (__tmp > 65535)
    2e5e:	fe 01       	movw	r30, r28
    2e60:	eb 50       	subi	r30, 0x0B	; 11
    2e62:	ff 4f       	sbci	r31, 0xFF	; 255
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	3f ef       	ldi	r19, 0xFF	; 255
    2e70:	4f e7       	ldi	r20, 0x7F	; 127
    2e72:	57 e4       	ldi	r21, 0x47	; 71
    2e74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e78:	18 16       	cp	r1, r24
    2e7a:	0c f0       	brlt	.+2      	; 0x2e7e <main+0xbba>
    2e7c:	43 c0       	rjmp	.+134    	; 0x2f04 <main+0xc40>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e7e:	fe 01       	movw	r30, r28
    2e80:	e7 50       	subi	r30, 0x07	; 7
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	60 81       	ld	r22, Z
    2e86:	71 81       	ldd	r23, Z+1	; 0x01
    2e88:	82 81       	ldd	r24, Z+2	; 0x02
    2e8a:	93 81       	ldd	r25, Z+3	; 0x03
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 e2       	ldi	r20, 0x20	; 32
    2e92:	51 e4       	ldi	r21, 0x41	; 65
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8e 01       	movw	r16, r28
    2e9e:	0d 50       	subi	r16, 0x0D	; 13
    2ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	f8 01       	movw	r30, r16
    2eb0:	91 83       	std	Z+1, r25	; 0x01
    2eb2:	80 83       	st	Z, r24
    2eb4:	1f c0       	rjmp	.+62     	; 0x2ef4 <main+0xc30>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ef 50       	subi	r30, 0x0F	; 15
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	88 ec       	ldi	r24, 0xC8	; 200
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	91 83       	std	Z+1, r25	; 0x01
    2ec2:	80 83       	st	Z, r24
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ef 50       	subi	r30, 0x0F	; 15
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	80 81       	ld	r24, Z
    2ecc:	91 81       	ldd	r25, Z+1	; 0x01
    2ece:	01 97       	sbiw	r24, 0x01	; 1
    2ed0:	f1 f7       	brne	.-4      	; 0x2ece <main+0xc0a>
    2ed2:	fe 01       	movw	r30, r28
    2ed4:	ef 50       	subi	r30, 0x0F	; 15
    2ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed8:	91 83       	std	Z+1, r25	; 0x01
    2eda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2edc:	de 01       	movw	r26, r28
    2ede:	ad 50       	subi	r26, 0x0D	; 13
    2ee0:	bf 4f       	sbci	r27, 0xFF	; 255
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	ed 50       	subi	r30, 0x0D	; 13
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 81       	ld	r24, Z
    2eea:	91 81       	ldd	r25, Z+1	; 0x01
    2eec:	01 97       	sbiw	r24, 0x01	; 1
    2eee:	11 96       	adiw	r26, 0x01	; 1
    2ef0:	9c 93       	st	X, r25
    2ef2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ed 50       	subi	r30, 0x0D	; 13
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	80 81       	ld	r24, Z
    2efc:	91 81       	ldd	r25, Z+1	; 0x01
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	d1 f6       	brne	.-76     	; 0x2eb6 <main+0xbf2>
    2f02:	27 c0       	rjmp	.+78     	; 0x2f52 <main+0xc8e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	8e 01       	movw	r16, r28
    2f06:	0d 50       	subi	r16, 0x0D	; 13
    2f08:	1f 4f       	sbci	r17, 0xFF	; 255
    2f0a:	fe 01       	movw	r30, r28
    2f0c:	eb 50       	subi	r30, 0x0B	; 11
    2f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f10:	60 81       	ld	r22, Z
    2f12:	71 81       	ldd	r23, Z+1	; 0x01
    2f14:	82 81       	ldd	r24, Z+2	; 0x02
    2f16:	93 81       	ldd	r25, Z+3	; 0x03
    2f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1c:	dc 01       	movw	r26, r24
    2f1e:	cb 01       	movw	r24, r22
    2f20:	f8 01       	movw	r30, r16
    2f22:	91 83       	std	Z+1, r25	; 0x01
    2f24:	80 83       	st	Z, r24
    2f26:	de 01       	movw	r26, r28
    2f28:	a1 51       	subi	r26, 0x11	; 17
    2f2a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f2c:	fe 01       	movw	r30, r28
    2f2e:	ed 50       	subi	r30, 0x0D	; 13
    2f30:	ff 4f       	sbci	r31, 0xFF	; 255
    2f32:	80 81       	ld	r24, Z
    2f34:	91 81       	ldd	r25, Z+1	; 0x01
    2f36:	8d 93       	st	X+, r24
    2f38:	9c 93       	st	X, r25
    2f3a:	fe 01       	movw	r30, r28
    2f3c:	e1 51       	subi	r30, 0x11	; 17
    2f3e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f40:	80 81       	ld	r24, Z
    2f42:	91 81       	ldd	r25, Z+1	; 0x01
    2f44:	01 97       	sbiw	r24, 0x01	; 1
    2f46:	f1 f7       	brne	.-4      	; 0x2f44 <main+0xc80>
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e1 51       	subi	r30, 0x11	; 17
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
	    _delay_ms(3000);
	    LCD8Bit_Send_Command(0x01);
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
	    LCD_Send_String("Password:");
    2f58:	8e ec       	ldi	r24, 0xCE	; 206
    2f5a:	90 e0       	ldi	r25, 0x00	; 0
    2f5c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
		BluetoothRead(password_input);
    2f60:	8a e2       	ldi	r24, 0x2A	; 42
    2f62:	93 e0       	ldi	r25, 0x03	; 3
    2f64:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <BluetoothRead>
		for(u8 i = 0;i<10;i++){
    2f68:	fe 01       	movw	r30, r28
    2f6a:	ed 5a       	subi	r30, 0xAD	; 173
    2f6c:	fe 4f       	sbci	r31, 0xFE	; 254
    2f6e:	10 82       	st	Z, r1
    2f70:	e6 c0       	rjmp	.+460    	; 0x313e <main+0xe7a>
		if(strcmp(password_input,users[i].password)==0){
    2f72:	fe 01       	movw	r30, r28
    2f74:	ed 5a       	subi	r30, 0xAD	; 173
    2f76:	fe 4f       	sbci	r31, 0xFE	; 254
    2f78:	80 81       	ld	r24, Z
    2f7a:	88 2f       	mov	r24, r24
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	9c 01       	movw	r18, r24
    2f84:	22 0f       	add	r18, r18
    2f86:	33 1f       	adc	r19, r19
    2f88:	22 0f       	add	r18, r18
    2f8a:	33 1f       	adc	r19, r19
    2f8c:	82 0f       	add	r24, r18
    2f8e:	93 1f       	adc	r25, r19
    2f90:	05 96       	adiw	r24, 0x05	; 5
    2f92:	9c 01       	movw	r18, r24
    2f94:	26 54       	subi	r18, 0x46	; 70
    2f96:	3d 4f       	sbci	r19, 0xFD	; 253
    2f98:	8a e2       	ldi	r24, 0x2A	; 42
    2f9a:	93 e0       	ldi	r25, 0x03	; 3
    2f9c:	b9 01       	movw	r22, r18
    2f9e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    2fa2:	00 97       	sbiw	r24, 0x00	; 0
    2fa4:	09 f0       	breq	.+2      	; 0x2fa8 <main+0xce4>
    2fa6:	c2 c0       	rjmp	.+388    	; 0x312c <main+0xe68>
		    LCD8Bit_Send_Command(0x01);
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
		    LCD_Send_String("OK");
    2fae:	8e e7       	ldi	r24, 0x7E	; 126
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
		    passnum = i;
    2fb6:	fe 01       	movw	r30, r28
    2fb8:	ed 5a       	subi	r30, 0xAD	; 173
    2fba:	fe 4f       	sbci	r31, 0xFE	; 254
    2fbc:	80 81       	ld	r24, Z
    2fbe:	80 93 20 03 	sts	0x0320, r24
    2fc2:	fe 01       	movw	r30, r28
    2fc4:	e5 51       	subi	r30, 0x15	; 21
    2fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e8       	ldi	r25, 0x80	; 128
    2fcc:	ab e3       	ldi	r26, 0x3B	; 59
    2fce:	b5 e4       	ldi	r27, 0x45	; 69
    2fd0:	80 83       	st	Z, r24
    2fd2:	91 83       	std	Z+1, r25	; 0x01
    2fd4:	a2 83       	std	Z+2, r26	; 0x02
    2fd6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd8:	8e 01       	movw	r16, r28
    2fda:	09 51       	subi	r16, 0x19	; 25
    2fdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fde:	fe 01       	movw	r30, r28
    2fe0:	e5 51       	subi	r30, 0x15	; 21
    2fe2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe4:	60 81       	ld	r22, Z
    2fe6:	71 81       	ldd	r23, Z+1	; 0x01
    2fe8:	82 81       	ldd	r24, Z+2	; 0x02
    2fea:	93 81       	ldd	r25, Z+3	; 0x03
    2fec:	20 e0       	ldi	r18, 0x00	; 0
    2fee:	30 e0       	ldi	r19, 0x00	; 0
    2ff0:	4a ef       	ldi	r20, 0xFA	; 250
    2ff2:	54 e4       	ldi	r21, 0x44	; 68
    2ff4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff8:	dc 01       	movw	r26, r24
    2ffa:	cb 01       	movw	r24, r22
    2ffc:	f8 01       	movw	r30, r16
    2ffe:	80 83       	st	Z, r24
    3000:	91 83       	std	Z+1, r25	; 0x01
    3002:	a2 83       	std	Z+2, r26	; 0x02
    3004:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3006:	fe 01       	movw	r30, r28
    3008:	e9 51       	subi	r30, 0x19	; 25
    300a:	ff 4f       	sbci	r31, 0xFF	; 255
    300c:	60 81       	ld	r22, Z
    300e:	71 81       	ldd	r23, Z+1	; 0x01
    3010:	82 81       	ldd	r24, Z+2	; 0x02
    3012:	93 81       	ldd	r25, Z+3	; 0x03
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e8       	ldi	r20, 0x80	; 128
    301a:	5f e3       	ldi	r21, 0x3F	; 63
    301c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3020:	88 23       	and	r24, r24
    3022:	44 f4       	brge	.+16     	; 0x3034 <main+0xd70>
		__ticks = 1;
    3024:	fe 01       	movw	r30, r28
    3026:	eb 51       	subi	r30, 0x1B	; 27
    3028:	ff 4f       	sbci	r31, 0xFF	; 255
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	91 83       	std	Z+1, r25	; 0x01
    3030:	80 83       	st	Z, r24
    3032:	64 c0       	rjmp	.+200    	; 0x30fc <main+0xe38>
	else if (__tmp > 65535)
    3034:	fe 01       	movw	r30, r28
    3036:	e9 51       	subi	r30, 0x19	; 25
    3038:	ff 4f       	sbci	r31, 0xFF	; 255
    303a:	60 81       	ld	r22, Z
    303c:	71 81       	ldd	r23, Z+1	; 0x01
    303e:	82 81       	ldd	r24, Z+2	; 0x02
    3040:	93 81       	ldd	r25, Z+3	; 0x03
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	3f ef       	ldi	r19, 0xFF	; 255
    3046:	4f e7       	ldi	r20, 0x7F	; 127
    3048:	57 e4       	ldi	r21, 0x47	; 71
    304a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    304e:	18 16       	cp	r1, r24
    3050:	0c f0       	brlt	.+2      	; 0x3054 <main+0xd90>
    3052:	43 c0       	rjmp	.+134    	; 0x30da <main+0xe16>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	fe 01       	movw	r30, r28
    3056:	e5 51       	subi	r30, 0x15	; 21
    3058:	ff 4f       	sbci	r31, 0xFF	; 255
    305a:	60 81       	ld	r22, Z
    305c:	71 81       	ldd	r23, Z+1	; 0x01
    305e:	82 81       	ldd	r24, Z+2	; 0x02
    3060:	93 81       	ldd	r25, Z+3	; 0x03
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	40 e2       	ldi	r20, 0x20	; 32
    3068:	51 e4       	ldi	r21, 0x41	; 65
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	8e 01       	movw	r16, r28
    3074:	0b 51       	subi	r16, 0x1B	; 27
    3076:	1f 4f       	sbci	r17, 0xFF	; 255
    3078:	bc 01       	movw	r22, r24
    307a:	cd 01       	movw	r24, r26
    307c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3080:	dc 01       	movw	r26, r24
    3082:	cb 01       	movw	r24, r22
    3084:	f8 01       	movw	r30, r16
    3086:	91 83       	std	Z+1, r25	; 0x01
    3088:	80 83       	st	Z, r24
    308a:	1f c0       	rjmp	.+62     	; 0x30ca <main+0xe06>
    308c:	fe 01       	movw	r30, r28
    308e:	ed 51       	subi	r30, 0x1D	; 29
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	88 ec       	ldi	r24, 0xC8	; 200
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	91 83       	std	Z+1, r25	; 0x01
    3098:	80 83       	st	Z, r24
    309a:	fe 01       	movw	r30, r28
    309c:	ed 51       	subi	r30, 0x1D	; 29
    309e:	ff 4f       	sbci	r31, 0xFF	; 255
    30a0:	80 81       	ld	r24, Z
    30a2:	91 81       	ldd	r25, Z+1	; 0x01
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <main+0xde0>
    30a8:	fe 01       	movw	r30, r28
    30aa:	ed 51       	subi	r30, 0x1D	; 29
    30ac:	ff 4f       	sbci	r31, 0xFF	; 255
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30b2:	de 01       	movw	r26, r28
    30b4:	ab 51       	subi	r26, 0x1B	; 27
    30b6:	bf 4f       	sbci	r27, 0xFF	; 255
    30b8:	fe 01       	movw	r30, r28
    30ba:	eb 51       	subi	r30, 0x1B	; 27
    30bc:	ff 4f       	sbci	r31, 0xFF	; 255
    30be:	80 81       	ld	r24, Z
    30c0:	91 81       	ldd	r25, Z+1	; 0x01
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	11 96       	adiw	r26, 0x01	; 1
    30c6:	9c 93       	st	X, r25
    30c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ca:	fe 01       	movw	r30, r28
    30cc:	eb 51       	subi	r30, 0x1B	; 27
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	80 81       	ld	r24, Z
    30d2:	91 81       	ldd	r25, Z+1	; 0x01
    30d4:	00 97       	sbiw	r24, 0x00	; 0
    30d6:	d1 f6       	brne	.-76     	; 0x308c <main+0xdc8>
    30d8:	39 c0       	rjmp	.+114    	; 0x314c <main+0xe88>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30da:	8e 01       	movw	r16, r28
    30dc:	0b 51       	subi	r16, 0x1B	; 27
    30de:	1f 4f       	sbci	r17, 0xFF	; 255
    30e0:	fe 01       	movw	r30, r28
    30e2:	e9 51       	subi	r30, 0x19	; 25
    30e4:	ff 4f       	sbci	r31, 0xFF	; 255
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30f2:	dc 01       	movw	r26, r24
    30f4:	cb 01       	movw	r24, r22
    30f6:	f8 01       	movw	r30, r16
    30f8:	91 83       	std	Z+1, r25	; 0x01
    30fa:	80 83       	st	Z, r24
    30fc:	de 01       	movw	r26, r28
    30fe:	af 51       	subi	r26, 0x1F	; 31
    3100:	bf 4f       	sbci	r27, 0xFF	; 255
    3102:	fe 01       	movw	r30, r28
    3104:	eb 51       	subi	r30, 0x1B	; 27
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	80 81       	ld	r24, Z
    310a:	91 81       	ldd	r25, Z+1	; 0x01
    310c:	11 96       	adiw	r26, 0x01	; 1
    310e:	9c 93       	st	X, r25
    3110:	8e 93       	st	-X, r24
    3112:	fe 01       	movw	r30, r28
    3114:	ef 51       	subi	r30, 0x1F	; 31
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	80 81       	ld	r24, Z
    311a:	91 81       	ldd	r25, Z+1	; 0x01
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	f1 f7       	brne	.-4      	; 0x311c <main+0xe58>
    3120:	fe 01       	movw	r30, r28
    3122:	ef 51       	subi	r30, 0x1F	; 31
    3124:	ff 4f       	sbci	r31, 0xFF	; 255
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
    312a:	10 c0       	rjmp	.+32     	; 0x314c <main+0xe88>
	    LCD_Send_String("Password");
	    _delay_ms(3000);
	    LCD8Bit_Send_Command(0x01);
	    LCD_Send_String("Password:");
		BluetoothRead(password_input);
		for(u8 i = 0;i<10;i++){
    312c:	de 01       	movw	r26, r28
    312e:	ad 5a       	subi	r26, 0xAD	; 173
    3130:	be 4f       	sbci	r27, 0xFE	; 254
    3132:	fe 01       	movw	r30, r28
    3134:	ed 5a       	subi	r30, 0xAD	; 173
    3136:	fe 4f       	sbci	r31, 0xFE	; 254
    3138:	80 81       	ld	r24, Z
    313a:	8f 5f       	subi	r24, 0xFF	; 255
    313c:	8c 93       	st	X, r24
    313e:	fe 01       	movw	r30, r28
    3140:	ed 5a       	subi	r30, 0xAD	; 173
    3142:	fe 4f       	sbci	r31, 0xFE	; 254
    3144:	80 81       	ld	r24, Z
    3146:	8a 30       	cpi	r24, 0x0A	; 10
    3148:	08 f4       	brcc	.+2      	; 0x314c <main+0xe88>
    314a:	13 cf       	rjmp	.-474    	; 0x2f72 <main+0xcae>
		    passnum = i;
		    _delay_ms(3000);
		    break;
		    }
		  }
		if(passnum <10 && passnum>=0){
    314c:	80 91 20 03 	lds	r24, 0x0320
    3150:	8a 30       	cpi	r24, 0x0A	; 10
    3152:	08 f4       	brcc	.+2      	; 0x3156 <main+0xe92>
    3154:	c5 c2       	rjmp	.+1418   	; 0x36e0 <main+0x141c>
	      break;
		 }
		if((passnum >9 ||passnum<0) && j<3){
    3156:	80 91 20 03 	lds	r24, 0x0320
    315a:	8a 30       	cpi	r24, 0x0A	; 10
    315c:	08 f4       	brcc	.+2      	; 0x3160 <main+0xe9c>
    315e:	d8 c0       	rjmp	.+432    	; 0x3310 <main+0x104c>
    3160:	fe 01       	movw	r30, r28
    3162:	ec 5a       	subi	r30, 0xAC	; 172
    3164:	fe 4f       	sbci	r31, 0xFE	; 254
    3166:	80 81       	ld	r24, Z
    3168:	83 30       	cpi	r24, 0x03	; 3
    316a:	08 f0       	brcs	.+2      	; 0x316e <main+0xeaa>
    316c:	d1 c0       	rjmp	.+418    	; 0x3310 <main+0x104c>
		    LCD8Bit_Send_Command(0x01);
    316e:	81 e0       	ldi	r24, 0x01	; 1
    3170:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
		    LCD_Send_String("Wrong Password");
    3174:	88 ed       	ldi	r24, 0xD8	; 216
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
			LCD_GOTOXY(0,1);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	61 e0       	ldi	r22, 0x01	; 1
    3180:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
			LCD_Send_Int(3-j);
    3184:	fe 01       	movw	r30, r28
    3186:	ec 5a       	subi	r30, 0xAC	; 172
    3188:	fe 4f       	sbci	r31, 0xFE	; 254
    318a:	80 81       	ld	r24, Z
    318c:	28 2f       	mov	r18, r24
    318e:	30 e0       	ldi	r19, 0x00	; 0
    3190:	83 e0       	ldi	r24, 0x03	; 3
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	82 1b       	sub	r24, r18
    3196:	93 0b       	sbc	r25, r19
    3198:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
		    LCD_Send_String(" tries left!");
    319c:	80 e9       	ldi	r24, 0x90	; 144
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    31a4:	fe 01       	movw	r30, r28
    31a6:	e3 52       	subi	r30, 0x23	; 35
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	80 e0       	ldi	r24, 0x00	; 0
    31ac:	90 e4       	ldi	r25, 0x40	; 64
    31ae:	ac e9       	ldi	r26, 0x9C	; 156
    31b0:	b5 e4       	ldi	r27, 0x45	; 69
    31b2:	80 83       	st	Z, r24
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	a2 83       	std	Z+2, r26	; 0x02
    31b8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31ba:	8e 01       	movw	r16, r28
    31bc:	07 52       	subi	r16, 0x27	; 39
    31be:	1f 4f       	sbci	r17, 0xFF	; 255
    31c0:	fe 01       	movw	r30, r28
    31c2:	e3 52       	subi	r30, 0x23	; 35
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	4a ef       	ldi	r20, 0xFA	; 250
    31d4:	54 e4       	ldi	r21, 0x44	; 68
    31d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31da:	dc 01       	movw	r26, r24
    31dc:	cb 01       	movw	r24, r22
    31de:	f8 01       	movw	r30, r16
    31e0:	80 83       	st	Z, r24
    31e2:	91 83       	std	Z+1, r25	; 0x01
    31e4:	a2 83       	std	Z+2, r26	; 0x02
    31e6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    31e8:	fe 01       	movw	r30, r28
    31ea:	e7 52       	subi	r30, 0x27	; 39
    31ec:	ff 4f       	sbci	r31, 0xFF	; 255
    31ee:	60 81       	ld	r22, Z
    31f0:	71 81       	ldd	r23, Z+1	; 0x01
    31f2:	82 81       	ldd	r24, Z+2	; 0x02
    31f4:	93 81       	ldd	r25, Z+3	; 0x03
    31f6:	20 e0       	ldi	r18, 0x00	; 0
    31f8:	30 e0       	ldi	r19, 0x00	; 0
    31fa:	40 e8       	ldi	r20, 0x80	; 128
    31fc:	5f e3       	ldi	r21, 0x3F	; 63
    31fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3202:	88 23       	and	r24, r24
    3204:	44 f4       	brge	.+16     	; 0x3216 <main+0xf52>
		__ticks = 1;
    3206:	fe 01       	movw	r30, r28
    3208:	e9 52       	subi	r30, 0x29	; 41
    320a:	ff 4f       	sbci	r31, 0xFF	; 255
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	91 83       	std	Z+1, r25	; 0x01
    3212:	80 83       	st	Z, r24
    3214:	64 c0       	rjmp	.+200    	; 0x32de <main+0x101a>
	else if (__tmp > 65535)
    3216:	fe 01       	movw	r30, r28
    3218:	e7 52       	subi	r30, 0x27	; 39
    321a:	ff 4f       	sbci	r31, 0xFF	; 255
    321c:	60 81       	ld	r22, Z
    321e:	71 81       	ldd	r23, Z+1	; 0x01
    3220:	82 81       	ldd	r24, Z+2	; 0x02
    3222:	93 81       	ldd	r25, Z+3	; 0x03
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	0c f0       	brlt	.+2      	; 0x3236 <main+0xf72>
    3234:	43 c0       	rjmp	.+134    	; 0x32bc <main+0xff8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3236:	fe 01       	movw	r30, r28
    3238:	e3 52       	subi	r30, 0x23	; 35
    323a:	ff 4f       	sbci	r31, 0xFF	; 255
    323c:	60 81       	ld	r22, Z
    323e:	71 81       	ldd	r23, Z+1	; 0x01
    3240:	82 81       	ldd	r24, Z+2	; 0x02
    3242:	93 81       	ldd	r25, Z+3	; 0x03
    3244:	20 e0       	ldi	r18, 0x00	; 0
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	40 e2       	ldi	r20, 0x20	; 32
    324a:	51 e4       	ldi	r21, 0x41	; 65
    324c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	8e 01       	movw	r16, r28
    3256:	09 52       	subi	r16, 0x29	; 41
    3258:	1f 4f       	sbci	r17, 0xFF	; 255
    325a:	bc 01       	movw	r22, r24
    325c:	cd 01       	movw	r24, r26
    325e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3262:	dc 01       	movw	r26, r24
    3264:	cb 01       	movw	r24, r22
    3266:	f8 01       	movw	r30, r16
    3268:	91 83       	std	Z+1, r25	; 0x01
    326a:	80 83       	st	Z, r24
    326c:	1f c0       	rjmp	.+62     	; 0x32ac <main+0xfe8>
    326e:	fe 01       	movw	r30, r28
    3270:	eb 52       	subi	r30, 0x2B	; 43
    3272:	ff 4f       	sbci	r31, 0xFF	; 255
    3274:	88 ec       	ldi	r24, 0xC8	; 200
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	91 83       	std	Z+1, r25	; 0x01
    327a:	80 83       	st	Z, r24
    327c:	fe 01       	movw	r30, r28
    327e:	eb 52       	subi	r30, 0x2B	; 43
    3280:	ff 4f       	sbci	r31, 0xFF	; 255
    3282:	80 81       	ld	r24, Z
    3284:	91 81       	ldd	r25, Z+1	; 0x01
    3286:	01 97       	sbiw	r24, 0x01	; 1
    3288:	f1 f7       	brne	.-4      	; 0x3286 <main+0xfc2>
    328a:	fe 01       	movw	r30, r28
    328c:	eb 52       	subi	r30, 0x2B	; 43
    328e:	ff 4f       	sbci	r31, 0xFF	; 255
    3290:	91 83       	std	Z+1, r25	; 0x01
    3292:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3294:	de 01       	movw	r26, r28
    3296:	a9 52       	subi	r26, 0x29	; 41
    3298:	bf 4f       	sbci	r27, 0xFF	; 255
    329a:	fe 01       	movw	r30, r28
    329c:	e9 52       	subi	r30, 0x29	; 41
    329e:	ff 4f       	sbci	r31, 0xFF	; 255
    32a0:	80 81       	ld	r24, Z
    32a2:	91 81       	ldd	r25, Z+1	; 0x01
    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	11 96       	adiw	r26, 0x01	; 1
    32a8:	9c 93       	st	X, r25
    32aa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32ac:	fe 01       	movw	r30, r28
    32ae:	e9 52       	subi	r30, 0x29	; 41
    32b0:	ff 4f       	sbci	r31, 0xFF	; 255
    32b2:	80 81       	ld	r24, Z
    32b4:	91 81       	ldd	r25, Z+1	; 0x01
    32b6:	00 97       	sbiw	r24, 0x00	; 0
    32b8:	d1 f6       	brne	.-76     	; 0x326e <main+0xfaa>
    32ba:	27 c0       	rjmp	.+78     	; 0x330a <main+0x1046>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32bc:	8e 01       	movw	r16, r28
    32be:	09 52       	subi	r16, 0x29	; 41
    32c0:	1f 4f       	sbci	r17, 0xFF	; 255
    32c2:	fe 01       	movw	r30, r28
    32c4:	e7 52       	subi	r30, 0x27	; 39
    32c6:	ff 4f       	sbci	r31, 0xFF	; 255
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	f8 01       	movw	r30, r16
    32da:	91 83       	std	Z+1, r25	; 0x01
    32dc:	80 83       	st	Z, r24
    32de:	de 01       	movw	r26, r28
    32e0:	ad 52       	subi	r26, 0x2D	; 45
    32e2:	bf 4f       	sbci	r27, 0xFF	; 255
    32e4:	fe 01       	movw	r30, r28
    32e6:	e9 52       	subi	r30, 0x29	; 41
    32e8:	ff 4f       	sbci	r31, 0xFF	; 255
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	8d 93       	st	X+, r24
    32f0:	9c 93       	st	X, r25
    32f2:	fe 01       	movw	r30, r28
    32f4:	ed 52       	subi	r30, 0x2D	; 45
    32f6:	ff 4f       	sbci	r31, 0xFF	; 255
    32f8:	80 81       	ld	r24, Z
    32fa:	91 81       	ldd	r25, Z+1	; 0x01
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <main+0x1038>
    3300:	fe 01       	movw	r30, r28
    3302:	ed 52       	subi	r30, 0x2D	; 45
    3304:	ff 4f       	sbci	r31, 0xFF	; 255
    3306:	91 83       	std	Z+1, r25	; 0x01
    3308:	80 83       	st	Z, r24
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>

		 }
		if(j==3 &&(passnum >9 ||passnum<0)){
    3310:	fe 01       	movw	r30, r28
    3312:	ec 5a       	subi	r30, 0xAC	; 172
    3314:	fe 4f       	sbci	r31, 0xFE	; 254
    3316:	80 81       	ld	r24, Z
    3318:	83 30       	cpi	r24, 0x03	; 3
    331a:	09 f0       	breq	.+2      	; 0x331e <main+0x105a>
    331c:	b2 c1       	rjmp	.+868    	; 0x3682 <main+0x13be>
    331e:	80 91 20 03 	lds	r24, 0x0320
    3322:	8a 30       	cpi	r24, 0x0A	; 10
    3324:	08 f4       	brcc	.+2      	; 0x3328 <main+0x1064>
    3326:	ad c1       	rjmp	.+858    	; 0x3682 <main+0x13be>
		    LCD8Bit_Send_Command(0x01);
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
		    LCD_Send_String("Wrong Password");
    332e:	88 ed       	ldi	r24, 0xD8	; 216
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
			LCD_GOTOXY(0,1);
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	61 e0       	ldi	r22, 0x01	; 1
    333a:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
		    LCD_Send_String("No tries left!");
    333e:	8d e9       	ldi	r24, 0x9D	; 157
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    3346:	fe 01       	movw	r30, r28
    3348:	e1 53       	subi	r30, 0x31	; 49
    334a:	ff 4f       	sbci	r31, 0xFF	; 255
    334c:	80 e0       	ldi	r24, 0x00	; 0
    334e:	90 e4       	ldi	r25, 0x40	; 64
    3350:	ac e9       	ldi	r26, 0x9C	; 156
    3352:	b5 e4       	ldi	r27, 0x45	; 69
    3354:	80 83       	st	Z, r24
    3356:	91 83       	std	Z+1, r25	; 0x01
    3358:	a2 83       	std	Z+2, r26	; 0x02
    335a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    335c:	8e 01       	movw	r16, r28
    335e:	05 53       	subi	r16, 0x35	; 53
    3360:	1f 4f       	sbci	r17, 0xFF	; 255
    3362:	fe 01       	movw	r30, r28
    3364:	e1 53       	subi	r30, 0x31	; 49
    3366:	ff 4f       	sbci	r31, 0xFF	; 255
    3368:	60 81       	ld	r22, Z
    336a:	71 81       	ldd	r23, Z+1	; 0x01
    336c:	82 81       	ldd	r24, Z+2	; 0x02
    336e:	93 81       	ldd	r25, Z+3	; 0x03
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	4a ef       	ldi	r20, 0xFA	; 250
    3376:	54 e4       	ldi	r21, 0x44	; 68
    3378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	80 83       	st	Z, r24
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	a2 83       	std	Z+2, r26	; 0x02
    3388:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    338a:	fe 01       	movw	r30, r28
    338c:	e5 53       	subi	r30, 0x35	; 53
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	60 81       	ld	r22, Z
    3392:	71 81       	ldd	r23, Z+1	; 0x01
    3394:	82 81       	ldd	r24, Z+2	; 0x02
    3396:	93 81       	ldd	r25, Z+3	; 0x03
    3398:	20 e0       	ldi	r18, 0x00	; 0
    339a:	30 e0       	ldi	r19, 0x00	; 0
    339c:	40 e8       	ldi	r20, 0x80	; 128
    339e:	5f e3       	ldi	r21, 0x3F	; 63
    33a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33a4:	88 23       	and	r24, r24
    33a6:	44 f4       	brge	.+16     	; 0x33b8 <main+0x10f4>
		__ticks = 1;
    33a8:	fe 01       	movw	r30, r28
    33aa:	e7 53       	subi	r30, 0x37	; 55
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	81 e0       	ldi	r24, 0x01	; 1
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	91 83       	std	Z+1, r25	; 0x01
    33b4:	80 83       	st	Z, r24
    33b6:	64 c0       	rjmp	.+200    	; 0x3480 <main+0x11bc>
	else if (__tmp > 65535)
    33b8:	fe 01       	movw	r30, r28
    33ba:	e5 53       	subi	r30, 0x35	; 53
    33bc:	ff 4f       	sbci	r31, 0xFF	; 255
    33be:	60 81       	ld	r22, Z
    33c0:	71 81       	ldd	r23, Z+1	; 0x01
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 e0       	ldi	r18, 0x00	; 0
    33c8:	3f ef       	ldi	r19, 0xFF	; 255
    33ca:	4f e7       	ldi	r20, 0x7F	; 127
    33cc:	57 e4       	ldi	r21, 0x47	; 71
    33ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d2:	18 16       	cp	r1, r24
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <main+0x1114>
    33d6:	43 c0       	rjmp	.+134    	; 0x345e <main+0x119a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d8:	fe 01       	movw	r30, r28
    33da:	e1 53       	subi	r30, 0x31	; 49
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e2       	ldi	r20, 0x20	; 32
    33ec:	51 e4       	ldi	r21, 0x41	; 65
    33ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	8e 01       	movw	r16, r28
    33f8:	07 53       	subi	r16, 0x37	; 55
    33fa:	1f 4f       	sbci	r17, 0xFF	; 255
    33fc:	bc 01       	movw	r22, r24
    33fe:	cd 01       	movw	r24, r26
    3400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3404:	dc 01       	movw	r26, r24
    3406:	cb 01       	movw	r24, r22
    3408:	f8 01       	movw	r30, r16
    340a:	91 83       	std	Z+1, r25	; 0x01
    340c:	80 83       	st	Z, r24
    340e:	1f c0       	rjmp	.+62     	; 0x344e <main+0x118a>
    3410:	fe 01       	movw	r30, r28
    3412:	e9 53       	subi	r30, 0x39	; 57
    3414:	ff 4f       	sbci	r31, 0xFF	; 255
    3416:	88 ec       	ldi	r24, 0xC8	; 200
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	91 83       	std	Z+1, r25	; 0x01
    341c:	80 83       	st	Z, r24
    341e:	fe 01       	movw	r30, r28
    3420:	e9 53       	subi	r30, 0x39	; 57
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	80 81       	ld	r24, Z
    3426:	91 81       	ldd	r25, Z+1	; 0x01
    3428:	01 97       	sbiw	r24, 0x01	; 1
    342a:	f1 f7       	brne	.-4      	; 0x3428 <main+0x1164>
    342c:	fe 01       	movw	r30, r28
    342e:	e9 53       	subi	r30, 0x39	; 57
    3430:	ff 4f       	sbci	r31, 0xFF	; 255
    3432:	91 83       	std	Z+1, r25	; 0x01
    3434:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3436:	de 01       	movw	r26, r28
    3438:	a7 53       	subi	r26, 0x37	; 55
    343a:	bf 4f       	sbci	r27, 0xFF	; 255
    343c:	fe 01       	movw	r30, r28
    343e:	e7 53       	subi	r30, 0x37	; 55
    3440:	ff 4f       	sbci	r31, 0xFF	; 255
    3442:	80 81       	ld	r24, Z
    3444:	91 81       	ldd	r25, Z+1	; 0x01
    3446:	01 97       	sbiw	r24, 0x01	; 1
    3448:	11 96       	adiw	r26, 0x01	; 1
    344a:	9c 93       	st	X, r25
    344c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    344e:	fe 01       	movw	r30, r28
    3450:	e7 53       	subi	r30, 0x37	; 55
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	80 81       	ld	r24, Z
    3456:	91 81       	ldd	r25, Z+1	; 0x01
    3458:	00 97       	sbiw	r24, 0x00	; 0
    345a:	d1 f6       	brne	.-76     	; 0x3410 <main+0x114c>
    345c:	27 c0       	rjmp	.+78     	; 0x34ac <main+0x11e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    345e:	8e 01       	movw	r16, r28
    3460:	07 53       	subi	r16, 0x37	; 55
    3462:	1f 4f       	sbci	r17, 0xFF	; 255
    3464:	fe 01       	movw	r30, r28
    3466:	e5 53       	subi	r30, 0x35	; 53
    3468:	ff 4f       	sbci	r31, 0xFF	; 255
    346a:	60 81       	ld	r22, Z
    346c:	71 81       	ldd	r23, Z+1	; 0x01
    346e:	82 81       	ldd	r24, Z+2	; 0x02
    3470:	93 81       	ldd	r25, Z+3	; 0x03
    3472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3476:	dc 01       	movw	r26, r24
    3478:	cb 01       	movw	r24, r22
    347a:	f8 01       	movw	r30, r16
    347c:	91 83       	std	Z+1, r25	; 0x01
    347e:	80 83       	st	Z, r24
    3480:	de 01       	movw	r26, r28
    3482:	ab 53       	subi	r26, 0x3B	; 59
    3484:	bf 4f       	sbci	r27, 0xFF	; 255
    3486:	fe 01       	movw	r30, r28
    3488:	e7 53       	subi	r30, 0x37	; 55
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	80 81       	ld	r24, Z
    348e:	91 81       	ldd	r25, Z+1	; 0x01
    3490:	8d 93       	st	X+, r24
    3492:	9c 93       	st	X, r25
    3494:	fe 01       	movw	r30, r28
    3496:	eb 53       	subi	r30, 0x3B	; 59
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <main+0x11da>
    34a2:	fe 01       	movw	r30, r28
    34a4:	eb 53       	subi	r30, 0x3B	; 59
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
    34ac:	81 e0       	ldi	r24, 0x01	; 1
    34ae:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
		    for(u8 o = 0;o<10;o++){
    34b2:	fe 01       	movw	r30, r28
    34b4:	ee 5a       	subi	r30, 0xAE	; 174
    34b6:	fe 4f       	sbci	r31, 0xFE	; 254
    34b8:	10 82       	st	Z, r1
    34ba:	dc c0       	rjmp	.+440    	; 0x3674 <main+0x13b0>
			    LCD8Bit_Send_Command(0x01);
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
			    LCD_Send_String("System Shutdown");
    34c2:	8c ea       	ldi	r24, 0xAC	; 172
    34c4:	90 e0       	ldi	r25, 0x00	; 0
    34c6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
				LCD_GOTOXY(0,1);
    34ca:	80 e0       	ldi	r24, 0x00	; 0
    34cc:	61 e0       	ldi	r22, 0x01	; 1
    34ce:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
				LCD_Send_Int(10-o);
    34d2:	fe 01       	movw	r30, r28
    34d4:	ee 5a       	subi	r30, 0xAE	; 174
    34d6:	fe 4f       	sbci	r31, 0xFE	; 254
    34d8:	80 81       	ld	r24, Z
    34da:	28 2f       	mov	r18, r24
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	8a e0       	ldi	r24, 0x0A	; 10
    34e0:	90 e0       	ldi	r25, 0x00	; 0
    34e2:	82 1b       	sub	r24, r18
    34e4:	93 0b       	sbc	r25, r19
    34e6:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
			    LCD_Send_String(" Seconds");
    34ea:	8c eb       	ldi	r24, 0xBC	; 188
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    34f2:	fe 01       	movw	r30, r28
    34f4:	ef 53       	subi	r30, 0x3F	; 63
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	80 e0       	ldi	r24, 0x00	; 0
    34fa:	90 e0       	ldi	r25, 0x00	; 0
    34fc:	aa e7       	ldi	r26, 0x7A	; 122
    34fe:	b4 e4       	ldi	r27, 0x44	; 68
    3500:	80 83       	st	Z, r24
    3502:	91 83       	std	Z+1, r25	; 0x01
    3504:	a2 83       	std	Z+2, r26	; 0x02
    3506:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3508:	8e 01       	movw	r16, r28
    350a:	03 54       	subi	r16, 0x43	; 67
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	fe 01       	movw	r30, r28
    3510:	ef 53       	subi	r30, 0x3F	; 63
    3512:	ff 4f       	sbci	r31, 0xFF	; 255
    3514:	60 81       	ld	r22, Z
    3516:	71 81       	ldd	r23, Z+1	; 0x01
    3518:	82 81       	ldd	r24, Z+2	; 0x02
    351a:	93 81       	ldd	r25, Z+3	; 0x03
    351c:	20 e0       	ldi	r18, 0x00	; 0
    351e:	30 e0       	ldi	r19, 0x00	; 0
    3520:	4a ef       	ldi	r20, 0xFA	; 250
    3522:	54 e4       	ldi	r21, 0x44	; 68
    3524:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3528:	dc 01       	movw	r26, r24
    352a:	cb 01       	movw	r24, r22
    352c:	f8 01       	movw	r30, r16
    352e:	80 83       	st	Z, r24
    3530:	91 83       	std	Z+1, r25	; 0x01
    3532:	a2 83       	std	Z+2, r26	; 0x02
    3534:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3536:	fe 01       	movw	r30, r28
    3538:	e3 54       	subi	r30, 0x43	; 67
    353a:	ff 4f       	sbci	r31, 0xFF	; 255
    353c:	60 81       	ld	r22, Z
    353e:	71 81       	ldd	r23, Z+1	; 0x01
    3540:	82 81       	ldd	r24, Z+2	; 0x02
    3542:	93 81       	ldd	r25, Z+3	; 0x03
    3544:	20 e0       	ldi	r18, 0x00	; 0
    3546:	30 e0       	ldi	r19, 0x00	; 0
    3548:	40 e8       	ldi	r20, 0x80	; 128
    354a:	5f e3       	ldi	r21, 0x3F	; 63
    354c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3550:	88 23       	and	r24, r24
    3552:	44 f4       	brge	.+16     	; 0x3564 <main+0x12a0>
		__ticks = 1;
    3554:	fe 01       	movw	r30, r28
    3556:	e5 54       	subi	r30, 0x45	; 69
    3558:	ff 4f       	sbci	r31, 0xFF	; 255
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	90 e0       	ldi	r25, 0x00	; 0
    355e:	91 83       	std	Z+1, r25	; 0x01
    3560:	80 83       	st	Z, r24
    3562:	64 c0       	rjmp	.+200    	; 0x362c <main+0x1368>
	else if (__tmp > 65535)
    3564:	fe 01       	movw	r30, r28
    3566:	e3 54       	subi	r30, 0x43	; 67
    3568:	ff 4f       	sbci	r31, 0xFF	; 255
    356a:	60 81       	ld	r22, Z
    356c:	71 81       	ldd	r23, Z+1	; 0x01
    356e:	82 81       	ldd	r24, Z+2	; 0x02
    3570:	93 81       	ldd	r25, Z+3	; 0x03
    3572:	20 e0       	ldi	r18, 0x00	; 0
    3574:	3f ef       	ldi	r19, 0xFF	; 255
    3576:	4f e7       	ldi	r20, 0x7F	; 127
    3578:	57 e4       	ldi	r21, 0x47	; 71
    357a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    357e:	18 16       	cp	r1, r24
    3580:	0c f0       	brlt	.+2      	; 0x3584 <main+0x12c0>
    3582:	43 c0       	rjmp	.+134    	; 0x360a <main+0x1346>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3584:	fe 01       	movw	r30, r28
    3586:	ef 53       	subi	r30, 0x3F	; 63
    3588:	ff 4f       	sbci	r31, 0xFF	; 255
    358a:	60 81       	ld	r22, Z
    358c:	71 81       	ldd	r23, Z+1	; 0x01
    358e:	82 81       	ldd	r24, Z+2	; 0x02
    3590:	93 81       	ldd	r25, Z+3	; 0x03
    3592:	20 e0       	ldi	r18, 0x00	; 0
    3594:	30 e0       	ldi	r19, 0x00	; 0
    3596:	40 e2       	ldi	r20, 0x20	; 32
    3598:	51 e4       	ldi	r21, 0x41	; 65
    359a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    359e:	dc 01       	movw	r26, r24
    35a0:	cb 01       	movw	r24, r22
    35a2:	8e 01       	movw	r16, r28
    35a4:	05 54       	subi	r16, 0x45	; 69
    35a6:	1f 4f       	sbci	r17, 0xFF	; 255
    35a8:	bc 01       	movw	r22, r24
    35aa:	cd 01       	movw	r24, r26
    35ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	f8 01       	movw	r30, r16
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	80 83       	st	Z, r24
    35ba:	1f c0       	rjmp	.+62     	; 0x35fa <main+0x1336>
    35bc:	fe 01       	movw	r30, r28
    35be:	e7 54       	subi	r30, 0x47	; 71
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	88 ec       	ldi	r24, 0xC8	; 200
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	91 83       	std	Z+1, r25	; 0x01
    35c8:	80 83       	st	Z, r24
    35ca:	fe 01       	movw	r30, r28
    35cc:	e7 54       	subi	r30, 0x47	; 71
    35ce:	ff 4f       	sbci	r31, 0xFF	; 255
    35d0:	80 81       	ld	r24, Z
    35d2:	91 81       	ldd	r25, Z+1	; 0x01
    35d4:	01 97       	sbiw	r24, 0x01	; 1
    35d6:	f1 f7       	brne	.-4      	; 0x35d4 <main+0x1310>
    35d8:	fe 01       	movw	r30, r28
    35da:	e7 54       	subi	r30, 0x47	; 71
    35dc:	ff 4f       	sbci	r31, 0xFF	; 255
    35de:	91 83       	std	Z+1, r25	; 0x01
    35e0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35e2:	de 01       	movw	r26, r28
    35e4:	a5 54       	subi	r26, 0x45	; 69
    35e6:	bf 4f       	sbci	r27, 0xFF	; 255
    35e8:	fe 01       	movw	r30, r28
    35ea:	e5 54       	subi	r30, 0x45	; 69
    35ec:	ff 4f       	sbci	r31, 0xFF	; 255
    35ee:	80 81       	ld	r24, Z
    35f0:	91 81       	ldd	r25, Z+1	; 0x01
    35f2:	01 97       	sbiw	r24, 0x01	; 1
    35f4:	11 96       	adiw	r26, 0x01	; 1
    35f6:	9c 93       	st	X, r25
    35f8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35fa:	fe 01       	movw	r30, r28
    35fc:	e5 54       	subi	r30, 0x45	; 69
    35fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3600:	80 81       	ld	r24, Z
    3602:	91 81       	ldd	r25, Z+1	; 0x01
    3604:	00 97       	sbiw	r24, 0x00	; 0
    3606:	d1 f6       	brne	.-76     	; 0x35bc <main+0x12f8>
    3608:	27 c0       	rjmp	.+78     	; 0x3658 <main+0x1394>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    360a:	8e 01       	movw	r16, r28
    360c:	05 54       	subi	r16, 0x45	; 69
    360e:	1f 4f       	sbci	r17, 0xFF	; 255
    3610:	fe 01       	movw	r30, r28
    3612:	e3 54       	subi	r30, 0x43	; 67
    3614:	ff 4f       	sbci	r31, 0xFF	; 255
    3616:	60 81       	ld	r22, Z
    3618:	71 81       	ldd	r23, Z+1	; 0x01
    361a:	82 81       	ldd	r24, Z+2	; 0x02
    361c:	93 81       	ldd	r25, Z+3	; 0x03
    361e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3622:	dc 01       	movw	r26, r24
    3624:	cb 01       	movw	r24, r22
    3626:	f8 01       	movw	r30, r16
    3628:	91 83       	std	Z+1, r25	; 0x01
    362a:	80 83       	st	Z, r24
    362c:	de 01       	movw	r26, r28
    362e:	a9 54       	subi	r26, 0x49	; 73
    3630:	bf 4f       	sbci	r27, 0xFF	; 255
    3632:	fe 01       	movw	r30, r28
    3634:	e5 54       	subi	r30, 0x45	; 69
    3636:	ff 4f       	sbci	r31, 0xFF	; 255
    3638:	80 81       	ld	r24, Z
    363a:	91 81       	ldd	r25, Z+1	; 0x01
    363c:	8d 93       	st	X+, r24
    363e:	9c 93       	st	X, r25
    3640:	fe 01       	movw	r30, r28
    3642:	e9 54       	subi	r30, 0x49	; 73
    3644:	ff 4f       	sbci	r31, 0xFF	; 255
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <main+0x1386>
    364e:	fe 01       	movw	r30, r28
    3650:	e9 54       	subi	r30, 0x49	; 73
    3652:	ff 4f       	sbci	r31, 0xFF	; 255
    3654:	91 83       	std	Z+1, r25	; 0x01
    3656:	80 83       	st	Z, r24
			    _delay_ms(1000);
			    LCD8Bit_Send_Command(0x01);
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
                flag = 0;
    365e:	10 92 1e 03 	sts	0x031E, r1
		    LCD_Send_String("Wrong Password");
			LCD_GOTOXY(0,1);
		    LCD_Send_String("No tries left!");
		    _delay_ms(5000);
		    LCD8Bit_Send_Command(0x01);
		    for(u8 o = 0;o<10;o++){
    3662:	de 01       	movw	r26, r28
    3664:	ae 5a       	subi	r26, 0xAE	; 174
    3666:	be 4f       	sbci	r27, 0xFE	; 254
    3668:	fe 01       	movw	r30, r28
    366a:	ee 5a       	subi	r30, 0xAE	; 174
    366c:	fe 4f       	sbci	r31, 0xFE	; 254
    366e:	80 81       	ld	r24, Z
    3670:	8f 5f       	subi	r24, 0xFF	; 255
    3672:	8c 93       	st	X, r24
    3674:	fe 01       	movw	r30, r28
    3676:	ee 5a       	subi	r30, 0xAE	; 174
    3678:	fe 4f       	sbci	r31, 0xFE	; 254
    367a:	80 81       	ld	r24, Z
    367c:	8a 30       	cpi	r24, 0x0A	; 10
    367e:	08 f4       	brcc	.+2      	; 0x3682 <main+0x13be>
    3680:	1d cf       	rjmp	.-454    	; 0x34bc <main+0x11f8>
    	}
    }
	//Entering Password
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
	for(u8 j=1;j<4;j++){
    3682:	de 01       	movw	r26, r28
    3684:	ac 5a       	subi	r26, 0xAC	; 172
    3686:	be 4f       	sbci	r27, 0xFE	; 254
    3688:	fe 01       	movw	r30, r28
    368a:	ec 5a       	subi	r30, 0xAC	; 172
    368c:	fe 4f       	sbci	r31, 0xFE	; 254
    368e:	80 81       	ld	r24, Z
    3690:	8f 5f       	subi	r24, 0xFF	; 255
    3692:	8c 93       	st	X, r24
    3694:	fe 01       	movw	r30, r28
    3696:	ec 5a       	subi	r30, 0xAC	; 172
    3698:	fe 4f       	sbci	r31, 0xFE	; 254
    369a:	80 81       	ld	r24, Z
    369c:	84 30       	cpi	r24, 0x04	; 4
    369e:	08 f4       	brcc	.+2      	; 0x36a2 <main+0x13de>
    36a0:	99 cb       	rjmp	.-2254   	; 0x2dd4 <main+0xb10>
    36a2:	1e c0       	rjmp	.+60     	; 0x36e0 <main+0x141c>
                flag = 0;
		    }
		  }
		}
    while(flag == 0){
    	for(u8 i = 0;i<10;i++){
    36a4:	fe 01       	movw	r30, r28
    36a6:	ef 5a       	subi	r30, 0xAF	; 175
    36a8:	fe 4f       	sbci	r31, 0xFE	; 254
    36aa:	10 82       	st	Z, r1
    36ac:	13 c0       	rjmp	.+38     	; 0x36d4 <main+0x1410>
    		if(i==5)
    36ae:	fe 01       	movw	r30, r28
    36b0:	ef 5a       	subi	r30, 0xAF	; 175
    36b2:	fe 4f       	sbci	r31, 0xFE	; 254
    36b4:	80 81       	ld	r24, Z
    36b6:	85 30       	cpi	r24, 0x05	; 5
    36b8:	21 f4       	brne	.+8      	; 0x36c2 <main+0x13fe>
    			i=0;
    36ba:	fe 01       	movw	r30, r28
    36bc:	ef 5a       	subi	r30, 0xAF	; 175
    36be:	fe 4f       	sbci	r31, 0xFE	; 254
    36c0:	10 82       	st	Z, r1
                flag = 0;
		    }
		  }
		}
    while(flag == 0){
    	for(u8 i = 0;i<10;i++){
    36c2:	de 01       	movw	r26, r28
    36c4:	af 5a       	subi	r26, 0xAF	; 175
    36c6:	be 4f       	sbci	r27, 0xFE	; 254
    36c8:	fe 01       	movw	r30, r28
    36ca:	ef 5a       	subi	r30, 0xAF	; 175
    36cc:	fe 4f       	sbci	r31, 0xFE	; 254
    36ce:	80 81       	ld	r24, Z
    36d0:	8f 5f       	subi	r24, 0xFF	; 255
    36d2:	8c 93       	st	X, r24
    36d4:	fe 01       	movw	r30, r28
    36d6:	ef 5a       	subi	r30, 0xAF	; 175
    36d8:	fe 4f       	sbci	r31, 0xFE	; 254
    36da:	80 81       	ld	r24, Z
    36dc:	8a 30       	cpi	r24, 0x0A	; 10
    36de:	38 f3       	brcs	.-50     	; 0x36ae <main+0x13ea>
			    LCD8Bit_Send_Command(0x01);
                flag = 0;
		    }
		  }
		}
    while(flag == 0){
    36e0:	80 91 1e 03 	lds	r24, 0x031E
    36e4:	88 23       	and	r24, r24
    36e6:	f1 f2       	breq	.-68     	; 0x36a4 <main+0x13e0>
    36e8:	fe 01       	movw	r30, r28
    36ea:	ed 54       	subi	r30, 0x4D	; 77
    36ec:	ff 4f       	sbci	r31, 0xFF	; 255
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	90 e0       	ldi	r25, 0x00	; 0
    36f2:	aa e7       	ldi	r26, 0x7A	; 122
    36f4:	b4 e4       	ldi	r27, 0x44	; 68
    36f6:	80 83       	st	Z, r24
    36f8:	91 83       	std	Z+1, r25	; 0x01
    36fa:	a2 83       	std	Z+2, r26	; 0x02
    36fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36fe:	8e 01       	movw	r16, r28
    3700:	01 55       	subi	r16, 0x51	; 81
    3702:	1f 4f       	sbci	r17, 0xFF	; 255
    3704:	fe 01       	movw	r30, r28
    3706:	ed 54       	subi	r30, 0x4D	; 77
    3708:	ff 4f       	sbci	r31, 0xFF	; 255
    370a:	60 81       	ld	r22, Z
    370c:	71 81       	ldd	r23, Z+1	; 0x01
    370e:	82 81       	ldd	r24, Z+2	; 0x02
    3710:	93 81       	ldd	r25, Z+3	; 0x03
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	f8 01       	movw	r30, r16
    3724:	80 83       	st	Z, r24
    3726:	91 83       	std	Z+1, r25	; 0x01
    3728:	a2 83       	std	Z+2, r26	; 0x02
    372a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    372c:	fe 01       	movw	r30, r28
    372e:	e1 55       	subi	r30, 0x51	; 81
    3730:	ff 4f       	sbci	r31, 0xFF	; 255
    3732:	60 81       	ld	r22, Z
    3734:	71 81       	ldd	r23, Z+1	; 0x01
    3736:	82 81       	ldd	r24, Z+2	; 0x02
    3738:	93 81       	ldd	r25, Z+3	; 0x03
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 e8       	ldi	r20, 0x80	; 128
    3740:	5f e3       	ldi	r21, 0x3F	; 63
    3742:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3746:	88 23       	and	r24, r24
    3748:	44 f4       	brge	.+16     	; 0x375a <main+0x1496>
		__ticks = 1;
    374a:	fe 01       	movw	r30, r28
    374c:	e3 55       	subi	r30, 0x53	; 83
    374e:	ff 4f       	sbci	r31, 0xFF	; 255
    3750:	81 e0       	ldi	r24, 0x01	; 1
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	91 83       	std	Z+1, r25	; 0x01
    3756:	80 83       	st	Z, r24
    3758:	64 c0       	rjmp	.+200    	; 0x3822 <main+0x155e>
	else if (__tmp > 65535)
    375a:	fe 01       	movw	r30, r28
    375c:	e1 55       	subi	r30, 0x51	; 81
    375e:	ff 4f       	sbci	r31, 0xFF	; 255
    3760:	60 81       	ld	r22, Z
    3762:	71 81       	ldd	r23, Z+1	; 0x01
    3764:	82 81       	ldd	r24, Z+2	; 0x02
    3766:	93 81       	ldd	r25, Z+3	; 0x03
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	3f ef       	ldi	r19, 0xFF	; 255
    376c:	4f e7       	ldi	r20, 0x7F	; 127
    376e:	57 e4       	ldi	r21, 0x47	; 71
    3770:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3774:	18 16       	cp	r1, r24
    3776:	0c f0       	brlt	.+2      	; 0x377a <main+0x14b6>
    3778:	43 c0       	rjmp	.+134    	; 0x3800 <main+0x153c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377a:	fe 01       	movw	r30, r28
    377c:	ed 54       	subi	r30, 0x4D	; 77
    377e:	ff 4f       	sbci	r31, 0xFF	; 255
    3780:	60 81       	ld	r22, Z
    3782:	71 81       	ldd	r23, Z+1	; 0x01
    3784:	82 81       	ldd	r24, Z+2	; 0x02
    3786:	93 81       	ldd	r25, Z+3	; 0x03
    3788:	20 e0       	ldi	r18, 0x00	; 0
    378a:	30 e0       	ldi	r19, 0x00	; 0
    378c:	40 e2       	ldi	r20, 0x20	; 32
    378e:	51 e4       	ldi	r21, 0x41	; 65
    3790:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3794:	dc 01       	movw	r26, r24
    3796:	cb 01       	movw	r24, r22
    3798:	8e 01       	movw	r16, r28
    379a:	03 55       	subi	r16, 0x53	; 83
    379c:	1f 4f       	sbci	r17, 0xFF	; 255
    379e:	bc 01       	movw	r22, r24
    37a0:	cd 01       	movw	r24, r26
    37a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37a6:	dc 01       	movw	r26, r24
    37a8:	cb 01       	movw	r24, r22
    37aa:	f8 01       	movw	r30, r16
    37ac:	91 83       	std	Z+1, r25	; 0x01
    37ae:	80 83       	st	Z, r24
    37b0:	1f c0       	rjmp	.+62     	; 0x37f0 <main+0x152c>
    37b2:	fe 01       	movw	r30, r28
    37b4:	e5 55       	subi	r30, 0x55	; 85
    37b6:	ff 4f       	sbci	r31, 0xFF	; 255
    37b8:	88 ec       	ldi	r24, 0xC8	; 200
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	91 83       	std	Z+1, r25	; 0x01
    37be:	80 83       	st	Z, r24
    37c0:	fe 01       	movw	r30, r28
    37c2:	e5 55       	subi	r30, 0x55	; 85
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	80 81       	ld	r24, Z
    37c8:	91 81       	ldd	r25, Z+1	; 0x01
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <main+0x1506>
    37ce:	fe 01       	movw	r30, r28
    37d0:	e5 55       	subi	r30, 0x55	; 85
    37d2:	ff 4f       	sbci	r31, 0xFF	; 255
    37d4:	91 83       	std	Z+1, r25	; 0x01
    37d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37d8:	de 01       	movw	r26, r28
    37da:	a3 55       	subi	r26, 0x53	; 83
    37dc:	bf 4f       	sbci	r27, 0xFF	; 255
    37de:	fe 01       	movw	r30, r28
    37e0:	e3 55       	subi	r30, 0x53	; 83
    37e2:	ff 4f       	sbci	r31, 0xFF	; 255
    37e4:	80 81       	ld	r24, Z
    37e6:	91 81       	ldd	r25, Z+1	; 0x01
    37e8:	01 97       	sbiw	r24, 0x01	; 1
    37ea:	11 96       	adiw	r26, 0x01	; 1
    37ec:	9c 93       	st	X, r25
    37ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f0:	fe 01       	movw	r30, r28
    37f2:	e3 55       	subi	r30, 0x53	; 83
    37f4:	ff 4f       	sbci	r31, 0xFF	; 255
    37f6:	80 81       	ld	r24, Z
    37f8:	91 81       	ldd	r25, Z+1	; 0x01
    37fa:	00 97       	sbiw	r24, 0x00	; 0
    37fc:	d1 f6       	brne	.-76     	; 0x37b2 <main+0x14ee>
    37fe:	27 c0       	rjmp	.+78     	; 0x384e <main+0x158a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3800:	8e 01       	movw	r16, r28
    3802:	03 55       	subi	r16, 0x53	; 83
    3804:	1f 4f       	sbci	r17, 0xFF	; 255
    3806:	fe 01       	movw	r30, r28
    3808:	e1 55       	subi	r30, 0x51	; 81
    380a:	ff 4f       	sbci	r31, 0xFF	; 255
    380c:	60 81       	ld	r22, Z
    380e:	71 81       	ldd	r23, Z+1	; 0x01
    3810:	82 81       	ldd	r24, Z+2	; 0x02
    3812:	93 81       	ldd	r25, Z+3	; 0x03
    3814:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3818:	dc 01       	movw	r26, r24
    381a:	cb 01       	movw	r24, r22
    381c:	f8 01       	movw	r30, r16
    381e:	91 83       	std	Z+1, r25	; 0x01
    3820:	80 83       	st	Z, r24
    3822:	de 01       	movw	r26, r28
    3824:	a7 55       	subi	r26, 0x57	; 87
    3826:	bf 4f       	sbci	r27, 0xFF	; 255
    3828:	fe 01       	movw	r30, r28
    382a:	e3 55       	subi	r30, 0x53	; 83
    382c:	ff 4f       	sbci	r31, 0xFF	; 255
    382e:	80 81       	ld	r24, Z
    3830:	91 81       	ldd	r25, Z+1	; 0x01
    3832:	8d 93       	st	X+, r24
    3834:	9c 93       	st	X, r25
    3836:	fe 01       	movw	r30, r28
    3838:	e7 55       	subi	r30, 0x57	; 87
    383a:	ff 4f       	sbci	r31, 0xFF	; 255
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	01 97       	sbiw	r24, 0x01	; 1
    3842:	f1 f7       	brne	.-4      	; 0x3840 <main+0x157c>
    3844:	fe 01       	movw	r30, r28
    3846:	e7 55       	subi	r30, 0x57	; 87
    3848:	ff 4f       	sbci	r31, 0xFF	; 255
    384a:	91 83       	std	Z+1, r25	; 0x01
    384c:	80 83       	st	Z, r24
    		if(i==5)
    			i=0;
    	}
    }
    _delay_ms(1000);
    LCD8Bit_Send_Command(0x01);
    384e:	81 e0       	ldi	r24, 0x01	; 1
    3850:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>

    	//Servo opens (door)
        ServoAngle(openangle);
    3854:	87 ea       	ldi	r24, 0xA7	; 167
    3856:	9f ef       	ldi	r25, 0xFF	; 255
    3858:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <ServoAngle>
    while(1){
    	//Sensor readings
    	lm35_reading = ADC_Read_Sych(2)* 500UL/1024UL;
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ADC_Read_Sych>
    3862:	cc 01       	movw	r24, r24
    3864:	a0 e0       	ldi	r26, 0x00	; 0
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	24 ef       	ldi	r18, 0xF4	; 244
    386a:	31 e0       	ldi	r19, 0x01	; 1
    386c:	40 e0       	ldi	r20, 0x00	; 0
    386e:	50 e0       	ldi	r21, 0x00	; 0
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__mulsi3>
    3878:	dc 01       	movw	r26, r24
    387a:	cb 01       	movw	r24, r22
    387c:	07 2e       	mov	r0, r23
    387e:	7a e0       	ldi	r23, 0x0A	; 10
    3880:	b6 95       	lsr	r27
    3882:	a7 95       	ror	r26
    3884:	97 95       	ror	r25
    3886:	87 95       	ror	r24
    3888:	7a 95       	dec	r23
    388a:	d1 f7       	brne	.-12     	; 0x3880 <main+0x15bc>
    388c:	70 2d       	mov	r23, r0
    388e:	90 93 23 03 	sts	0x0323, r25
    3892:	80 93 22 03 	sts	0x0322, r24
    	photoresistor_reading = (ADC_Read_Sych(3)*5000UL)/ 1024UL;
    3896:	83 e0       	ldi	r24, 0x03	; 3
    3898:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ADC_Read_Sych>
    389c:	cc 01       	movw	r24, r24
    389e:	a0 e0       	ldi	r26, 0x00	; 0
    38a0:	b0 e0       	ldi	r27, 0x00	; 0
    38a2:	28 e8       	ldi	r18, 0x88	; 136
    38a4:	33 e1       	ldi	r19, 0x13	; 19
    38a6:	40 e0       	ldi	r20, 0x00	; 0
    38a8:	50 e0       	ldi	r21, 0x00	; 0
    38aa:	bc 01       	movw	r22, r24
    38ac:	cd 01       	movw	r24, r26
    38ae:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__mulsi3>
    38b2:	dc 01       	movw	r26, r24
    38b4:	cb 01       	movw	r24, r22
    38b6:	07 2e       	mov	r0, r23
    38b8:	7a e0       	ldi	r23, 0x0A	; 10
    38ba:	b6 95       	lsr	r27
    38bc:	a7 95       	ror	r26
    38be:	97 95       	ror	r25
    38c0:	87 95       	ror	r24
    38c2:	7a 95       	dec	r23
    38c4:	d1 f7       	brne	.-12     	; 0x38ba <main+0x15f6>
    38c6:	70 2d       	mov	r23, r0
    38c8:	90 93 27 03 	sts	0x0327, r25
    38cc:	80 93 26 03 	sts	0x0326, r24
    	infrared_reading = ADC_Read_Sych(4) * 5000UL / 1024UL;
    38d0:	84 e0       	ldi	r24, 0x04	; 4
    38d2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ADC_Read_Sych>
    38d6:	cc 01       	movw	r24, r24
    38d8:	a0 e0       	ldi	r26, 0x00	; 0
    38da:	b0 e0       	ldi	r27, 0x00	; 0
    38dc:	28 e8       	ldi	r18, 0x88	; 136
    38de:	33 e1       	ldi	r19, 0x13	; 19
    38e0:	40 e0       	ldi	r20, 0x00	; 0
    38e2:	50 e0       	ldi	r21, 0x00	; 0
    38e4:	bc 01       	movw	r22, r24
    38e6:	cd 01       	movw	r24, r26
    38e8:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__mulsi3>
    38ec:	dc 01       	movw	r26, r24
    38ee:	cb 01       	movw	r24, r22
    38f0:	07 2e       	mov	r0, r23
    38f2:	7a e0       	ldi	r23, 0x0A	; 10
    38f4:	b6 95       	lsr	r27
    38f6:	a7 95       	ror	r26
    38f8:	97 95       	ror	r25
    38fa:	87 95       	ror	r24
    38fc:	7a 95       	dec	r23
    38fe:	d1 f7       	brne	.-12     	; 0x38f4 <main+0x1630>
    3900:	70 2d       	mov	r23, r0
    3902:	90 93 29 03 	sts	0x0329, r25
    3906:	80 93 28 03 	sts	0x0328, r24
    	potentiometer_reading = ADC_Read_Sych(5) * 5UL / 1024UL;
    390a:	85 e0       	ldi	r24, 0x05	; 5
    390c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <ADC_Read_Sych>
    3910:	9c 01       	movw	r18, r24
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	50 e0       	ldi	r21, 0x00	; 0
    3916:	da 01       	movw	r26, r20
    3918:	c9 01       	movw	r24, r18
    391a:	88 0f       	add	r24, r24
    391c:	99 1f       	adc	r25, r25
    391e:	aa 1f       	adc	r26, r26
    3920:	bb 1f       	adc	r27, r27
    3922:	88 0f       	add	r24, r24
    3924:	99 1f       	adc	r25, r25
    3926:	aa 1f       	adc	r26, r26
    3928:	bb 1f       	adc	r27, r27
    392a:	82 0f       	add	r24, r18
    392c:	93 1f       	adc	r25, r19
    392e:	a4 1f       	adc	r26, r20
    3930:	b5 1f       	adc	r27, r21
    3932:	07 2e       	mov	r0, r23
    3934:	7a e0       	ldi	r23, 0x0A	; 10
    3936:	b6 95       	lsr	r27
    3938:	a7 95       	ror	r26
    393a:	97 95       	ror	r25
    393c:	87 95       	ror	r24
    393e:	7a 95       	dec	r23
    3940:	d1 f7       	brne	.-12     	; 0x3936 <main+0x1672>
    3942:	70 2d       	mov	r23, r0
    3944:	90 93 25 03 	sts	0x0325, r25
    3948:	80 93 24 03 	sts	0x0324, r24
    	//Automatic (automatic response based on sensor reading)



        //Check if the user wants Something
        ca = UART_Receive();
    394c:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
    3950:	80 93 39 03 	sts	0x0339, r24
        if(ca == '-'){
    3954:	80 91 39 03 	lds	r24, 0x0339
    3958:	8d 32       	cpi	r24, 0x2D	; 45
    395a:	09 f0       	breq	.+2      	; 0x395e <main+0x169a>
    395c:	ec c6       	rjmp	.+3544   	; 0x4736 <main+0x2472>
    395e:	fe 01       	movw	r30, r28
    3960:	eb 55       	subi	r30, 0x5B	; 91
    3962:	ff 4f       	sbci	r31, 0xFF	; 255
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	a8 ec       	ldi	r26, 0xC8	; 200
    396a:	b2 e4       	ldi	r27, 0x42	; 66
    396c:	80 83       	st	Z, r24
    396e:	91 83       	std	Z+1, r25	; 0x01
    3970:	a2 83       	std	Z+2, r26	; 0x02
    3972:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3974:	8e 01       	movw	r16, r28
    3976:	0f 55       	subi	r16, 0x5F	; 95
    3978:	1f 4f       	sbci	r17, 0xFF	; 255
    397a:	fe 01       	movw	r30, r28
    397c:	eb 55       	subi	r30, 0x5B	; 91
    397e:	ff 4f       	sbci	r31, 0xFF	; 255
    3980:	60 81       	ld	r22, Z
    3982:	71 81       	ldd	r23, Z+1	; 0x01
    3984:	82 81       	ldd	r24, Z+2	; 0x02
    3986:	93 81       	ldd	r25, Z+3	; 0x03
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a ef       	ldi	r20, 0xFA	; 250
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	f8 01       	movw	r30, r16
    399a:	80 83       	st	Z, r24
    399c:	91 83       	std	Z+1, r25	; 0x01
    399e:	a2 83       	std	Z+2, r26	; 0x02
    39a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39a2:	fe 01       	movw	r30, r28
    39a4:	ef 55       	subi	r30, 0x5F	; 95
    39a6:	ff 4f       	sbci	r31, 0xFF	; 255
    39a8:	60 81       	ld	r22, Z
    39aa:	71 81       	ldd	r23, Z+1	; 0x01
    39ac:	82 81       	ldd	r24, Z+2	; 0x02
    39ae:	93 81       	ldd	r25, Z+3	; 0x03
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	44 f4       	brge	.+16     	; 0x39d0 <main+0x170c>
		__ticks = 1;
    39c0:	fe 01       	movw	r30, r28
    39c2:	e1 56       	subi	r30, 0x61	; 97
    39c4:	ff 4f       	sbci	r31, 0xFF	; 255
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	90 e0       	ldi	r25, 0x00	; 0
    39ca:	91 83       	std	Z+1, r25	; 0x01
    39cc:	80 83       	st	Z, r24
    39ce:	64 c0       	rjmp	.+200    	; 0x3a98 <main+0x17d4>
	else if (__tmp > 65535)
    39d0:	fe 01       	movw	r30, r28
    39d2:	ef 55       	subi	r30, 0x5F	; 95
    39d4:	ff 4f       	sbci	r31, 0xFF	; 255
    39d6:	60 81       	ld	r22, Z
    39d8:	71 81       	ldd	r23, Z+1	; 0x01
    39da:	82 81       	ldd	r24, Z+2	; 0x02
    39dc:	93 81       	ldd	r25, Z+3	; 0x03
    39de:	20 e0       	ldi	r18, 0x00	; 0
    39e0:	3f ef       	ldi	r19, 0xFF	; 255
    39e2:	4f e7       	ldi	r20, 0x7F	; 127
    39e4:	57 e4       	ldi	r21, 0x47	; 71
    39e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39ea:	18 16       	cp	r1, r24
    39ec:	0c f0       	brlt	.+2      	; 0x39f0 <main+0x172c>
    39ee:	43 c0       	rjmp	.+134    	; 0x3a76 <main+0x17b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f0:	fe 01       	movw	r30, r28
    39f2:	eb 55       	subi	r30, 0x5B	; 91
    39f4:	ff 4f       	sbci	r31, 0xFF	; 255
    39f6:	60 81       	ld	r22, Z
    39f8:	71 81       	ldd	r23, Z+1	; 0x01
    39fa:	82 81       	ldd	r24, Z+2	; 0x02
    39fc:	93 81       	ldd	r25, Z+3	; 0x03
    39fe:	20 e0       	ldi	r18, 0x00	; 0
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	40 e2       	ldi	r20, 0x20	; 32
    3a04:	51 e4       	ldi	r21, 0x41	; 65
    3a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0a:	dc 01       	movw	r26, r24
    3a0c:	cb 01       	movw	r24, r22
    3a0e:	8e 01       	movw	r16, r28
    3a10:	01 56       	subi	r16, 0x61	; 97
    3a12:	1f 4f       	sbci	r17, 0xFF	; 255
    3a14:	bc 01       	movw	r22, r24
    3a16:	cd 01       	movw	r24, r26
    3a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a1c:	dc 01       	movw	r26, r24
    3a1e:	cb 01       	movw	r24, r22
    3a20:	f8 01       	movw	r30, r16
    3a22:	91 83       	std	Z+1, r25	; 0x01
    3a24:	80 83       	st	Z, r24
    3a26:	1f c0       	rjmp	.+62     	; 0x3a66 <main+0x17a2>
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e3 56       	subi	r30, 0x63	; 99
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	88 ec       	ldi	r24, 0xC8	; 200
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	91 83       	std	Z+1, r25	; 0x01
    3a34:	80 83       	st	Z, r24
    3a36:	fe 01       	movw	r30, r28
    3a38:	e3 56       	subi	r30, 0x63	; 99
    3a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a3c:	80 81       	ld	r24, Z
    3a3e:	91 81       	ldd	r25, Z+1	; 0x01
    3a40:	01 97       	sbiw	r24, 0x01	; 1
    3a42:	f1 f7       	brne	.-4      	; 0x3a40 <main+0x177c>
    3a44:	fe 01       	movw	r30, r28
    3a46:	e3 56       	subi	r30, 0x63	; 99
    3a48:	ff 4f       	sbci	r31, 0xFF	; 255
    3a4a:	91 83       	std	Z+1, r25	; 0x01
    3a4c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a4e:	de 01       	movw	r26, r28
    3a50:	a1 56       	subi	r26, 0x61	; 97
    3a52:	bf 4f       	sbci	r27, 0xFF	; 255
    3a54:	fe 01       	movw	r30, r28
    3a56:	e1 56       	subi	r30, 0x61	; 97
    3a58:	ff 4f       	sbci	r31, 0xFF	; 255
    3a5a:	80 81       	ld	r24, Z
    3a5c:	91 81       	ldd	r25, Z+1	; 0x01
    3a5e:	01 97       	sbiw	r24, 0x01	; 1
    3a60:	11 96       	adiw	r26, 0x01	; 1
    3a62:	9c 93       	st	X, r25
    3a64:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a66:	fe 01       	movw	r30, r28
    3a68:	e1 56       	subi	r30, 0x61	; 97
    3a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3a6c:	80 81       	ld	r24, Z
    3a6e:	91 81       	ldd	r25, Z+1	; 0x01
    3a70:	00 97       	sbiw	r24, 0x00	; 0
    3a72:	d1 f6       	brne	.-76     	; 0x3a28 <main+0x1764>
    3a74:	27 c0       	rjmp	.+78     	; 0x3ac4 <main+0x1800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a76:	8e 01       	movw	r16, r28
    3a78:	01 56       	subi	r16, 0x61	; 97
    3a7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	ef 55       	subi	r30, 0x5F	; 95
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	60 81       	ld	r22, Z
    3a84:	71 81       	ldd	r23, Z+1	; 0x01
    3a86:	82 81       	ldd	r24, Z+2	; 0x02
    3a88:	93 81       	ldd	r25, Z+3	; 0x03
    3a8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a8e:	dc 01       	movw	r26, r24
    3a90:	cb 01       	movw	r24, r22
    3a92:	f8 01       	movw	r30, r16
    3a94:	91 83       	std	Z+1, r25	; 0x01
    3a96:	80 83       	st	Z, r24
    3a98:	de 01       	movw	r26, r28
    3a9a:	a5 56       	subi	r26, 0x65	; 101
    3a9c:	bf 4f       	sbci	r27, 0xFF	; 255
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e1 56       	subi	r30, 0x61	; 97
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	8d 93       	st	X+, r24
    3aaa:	9c 93       	st	X, r25
    3aac:	fe 01       	movw	r30, r28
    3aae:	e5 56       	subi	r30, 0x65	; 101
    3ab0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ab2:	80 81       	ld	r24, Z
    3ab4:	91 81       	ldd	r25, Z+1	; 0x01
    3ab6:	01 97       	sbiw	r24, 0x01	; 1
    3ab8:	f1 f7       	brne	.-4      	; 0x3ab6 <main+0x17f2>
    3aba:	fe 01       	movw	r30, r28
    3abc:	e5 56       	subi	r30, 0x65	; 101
    3abe:	ff 4f       	sbci	r31, 0xFF	; 255
    3ac0:	91 83       	std	Z+1, r25	; 0x01
    3ac2:	80 83       	st	Z, r24
        _delay_ms(100);
        LCD8Bit_Send_Command(0x01);
    3ac4:	81 e0       	ldi	r24, 0x01	; 1
    3ac6:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
        LCD_Send_String("I'm Here");
    3aca:	87 ee       	ldi	r24, 0xE7	; 231
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
        LCD_GOTOXY(0,1);
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	61 e0       	ldi	r22, 0x01	; 1
    3ad6:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
        LCD_Send_String("Sir");
    3ada:	80 ef       	ldi	r24, 0xF0	; 240
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    3ae2:	fe 01       	movw	r30, r28
    3ae4:	e9 56       	subi	r30, 0x69	; 105
    3ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ae8:	80 e0       	ldi	r24, 0x00	; 0
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	aa e7       	ldi	r26, 0x7A	; 122
    3aee:	b4 e4       	ldi	r27, 0x44	; 68
    3af0:	80 83       	st	Z, r24
    3af2:	91 83       	std	Z+1, r25	; 0x01
    3af4:	a2 83       	std	Z+2, r26	; 0x02
    3af6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3af8:	8e 01       	movw	r16, r28
    3afa:	0d 56       	subi	r16, 0x6D	; 109
    3afc:	1f 4f       	sbci	r17, 0xFF	; 255
    3afe:	fe 01       	movw	r30, r28
    3b00:	e9 56       	subi	r30, 0x69	; 105
    3b02:	ff 4f       	sbci	r31, 0xFF	; 255
    3b04:	60 81       	ld	r22, Z
    3b06:	71 81       	ldd	r23, Z+1	; 0x01
    3b08:	82 81       	ldd	r24, Z+2	; 0x02
    3b0a:	93 81       	ldd	r25, Z+3	; 0x03
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	4a ef       	ldi	r20, 0xFA	; 250
    3b12:	54 e4       	ldi	r21, 0x44	; 68
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	f8 01       	movw	r30, r16
    3b1e:	80 83       	st	Z, r24
    3b20:	91 83       	std	Z+1, r25	; 0x01
    3b22:	a2 83       	std	Z+2, r26	; 0x02
    3b24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b26:	fe 01       	movw	r30, r28
    3b28:	ed 56       	subi	r30, 0x6D	; 109
    3b2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2c:	60 81       	ld	r22, Z
    3b2e:	71 81       	ldd	r23, Z+1	; 0x01
    3b30:	82 81       	ldd	r24, Z+2	; 0x02
    3b32:	93 81       	ldd	r25, Z+3	; 0x03
    3b34:	20 e0       	ldi	r18, 0x00	; 0
    3b36:	30 e0       	ldi	r19, 0x00	; 0
    3b38:	40 e8       	ldi	r20, 0x80	; 128
    3b3a:	5f e3       	ldi	r21, 0x3F	; 63
    3b3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b40:	88 23       	and	r24, r24
    3b42:	44 f4       	brge	.+16     	; 0x3b54 <main+0x1890>
		__ticks = 1;
    3b44:	fe 01       	movw	r30, r28
    3b46:	ef 56       	subi	r30, 0x6F	; 111
    3b48:	ff 4f       	sbci	r31, 0xFF	; 255
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	91 83       	std	Z+1, r25	; 0x01
    3b50:	80 83       	st	Z, r24
    3b52:	64 c0       	rjmp	.+200    	; 0x3c1c <main+0x1958>
	else if (__tmp > 65535)
    3b54:	fe 01       	movw	r30, r28
    3b56:	ed 56       	subi	r30, 0x6D	; 109
    3b58:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	82 81       	ldd	r24, Z+2	; 0x02
    3b60:	93 81       	ldd	r25, Z+3	; 0x03
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	3f ef       	ldi	r19, 0xFF	; 255
    3b66:	4f e7       	ldi	r20, 0x7F	; 127
    3b68:	57 e4       	ldi	r21, 0x47	; 71
    3b6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b6e:	18 16       	cp	r1, r24
    3b70:	0c f0       	brlt	.+2      	; 0x3b74 <main+0x18b0>
    3b72:	43 c0       	rjmp	.+134    	; 0x3bfa <main+0x1936>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b74:	fe 01       	movw	r30, r28
    3b76:	e9 56       	subi	r30, 0x69	; 105
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	60 81       	ld	r22, Z
    3b7c:	71 81       	ldd	r23, Z+1	; 0x01
    3b7e:	82 81       	ldd	r24, Z+2	; 0x02
    3b80:	93 81       	ldd	r25, Z+3	; 0x03
    3b82:	20 e0       	ldi	r18, 0x00	; 0
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	40 e2       	ldi	r20, 0x20	; 32
    3b88:	51 e4       	ldi	r21, 0x41	; 65
    3b8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b8e:	dc 01       	movw	r26, r24
    3b90:	cb 01       	movw	r24, r22
    3b92:	8e 01       	movw	r16, r28
    3b94:	0f 56       	subi	r16, 0x6F	; 111
    3b96:	1f 4f       	sbci	r17, 0xFF	; 255
    3b98:	bc 01       	movw	r22, r24
    3b9a:	cd 01       	movw	r24, r26
    3b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba0:	dc 01       	movw	r26, r24
    3ba2:	cb 01       	movw	r24, r22
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	91 83       	std	Z+1, r25	; 0x01
    3ba8:	80 83       	st	Z, r24
    3baa:	1f c0       	rjmp	.+62     	; 0x3bea <main+0x1926>
    3bac:	fe 01       	movw	r30, r28
    3bae:	e1 57       	subi	r30, 0x71	; 113
    3bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3bb2:	88 ec       	ldi	r24, 0xC8	; 200
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	91 83       	std	Z+1, r25	; 0x01
    3bb8:	80 83       	st	Z, r24
    3bba:	fe 01       	movw	r30, r28
    3bbc:	e1 57       	subi	r30, 0x71	; 113
    3bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3bc0:	80 81       	ld	r24, Z
    3bc2:	91 81       	ldd	r25, Z+1	; 0x01
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	f1 f7       	brne	.-4      	; 0x3bc4 <main+0x1900>
    3bc8:	fe 01       	movw	r30, r28
    3bca:	e1 57       	subi	r30, 0x71	; 113
    3bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bce:	91 83       	std	Z+1, r25	; 0x01
    3bd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bd2:	de 01       	movw	r26, r28
    3bd4:	af 56       	subi	r26, 0x6F	; 111
    3bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3bd8:	fe 01       	movw	r30, r28
    3bda:	ef 56       	subi	r30, 0x6F	; 111
    3bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    3bde:	80 81       	ld	r24, Z
    3be0:	91 81       	ldd	r25, Z+1	; 0x01
    3be2:	01 97       	sbiw	r24, 0x01	; 1
    3be4:	11 96       	adiw	r26, 0x01	; 1
    3be6:	9c 93       	st	X, r25
    3be8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bea:	fe 01       	movw	r30, r28
    3bec:	ef 56       	subi	r30, 0x6F	; 111
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	80 81       	ld	r24, Z
    3bf2:	91 81       	ldd	r25, Z+1	; 0x01
    3bf4:	00 97       	sbiw	r24, 0x00	; 0
    3bf6:	d1 f6       	brne	.-76     	; 0x3bac <main+0x18e8>
    3bf8:	27 c0       	rjmp	.+78     	; 0x3c48 <main+0x1984>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bfa:	8e 01       	movw	r16, r28
    3bfc:	0f 56       	subi	r16, 0x6F	; 111
    3bfe:	1f 4f       	sbci	r17, 0xFF	; 255
    3c00:	fe 01       	movw	r30, r28
    3c02:	ed 56       	subi	r30, 0x6D	; 109
    3c04:	ff 4f       	sbci	r31, 0xFF	; 255
    3c06:	60 81       	ld	r22, Z
    3c08:	71 81       	ldd	r23, Z+1	; 0x01
    3c0a:	82 81       	ldd	r24, Z+2	; 0x02
    3c0c:	93 81       	ldd	r25, Z+3	; 0x03
    3c0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c12:	dc 01       	movw	r26, r24
    3c14:	cb 01       	movw	r24, r22
    3c16:	f8 01       	movw	r30, r16
    3c18:	91 83       	std	Z+1, r25	; 0x01
    3c1a:	80 83       	st	Z, r24
    3c1c:	de 01       	movw	r26, r28
    3c1e:	a3 57       	subi	r26, 0x73	; 115
    3c20:	bf 4f       	sbci	r27, 0xFF	; 255
    3c22:	fe 01       	movw	r30, r28
    3c24:	ef 56       	subi	r30, 0x6F	; 111
    3c26:	ff 4f       	sbci	r31, 0xFF	; 255
    3c28:	80 81       	ld	r24, Z
    3c2a:	91 81       	ldd	r25, Z+1	; 0x01
    3c2c:	8d 93       	st	X+, r24
    3c2e:	9c 93       	st	X, r25
    3c30:	fe 01       	movw	r30, r28
    3c32:	e3 57       	subi	r30, 0x73	; 115
    3c34:	ff 4f       	sbci	r31, 0xFF	; 255
    3c36:	80 81       	ld	r24, Z
    3c38:	91 81       	ldd	r25, Z+1	; 0x01
    3c3a:	01 97       	sbiw	r24, 0x01	; 1
    3c3c:	f1 f7       	brne	.-4      	; 0x3c3a <main+0x1976>
    3c3e:	fe 01       	movw	r30, r28
    3c40:	e3 57       	subi	r30, 0x73	; 115
    3c42:	ff 4f       	sbci	r31, 0xFF	; 255
    3c44:	91 83       	std	Z+1, r25	; 0x01
    3c46:	80 83       	st	Z, r24
        _delay_ms(1000);
        LCD8Bit_Send_Command(0x01);
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
        LCD_Send_String("Command:");
    3c4e:	84 ef       	ldi	r24, 0xF4	; 244
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
    	BluetoothRead(command);
    3c56:	84 e3       	ldi	r24, 0x34	; 52
    3c58:	93 e0       	ldi	r25, 0x03	; 3
    3c5a:	0e 94 d9 25 	call	0x4bb2	; 0x4bb2 <BluetoothRead>
        LCD8Bit_Send_Command(0x01);
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
        if(strcmp(command,shutdoor)==0){
    3c64:	84 e3       	ldi	r24, 0x34	; 52
    3c66:	93 e0       	ldi	r25, 0x03	; 3
    3c68:	27 e9       	ldi	r18, 0x97	; 151
    3c6a:	32 e0       	ldi	r19, 0x02	; 2
    3c6c:	b9 01       	movw	r22, r18
    3c6e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	09 f0       	breq	.+2      	; 0x3c78 <main+0x19b4>
    3c76:	c6 c0       	rjmp	.+396    	; 0x3e04 <main+0x1b40>
           LCD_Send_String("Closing");
    3c78:	8d ef       	ldi	r24, 0xFD	; 253
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    3c80:	80 e0       	ldi	r24, 0x00	; 0
    3c82:	61 e0       	ldi	r22, 0x01	; 1
    3c84:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("the door...");
    3c88:	85 e0       	ldi	r24, 0x05	; 5
    3c8a:	91 e0       	ldi	r25, 0x01	; 1
    3c8c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           ServoAngle(closeangle);
    3c90:	80 e0       	ldi	r24, 0x00	; 0
    3c92:	90 e0       	ldi	r25, 0x00	; 0
    3c94:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <ServoAngle>
    3c98:	fe 01       	movw	r30, r28
    3c9a:	e7 57       	subi	r30, 0x77	; 119
    3c9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	aa e7       	ldi	r26, 0x7A	; 122
    3ca4:	b4 e4       	ldi	r27, 0x44	; 68
    3ca6:	80 83       	st	Z, r24
    3ca8:	91 83       	std	Z+1, r25	; 0x01
    3caa:	a2 83       	std	Z+2, r26	; 0x02
    3cac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cae:	8e 01       	movw	r16, r28
    3cb0:	0b 57       	subi	r16, 0x7B	; 123
    3cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    3cb4:	fe 01       	movw	r30, r28
    3cb6:	e7 57       	subi	r30, 0x77	; 119
    3cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    3cba:	60 81       	ld	r22, Z
    3cbc:	71 81       	ldd	r23, Z+1	; 0x01
    3cbe:	82 81       	ldd	r24, Z+2	; 0x02
    3cc0:	93 81       	ldd	r25, Z+3	; 0x03
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	4a ef       	ldi	r20, 0xFA	; 250
    3cc8:	54 e4       	ldi	r21, 0x44	; 68
    3cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	80 83       	st	Z, r24
    3cd6:	91 83       	std	Z+1, r25	; 0x01
    3cd8:	a2 83       	std	Z+2, r26	; 0x02
    3cda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cdc:	fe 01       	movw	r30, r28
    3cde:	eb 57       	subi	r30, 0x7B	; 123
    3ce0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce2:	60 81       	ld	r22, Z
    3ce4:	71 81       	ldd	r23, Z+1	; 0x01
    3ce6:	82 81       	ldd	r24, Z+2	; 0x02
    3ce8:	93 81       	ldd	r25, Z+3	; 0x03
    3cea:	20 e0       	ldi	r18, 0x00	; 0
    3cec:	30 e0       	ldi	r19, 0x00	; 0
    3cee:	40 e8       	ldi	r20, 0x80	; 128
    3cf0:	5f e3       	ldi	r21, 0x3F	; 63
    3cf2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cf6:	88 23       	and	r24, r24
    3cf8:	44 f4       	brge	.+16     	; 0x3d0a <main+0x1a46>
		__ticks = 1;
    3cfa:	fe 01       	movw	r30, r28
    3cfc:	ed 57       	subi	r30, 0x7D	; 125
    3cfe:	ff 4f       	sbci	r31, 0xFF	; 255
    3d00:	81 e0       	ldi	r24, 0x01	; 1
    3d02:	90 e0       	ldi	r25, 0x00	; 0
    3d04:	91 83       	std	Z+1, r25	; 0x01
    3d06:	80 83       	st	Z, r24
    3d08:	64 c0       	rjmp	.+200    	; 0x3dd2 <main+0x1b0e>
	else if (__tmp > 65535)
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	eb 57       	subi	r30, 0x7B	; 123
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	60 81       	ld	r22, Z
    3d12:	71 81       	ldd	r23, Z+1	; 0x01
    3d14:	82 81       	ldd	r24, Z+2	; 0x02
    3d16:	93 81       	ldd	r25, Z+3	; 0x03
    3d18:	20 e0       	ldi	r18, 0x00	; 0
    3d1a:	3f ef       	ldi	r19, 0xFF	; 255
    3d1c:	4f e7       	ldi	r20, 0x7F	; 127
    3d1e:	57 e4       	ldi	r21, 0x47	; 71
    3d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d24:	18 16       	cp	r1, r24
    3d26:	0c f0       	brlt	.+2      	; 0x3d2a <main+0x1a66>
    3d28:	43 c0       	rjmp	.+134    	; 0x3db0 <main+0x1aec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d2a:	fe 01       	movw	r30, r28
    3d2c:	e7 57       	subi	r30, 0x77	; 119
    3d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d30:	60 81       	ld	r22, Z
    3d32:	71 81       	ldd	r23, Z+1	; 0x01
    3d34:	82 81       	ldd	r24, Z+2	; 0x02
    3d36:	93 81       	ldd	r25, Z+3	; 0x03
    3d38:	20 e0       	ldi	r18, 0x00	; 0
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	40 e2       	ldi	r20, 0x20	; 32
    3d3e:	51 e4       	ldi	r21, 0x41	; 65
    3d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d44:	dc 01       	movw	r26, r24
    3d46:	cb 01       	movw	r24, r22
    3d48:	8e 01       	movw	r16, r28
    3d4a:	0d 57       	subi	r16, 0x7D	; 125
    3d4c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d4e:	bc 01       	movw	r22, r24
    3d50:	cd 01       	movw	r24, r26
    3d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d56:	dc 01       	movw	r26, r24
    3d58:	cb 01       	movw	r24, r22
    3d5a:	f8 01       	movw	r30, r16
    3d5c:	91 83       	std	Z+1, r25	; 0x01
    3d5e:	80 83       	st	Z, r24
    3d60:	1f c0       	rjmp	.+62     	; 0x3da0 <main+0x1adc>
    3d62:	fe 01       	movw	r30, r28
    3d64:	ef 57       	subi	r30, 0x7F	; 127
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	88 ec       	ldi	r24, 0xC8	; 200
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	91 83       	std	Z+1, r25	; 0x01
    3d6e:	80 83       	st	Z, r24
    3d70:	fe 01       	movw	r30, r28
    3d72:	ef 57       	subi	r30, 0x7F	; 127
    3d74:	ff 4f       	sbci	r31, 0xFF	; 255
    3d76:	80 81       	ld	r24, Z
    3d78:	91 81       	ldd	r25, Z+1	; 0x01
    3d7a:	01 97       	sbiw	r24, 0x01	; 1
    3d7c:	f1 f7       	brne	.-4      	; 0x3d7a <main+0x1ab6>
    3d7e:	fe 01       	movw	r30, r28
    3d80:	ef 57       	subi	r30, 0x7F	; 127
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	91 83       	std	Z+1, r25	; 0x01
    3d86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d88:	de 01       	movw	r26, r28
    3d8a:	ad 57       	subi	r26, 0x7D	; 125
    3d8c:	bf 4f       	sbci	r27, 0xFF	; 255
    3d8e:	fe 01       	movw	r30, r28
    3d90:	ed 57       	subi	r30, 0x7D	; 125
    3d92:	ff 4f       	sbci	r31, 0xFF	; 255
    3d94:	80 81       	ld	r24, Z
    3d96:	91 81       	ldd	r25, Z+1	; 0x01
    3d98:	01 97       	sbiw	r24, 0x01	; 1
    3d9a:	11 96       	adiw	r26, 0x01	; 1
    3d9c:	9c 93       	st	X, r25
    3d9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3da0:	fe 01       	movw	r30, r28
    3da2:	ed 57       	subi	r30, 0x7D	; 125
    3da4:	ff 4f       	sbci	r31, 0xFF	; 255
    3da6:	80 81       	ld	r24, Z
    3da8:	91 81       	ldd	r25, Z+1	; 0x01
    3daa:	00 97       	sbiw	r24, 0x00	; 0
    3dac:	d1 f6       	brne	.-76     	; 0x3d62 <main+0x1a9e>
    3dae:	27 c0       	rjmp	.+78     	; 0x3dfe <main+0x1b3a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db0:	8e 01       	movw	r16, r28
    3db2:	0d 57       	subi	r16, 0x7D	; 125
    3db4:	1f 4f       	sbci	r17, 0xFF	; 255
    3db6:	fe 01       	movw	r30, r28
    3db8:	eb 57       	subi	r30, 0x7B	; 123
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	60 81       	ld	r22, Z
    3dbe:	71 81       	ldd	r23, Z+1	; 0x01
    3dc0:	82 81       	ldd	r24, Z+2	; 0x02
    3dc2:	93 81       	ldd	r25, Z+3	; 0x03
    3dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc8:	dc 01       	movw	r26, r24
    3dca:	cb 01       	movw	r24, r22
    3dcc:	f8 01       	movw	r30, r16
    3dce:	91 83       	std	Z+1, r25	; 0x01
    3dd0:	80 83       	st	Z, r24
    3dd2:	de 01       	movw	r26, r28
    3dd4:	a1 58       	subi	r26, 0x81	; 129
    3dd6:	bf 4f       	sbci	r27, 0xFF	; 255
    3dd8:	fe 01       	movw	r30, r28
    3dda:	ed 57       	subi	r30, 0x7D	; 125
    3ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dde:	80 81       	ld	r24, Z
    3de0:	91 81       	ldd	r25, Z+1	; 0x01
    3de2:	8d 93       	st	X+, r24
    3de4:	9c 93       	st	X, r25
    3de6:	fe 01       	movw	r30, r28
    3de8:	e1 58       	subi	r30, 0x81	; 129
    3dea:	ff 4f       	sbci	r31, 0xFF	; 255
    3dec:	80 81       	ld	r24, Z
    3dee:	91 81       	ldd	r25, Z+1	; 0x01
    3df0:	01 97       	sbiw	r24, 0x01	; 1
    3df2:	f1 f7       	brne	.-4      	; 0x3df0 <main+0x1b2c>
    3df4:	fe 01       	movw	r30, r28
    3df6:	e1 58       	subi	r30, 0x81	; 129
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	91 83       	std	Z+1, r25	; 0x01
    3dfc:	80 83       	st	Z, r24
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,opendoor)==0){
    3e04:	84 e3       	ldi	r24, 0x34	; 52
    3e06:	93 e0       	ldi	r25, 0x03	; 3
    3e08:	2c e9       	ldi	r18, 0x9C	; 156
    3e0a:	32 e0       	ldi	r19, 0x02	; 2
    3e0c:	b9 01       	movw	r22, r18
    3e0e:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    3e12:	00 97       	sbiw	r24, 0x00	; 0
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <main+0x1b54>
    3e16:	c6 c0       	rjmp	.+396    	; 0x3fa4 <main+0x1ce0>
                  LCD_Send_String("Opening");
    3e18:	81 e1       	ldi	r24, 0x11	; 17
    3e1a:	91 e0       	ldi	r25, 0x01	; 1
    3e1c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
                  LCD_GOTOXY(0,1);
    3e20:	80 e0       	ldi	r24, 0x00	; 0
    3e22:	61 e0       	ldi	r22, 0x01	; 1
    3e24:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
                  LCD_Send_String("the door...");
    3e28:	85 e0       	ldi	r24, 0x05	; 5
    3e2a:	91 e0       	ldi	r25, 0x01	; 1
    3e2c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
                  ServoAngle(openangle);
    3e30:	87 ea       	ldi	r24, 0xA7	; 167
    3e32:	9f ef       	ldi	r25, 0xFF	; 255
    3e34:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <ServoAngle>
    3e38:	fe 01       	movw	r30, r28
    3e3a:	e5 58       	subi	r30, 0x85	; 133
    3e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e3e:	80 e0       	ldi	r24, 0x00	; 0
    3e40:	90 e0       	ldi	r25, 0x00	; 0
    3e42:	aa e7       	ldi	r26, 0x7A	; 122
    3e44:	b4 e4       	ldi	r27, 0x44	; 68
    3e46:	80 83       	st	Z, r24
    3e48:	91 83       	std	Z+1, r25	; 0x01
    3e4a:	a2 83       	std	Z+2, r26	; 0x02
    3e4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e4e:	8e 01       	movw	r16, r28
    3e50:	09 58       	subi	r16, 0x89	; 137
    3e52:	1f 4f       	sbci	r17, 0xFF	; 255
    3e54:	fe 01       	movw	r30, r28
    3e56:	e5 58       	subi	r30, 0x85	; 133
    3e58:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5a:	60 81       	ld	r22, Z
    3e5c:	71 81       	ldd	r23, Z+1	; 0x01
    3e5e:	82 81       	ldd	r24, Z+2	; 0x02
    3e60:	93 81       	ldd	r25, Z+3	; 0x03
    3e62:	20 e0       	ldi	r18, 0x00	; 0
    3e64:	30 e0       	ldi	r19, 0x00	; 0
    3e66:	4a ef       	ldi	r20, 0xFA	; 250
    3e68:	54 e4       	ldi	r21, 0x44	; 68
    3e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e6e:	dc 01       	movw	r26, r24
    3e70:	cb 01       	movw	r24, r22
    3e72:	f8 01       	movw	r30, r16
    3e74:	80 83       	st	Z, r24
    3e76:	91 83       	std	Z+1, r25	; 0x01
    3e78:	a2 83       	std	Z+2, r26	; 0x02
    3e7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7c:	fe 01       	movw	r30, r28
    3e7e:	e9 58       	subi	r30, 0x89	; 137
    3e80:	ff 4f       	sbci	r31, 0xFF	; 255
    3e82:	60 81       	ld	r22, Z
    3e84:	71 81       	ldd	r23, Z+1	; 0x01
    3e86:	82 81       	ldd	r24, Z+2	; 0x02
    3e88:	93 81       	ldd	r25, Z+3	; 0x03
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	30 e0       	ldi	r19, 0x00	; 0
    3e8e:	40 e8       	ldi	r20, 0x80	; 128
    3e90:	5f e3       	ldi	r21, 0x3F	; 63
    3e92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e96:	88 23       	and	r24, r24
    3e98:	44 f4       	brge	.+16     	; 0x3eaa <main+0x1be6>
		__ticks = 1;
    3e9a:	fe 01       	movw	r30, r28
    3e9c:	eb 58       	subi	r30, 0x8B	; 139
    3e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea0:	81 e0       	ldi	r24, 0x01	; 1
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	91 83       	std	Z+1, r25	; 0x01
    3ea6:	80 83       	st	Z, r24
    3ea8:	64 c0       	rjmp	.+200    	; 0x3f72 <main+0x1cae>
	else if (__tmp > 65535)
    3eaa:	fe 01       	movw	r30, r28
    3eac:	e9 58       	subi	r30, 0x89	; 137
    3eae:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb0:	60 81       	ld	r22, Z
    3eb2:	71 81       	ldd	r23, Z+1	; 0x01
    3eb4:	82 81       	ldd	r24, Z+2	; 0x02
    3eb6:	93 81       	ldd	r25, Z+3	; 0x03
    3eb8:	20 e0       	ldi	r18, 0x00	; 0
    3eba:	3f ef       	ldi	r19, 0xFF	; 255
    3ebc:	4f e7       	ldi	r20, 0x7F	; 127
    3ebe:	57 e4       	ldi	r21, 0x47	; 71
    3ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ec4:	18 16       	cp	r1, r24
    3ec6:	0c f0       	brlt	.+2      	; 0x3eca <main+0x1c06>
    3ec8:	43 c0       	rjmp	.+134    	; 0x3f50 <main+0x1c8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eca:	fe 01       	movw	r30, r28
    3ecc:	e5 58       	subi	r30, 0x85	; 133
    3ece:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed0:	60 81       	ld	r22, Z
    3ed2:	71 81       	ldd	r23, Z+1	; 0x01
    3ed4:	82 81       	ldd	r24, Z+2	; 0x02
    3ed6:	93 81       	ldd	r25, Z+3	; 0x03
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	30 e0       	ldi	r19, 0x00	; 0
    3edc:	40 e2       	ldi	r20, 0x20	; 32
    3ede:	51 e4       	ldi	r21, 0x41	; 65
    3ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ee4:	dc 01       	movw	r26, r24
    3ee6:	cb 01       	movw	r24, r22
    3ee8:	8e 01       	movw	r16, r28
    3eea:	0b 58       	subi	r16, 0x8B	; 139
    3eec:	1f 4f       	sbci	r17, 0xFF	; 255
    3eee:	bc 01       	movw	r22, r24
    3ef0:	cd 01       	movw	r24, r26
    3ef2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ef6:	dc 01       	movw	r26, r24
    3ef8:	cb 01       	movw	r24, r22
    3efa:	f8 01       	movw	r30, r16
    3efc:	91 83       	std	Z+1, r25	; 0x01
    3efe:	80 83       	st	Z, r24
    3f00:	1f c0       	rjmp	.+62     	; 0x3f40 <main+0x1c7c>
    3f02:	fe 01       	movw	r30, r28
    3f04:	ed 58       	subi	r30, 0x8D	; 141
    3f06:	ff 4f       	sbci	r31, 0xFF	; 255
    3f08:	88 ec       	ldi	r24, 0xC8	; 200
    3f0a:	90 e0       	ldi	r25, 0x00	; 0
    3f0c:	91 83       	std	Z+1, r25	; 0x01
    3f0e:	80 83       	st	Z, r24
    3f10:	fe 01       	movw	r30, r28
    3f12:	ed 58       	subi	r30, 0x8D	; 141
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	80 81       	ld	r24, Z
    3f18:	91 81       	ldd	r25, Z+1	; 0x01
    3f1a:	01 97       	sbiw	r24, 0x01	; 1
    3f1c:	f1 f7       	brne	.-4      	; 0x3f1a <main+0x1c56>
    3f1e:	fe 01       	movw	r30, r28
    3f20:	ed 58       	subi	r30, 0x8D	; 141
    3f22:	ff 4f       	sbci	r31, 0xFF	; 255
    3f24:	91 83       	std	Z+1, r25	; 0x01
    3f26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f28:	de 01       	movw	r26, r28
    3f2a:	ab 58       	subi	r26, 0x8B	; 139
    3f2c:	bf 4f       	sbci	r27, 0xFF	; 255
    3f2e:	fe 01       	movw	r30, r28
    3f30:	eb 58       	subi	r30, 0x8B	; 139
    3f32:	ff 4f       	sbci	r31, 0xFF	; 255
    3f34:	80 81       	ld	r24, Z
    3f36:	91 81       	ldd	r25, Z+1	; 0x01
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	11 96       	adiw	r26, 0x01	; 1
    3f3c:	9c 93       	st	X, r25
    3f3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f40:	fe 01       	movw	r30, r28
    3f42:	eb 58       	subi	r30, 0x8B	; 139
    3f44:	ff 4f       	sbci	r31, 0xFF	; 255
    3f46:	80 81       	ld	r24, Z
    3f48:	91 81       	ldd	r25, Z+1	; 0x01
    3f4a:	00 97       	sbiw	r24, 0x00	; 0
    3f4c:	d1 f6       	brne	.-76     	; 0x3f02 <main+0x1c3e>
    3f4e:	27 c0       	rjmp	.+78     	; 0x3f9e <main+0x1cda>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f50:	8e 01       	movw	r16, r28
    3f52:	0b 58       	subi	r16, 0x8B	; 139
    3f54:	1f 4f       	sbci	r17, 0xFF	; 255
    3f56:	fe 01       	movw	r30, r28
    3f58:	e9 58       	subi	r30, 0x89	; 137
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	60 81       	ld	r22, Z
    3f5e:	71 81       	ldd	r23, Z+1	; 0x01
    3f60:	82 81       	ldd	r24, Z+2	; 0x02
    3f62:	93 81       	ldd	r25, Z+3	; 0x03
    3f64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f68:	dc 01       	movw	r26, r24
    3f6a:	cb 01       	movw	r24, r22
    3f6c:	f8 01       	movw	r30, r16
    3f6e:	91 83       	std	Z+1, r25	; 0x01
    3f70:	80 83       	st	Z, r24
    3f72:	de 01       	movw	r26, r28
    3f74:	af 58       	subi	r26, 0x8F	; 143
    3f76:	bf 4f       	sbci	r27, 0xFF	; 255
    3f78:	fe 01       	movw	r30, r28
    3f7a:	eb 58       	subi	r30, 0x8B	; 139
    3f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f7e:	80 81       	ld	r24, Z
    3f80:	91 81       	ldd	r25, Z+1	; 0x01
    3f82:	8d 93       	st	X+, r24
    3f84:	9c 93       	st	X, r25
    3f86:	fe 01       	movw	r30, r28
    3f88:	ef 58       	subi	r30, 0x8F	; 143
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	80 81       	ld	r24, Z
    3f8e:	91 81       	ldd	r25, Z+1	; 0x01
    3f90:	01 97       	sbiw	r24, 0x01	; 1
    3f92:	f1 f7       	brne	.-4      	; 0x3f90 <main+0x1ccc>
    3f94:	fe 01       	movw	r30, r28
    3f96:	ef 58       	subi	r30, 0x8F	; 143
    3f98:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9a:	91 83       	std	Z+1, r25	; 0x01
    3f9c:	80 83       	st	Z, r24
                  _delay_ms(1000);
                  LCD8Bit_Send_Command(0x01);
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
                  }
        if(strcmp(command,heavyload1)==0){
    3fa4:	84 e3       	ldi	r24, 0x34	; 52
    3fa6:	93 e0       	ldi	r25, 0x03	; 3
    3fa8:	21 ea       	ldi	r18, 0xA1	; 161
    3faa:	32 e0       	ldi	r19, 0x02	; 2
    3fac:	b9 01       	movw	r22, r18
    3fae:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    3fb2:	00 97       	sbiw	r24, 0x00	; 0
    3fb4:	09 f0       	breq	.+2      	; 0x3fb8 <main+0x1cf4>
    3fb6:	ca c0       	rjmp	.+404    	; 0x414c <main+0x1e88>
           LCD_Send_String("Heavy load 1");
    3fb8:	89 e1       	ldi	r24, 0x19	; 25
    3fba:	91 e0       	ldi	r25, 0x01	; 1
    3fbc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	61 e0       	ldi	r22, 0x01	; 1
    3fc4:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("Switched");
    3fc8:	86 e2       	ldi	r24, 0x26	; 38
    3fca:	91 e0       	ldi	r25, 0x01	; 1
    3fcc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           TOG_BIT(PORTB,2);
    3fd0:	a8 e3       	ldi	r26, 0x38	; 56
    3fd2:	b0 e0       	ldi	r27, 0x00	; 0
    3fd4:	e8 e3       	ldi	r30, 0x38	; 56
    3fd6:	f0 e0       	ldi	r31, 0x00	; 0
    3fd8:	90 81       	ld	r25, Z
    3fda:	84 e0       	ldi	r24, 0x04	; 4
    3fdc:	89 27       	eor	r24, r25
    3fde:	8c 93       	st	X, r24
    3fe0:	fe 01       	movw	r30, r28
    3fe2:	e3 59       	subi	r30, 0x93	; 147
    3fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe6:	80 e0       	ldi	r24, 0x00	; 0
    3fe8:	90 e0       	ldi	r25, 0x00	; 0
    3fea:	aa e7       	ldi	r26, 0x7A	; 122
    3fec:	b4 e4       	ldi	r27, 0x44	; 68
    3fee:	80 83       	st	Z, r24
    3ff0:	91 83       	std	Z+1, r25	; 0x01
    3ff2:	a2 83       	std	Z+2, r26	; 0x02
    3ff4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ff6:	8e 01       	movw	r16, r28
    3ff8:	07 59       	subi	r16, 0x97	; 151
    3ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e3 59       	subi	r30, 0x93	; 147
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	60 81       	ld	r22, Z
    4004:	71 81       	ldd	r23, Z+1	; 0x01
    4006:	82 81       	ldd	r24, Z+2	; 0x02
    4008:	93 81       	ldd	r25, Z+3	; 0x03
    400a:	20 e0       	ldi	r18, 0x00	; 0
    400c:	30 e0       	ldi	r19, 0x00	; 0
    400e:	4a ef       	ldi	r20, 0xFA	; 250
    4010:	54 e4       	ldi	r21, 0x44	; 68
    4012:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4016:	dc 01       	movw	r26, r24
    4018:	cb 01       	movw	r24, r22
    401a:	f8 01       	movw	r30, r16
    401c:	80 83       	st	Z, r24
    401e:	91 83       	std	Z+1, r25	; 0x01
    4020:	a2 83       	std	Z+2, r26	; 0x02
    4022:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4024:	fe 01       	movw	r30, r28
    4026:	e7 59       	subi	r30, 0x97	; 151
    4028:	ff 4f       	sbci	r31, 0xFF	; 255
    402a:	60 81       	ld	r22, Z
    402c:	71 81       	ldd	r23, Z+1	; 0x01
    402e:	82 81       	ldd	r24, Z+2	; 0x02
    4030:	93 81       	ldd	r25, Z+3	; 0x03
    4032:	20 e0       	ldi	r18, 0x00	; 0
    4034:	30 e0       	ldi	r19, 0x00	; 0
    4036:	40 e8       	ldi	r20, 0x80	; 128
    4038:	5f e3       	ldi	r21, 0x3F	; 63
    403a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    403e:	88 23       	and	r24, r24
    4040:	44 f4       	brge	.+16     	; 0x4052 <main+0x1d8e>
		__ticks = 1;
    4042:	fe 01       	movw	r30, r28
    4044:	e9 59       	subi	r30, 0x99	; 153
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	81 e0       	ldi	r24, 0x01	; 1
    404a:	90 e0       	ldi	r25, 0x00	; 0
    404c:	91 83       	std	Z+1, r25	; 0x01
    404e:	80 83       	st	Z, r24
    4050:	64 c0       	rjmp	.+200    	; 0x411a <main+0x1e56>
	else if (__tmp > 65535)
    4052:	fe 01       	movw	r30, r28
    4054:	e7 59       	subi	r30, 0x97	; 151
    4056:	ff 4f       	sbci	r31, 0xFF	; 255
    4058:	60 81       	ld	r22, Z
    405a:	71 81       	ldd	r23, Z+1	; 0x01
    405c:	82 81       	ldd	r24, Z+2	; 0x02
    405e:	93 81       	ldd	r25, Z+3	; 0x03
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	3f ef       	ldi	r19, 0xFF	; 255
    4064:	4f e7       	ldi	r20, 0x7F	; 127
    4066:	57 e4       	ldi	r21, 0x47	; 71
    4068:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    406c:	18 16       	cp	r1, r24
    406e:	0c f0       	brlt	.+2      	; 0x4072 <main+0x1dae>
    4070:	43 c0       	rjmp	.+134    	; 0x40f8 <main+0x1e34>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4072:	fe 01       	movw	r30, r28
    4074:	e3 59       	subi	r30, 0x93	; 147
    4076:	ff 4f       	sbci	r31, 0xFF	; 255
    4078:	60 81       	ld	r22, Z
    407a:	71 81       	ldd	r23, Z+1	; 0x01
    407c:	82 81       	ldd	r24, Z+2	; 0x02
    407e:	93 81       	ldd	r25, Z+3	; 0x03
    4080:	20 e0       	ldi	r18, 0x00	; 0
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	40 e2       	ldi	r20, 0x20	; 32
    4086:	51 e4       	ldi	r21, 0x41	; 65
    4088:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	8e 01       	movw	r16, r28
    4092:	09 59       	subi	r16, 0x99	; 153
    4094:	1f 4f       	sbci	r17, 0xFF	; 255
    4096:	bc 01       	movw	r22, r24
    4098:	cd 01       	movw	r24, r26
    409a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    409e:	dc 01       	movw	r26, r24
    40a0:	cb 01       	movw	r24, r22
    40a2:	f8 01       	movw	r30, r16
    40a4:	91 83       	std	Z+1, r25	; 0x01
    40a6:	80 83       	st	Z, r24
    40a8:	1f c0       	rjmp	.+62     	; 0x40e8 <main+0x1e24>
    40aa:	fe 01       	movw	r30, r28
    40ac:	eb 59       	subi	r30, 0x9B	; 155
    40ae:	ff 4f       	sbci	r31, 0xFF	; 255
    40b0:	88 ec       	ldi	r24, 0xC8	; 200
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	80 83       	st	Z, r24
    40b8:	fe 01       	movw	r30, r28
    40ba:	eb 59       	subi	r30, 0x9B	; 155
    40bc:	ff 4f       	sbci	r31, 0xFF	; 255
    40be:	80 81       	ld	r24, Z
    40c0:	91 81       	ldd	r25, Z+1	; 0x01
    40c2:	01 97       	sbiw	r24, 0x01	; 1
    40c4:	f1 f7       	brne	.-4      	; 0x40c2 <main+0x1dfe>
    40c6:	fe 01       	movw	r30, r28
    40c8:	eb 59       	subi	r30, 0x9B	; 155
    40ca:	ff 4f       	sbci	r31, 0xFF	; 255
    40cc:	91 83       	std	Z+1, r25	; 0x01
    40ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40d0:	de 01       	movw	r26, r28
    40d2:	a9 59       	subi	r26, 0x99	; 153
    40d4:	bf 4f       	sbci	r27, 0xFF	; 255
    40d6:	fe 01       	movw	r30, r28
    40d8:	e9 59       	subi	r30, 0x99	; 153
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	80 81       	ld	r24, Z
    40de:	91 81       	ldd	r25, Z+1	; 0x01
    40e0:	01 97       	sbiw	r24, 0x01	; 1
    40e2:	11 96       	adiw	r26, 0x01	; 1
    40e4:	9c 93       	st	X, r25
    40e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40e8:	fe 01       	movw	r30, r28
    40ea:	e9 59       	subi	r30, 0x99	; 153
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	80 81       	ld	r24, Z
    40f0:	91 81       	ldd	r25, Z+1	; 0x01
    40f2:	00 97       	sbiw	r24, 0x00	; 0
    40f4:	d1 f6       	brne	.-76     	; 0x40aa <main+0x1de6>
    40f6:	27 c0       	rjmp	.+78     	; 0x4146 <main+0x1e82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f8:	8e 01       	movw	r16, r28
    40fa:	09 59       	subi	r16, 0x99	; 153
    40fc:	1f 4f       	sbci	r17, 0xFF	; 255
    40fe:	fe 01       	movw	r30, r28
    4100:	e7 59       	subi	r30, 0x97	; 151
    4102:	ff 4f       	sbci	r31, 0xFF	; 255
    4104:	60 81       	ld	r22, Z
    4106:	71 81       	ldd	r23, Z+1	; 0x01
    4108:	82 81       	ldd	r24, Z+2	; 0x02
    410a:	93 81       	ldd	r25, Z+3	; 0x03
    410c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4110:	dc 01       	movw	r26, r24
    4112:	cb 01       	movw	r24, r22
    4114:	f8 01       	movw	r30, r16
    4116:	91 83       	std	Z+1, r25	; 0x01
    4118:	80 83       	st	Z, r24
    411a:	de 01       	movw	r26, r28
    411c:	ad 59       	subi	r26, 0x9D	; 157
    411e:	bf 4f       	sbci	r27, 0xFF	; 255
    4120:	fe 01       	movw	r30, r28
    4122:	e9 59       	subi	r30, 0x99	; 153
    4124:	ff 4f       	sbci	r31, 0xFF	; 255
    4126:	80 81       	ld	r24, Z
    4128:	91 81       	ldd	r25, Z+1	; 0x01
    412a:	8d 93       	st	X+, r24
    412c:	9c 93       	st	X, r25
    412e:	fe 01       	movw	r30, r28
    4130:	ed 59       	subi	r30, 0x9D	; 157
    4132:	ff 4f       	sbci	r31, 0xFF	; 255
    4134:	80 81       	ld	r24, Z
    4136:	91 81       	ldd	r25, Z+1	; 0x01
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	f1 f7       	brne	.-4      	; 0x4138 <main+0x1e74>
    413c:	fe 01       	movw	r30, r28
    413e:	ed 59       	subi	r30, 0x9D	; 157
    4140:	ff 4f       	sbci	r31, 0xFF	; 255
    4142:	91 83       	std	Z+1, r25	; 0x01
    4144:	80 83       	st	Z, r24
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,heavyload2)==0){
    414c:	84 e3       	ldi	r24, 0x34	; 52
    414e:	93 e0       	ldi	r25, 0x03	; 3
    4150:	26 ea       	ldi	r18, 0xA6	; 166
    4152:	32 e0       	ldi	r19, 0x02	; 2
    4154:	b9 01       	movw	r22, r18
    4156:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    415a:	00 97       	sbiw	r24, 0x00	; 0
    415c:	09 f0       	breq	.+2      	; 0x4160 <main+0x1e9c>
    415e:	ca c0       	rjmp	.+404    	; 0x42f4 <main+0x2030>
           LCD_Send_String("Heavy load 2");
    4160:	8f e2       	ldi	r24, 0x2F	; 47
    4162:	91 e0       	ldi	r25, 0x01	; 1
    4164:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    4168:	80 e0       	ldi	r24, 0x00	; 0
    416a:	61 e0       	ldi	r22, 0x01	; 1
    416c:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("Switched");
    4170:	86 e2       	ldi	r24, 0x26	; 38
    4172:	91 e0       	ldi	r25, 0x01	; 1
    4174:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           TOG_BIT(PORTD,6);
    4178:	a2 e3       	ldi	r26, 0x32	; 50
    417a:	b0 e0       	ldi	r27, 0x00	; 0
    417c:	e2 e3       	ldi	r30, 0x32	; 50
    417e:	f0 e0       	ldi	r31, 0x00	; 0
    4180:	90 81       	ld	r25, Z
    4182:	80 e4       	ldi	r24, 0x40	; 64
    4184:	89 27       	eor	r24, r25
    4186:	8c 93       	st	X, r24
    4188:	fe 01       	movw	r30, r28
    418a:	e1 5a       	subi	r30, 0xA1	; 161
    418c:	ff 4f       	sbci	r31, 0xFF	; 255
    418e:	80 e0       	ldi	r24, 0x00	; 0
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	aa e7       	ldi	r26, 0x7A	; 122
    4194:	b4 e4       	ldi	r27, 0x44	; 68
    4196:	80 83       	st	Z, r24
    4198:	91 83       	std	Z+1, r25	; 0x01
    419a:	a2 83       	std	Z+2, r26	; 0x02
    419c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    419e:	8e 01       	movw	r16, r28
    41a0:	05 5a       	subi	r16, 0xA5	; 165
    41a2:	1f 4f       	sbci	r17, 0xFF	; 255
    41a4:	fe 01       	movw	r30, r28
    41a6:	e1 5a       	subi	r30, 0xA1	; 161
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	4a ef       	ldi	r20, 0xFA	; 250
    41b8:	54 e4       	ldi	r21, 0x44	; 68
    41ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	f8 01       	movw	r30, r16
    41c4:	80 83       	st	Z, r24
    41c6:	91 83       	std	Z+1, r25	; 0x01
    41c8:	a2 83       	std	Z+2, r26	; 0x02
    41ca:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41cc:	fe 01       	movw	r30, r28
    41ce:	e5 5a       	subi	r30, 0xA5	; 165
    41d0:	ff 4f       	sbci	r31, 0xFF	; 255
    41d2:	60 81       	ld	r22, Z
    41d4:	71 81       	ldd	r23, Z+1	; 0x01
    41d6:	82 81       	ldd	r24, Z+2	; 0x02
    41d8:	93 81       	ldd	r25, Z+3	; 0x03
    41da:	20 e0       	ldi	r18, 0x00	; 0
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 e8       	ldi	r20, 0x80	; 128
    41e0:	5f e3       	ldi	r21, 0x3F	; 63
    41e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41e6:	88 23       	and	r24, r24
    41e8:	44 f4       	brge	.+16     	; 0x41fa <main+0x1f36>
		__ticks = 1;
    41ea:	fe 01       	movw	r30, r28
    41ec:	e7 5a       	subi	r30, 0xA7	; 167
    41ee:	ff 4f       	sbci	r31, 0xFF	; 255
    41f0:	81 e0       	ldi	r24, 0x01	; 1
    41f2:	90 e0       	ldi	r25, 0x00	; 0
    41f4:	91 83       	std	Z+1, r25	; 0x01
    41f6:	80 83       	st	Z, r24
    41f8:	64 c0       	rjmp	.+200    	; 0x42c2 <main+0x1ffe>
	else if (__tmp > 65535)
    41fa:	fe 01       	movw	r30, r28
    41fc:	e5 5a       	subi	r30, 0xA5	; 165
    41fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	20 e0       	ldi	r18, 0x00	; 0
    420a:	3f ef       	ldi	r19, 0xFF	; 255
    420c:	4f e7       	ldi	r20, 0x7F	; 127
    420e:	57 e4       	ldi	r21, 0x47	; 71
    4210:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4214:	18 16       	cp	r1, r24
    4216:	0c f0       	brlt	.+2      	; 0x421a <main+0x1f56>
    4218:	43 c0       	rjmp	.+134    	; 0x42a0 <main+0x1fdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    421a:	fe 01       	movw	r30, r28
    421c:	e1 5a       	subi	r30, 0xA1	; 161
    421e:	ff 4f       	sbci	r31, 0xFF	; 255
    4220:	60 81       	ld	r22, Z
    4222:	71 81       	ldd	r23, Z+1	; 0x01
    4224:	82 81       	ldd	r24, Z+2	; 0x02
    4226:	93 81       	ldd	r25, Z+3	; 0x03
    4228:	20 e0       	ldi	r18, 0x00	; 0
    422a:	30 e0       	ldi	r19, 0x00	; 0
    422c:	40 e2       	ldi	r20, 0x20	; 32
    422e:	51 e4       	ldi	r21, 0x41	; 65
    4230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4234:	dc 01       	movw	r26, r24
    4236:	cb 01       	movw	r24, r22
    4238:	8e 01       	movw	r16, r28
    423a:	07 5a       	subi	r16, 0xA7	; 167
    423c:	1f 4f       	sbci	r17, 0xFF	; 255
    423e:	bc 01       	movw	r22, r24
    4240:	cd 01       	movw	r24, r26
    4242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4246:	dc 01       	movw	r26, r24
    4248:	cb 01       	movw	r24, r22
    424a:	f8 01       	movw	r30, r16
    424c:	91 83       	std	Z+1, r25	; 0x01
    424e:	80 83       	st	Z, r24
    4250:	1f c0       	rjmp	.+62     	; 0x4290 <main+0x1fcc>
    4252:	fe 01       	movw	r30, r28
    4254:	e9 5a       	subi	r30, 0xA9	; 169
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	88 ec       	ldi	r24, 0xC8	; 200
    425a:	90 e0       	ldi	r25, 0x00	; 0
    425c:	91 83       	std	Z+1, r25	; 0x01
    425e:	80 83       	st	Z, r24
    4260:	fe 01       	movw	r30, r28
    4262:	e9 5a       	subi	r30, 0xA9	; 169
    4264:	ff 4f       	sbci	r31, 0xFF	; 255
    4266:	80 81       	ld	r24, Z
    4268:	91 81       	ldd	r25, Z+1	; 0x01
    426a:	01 97       	sbiw	r24, 0x01	; 1
    426c:	f1 f7       	brne	.-4      	; 0x426a <main+0x1fa6>
    426e:	fe 01       	movw	r30, r28
    4270:	e9 5a       	subi	r30, 0xA9	; 169
    4272:	ff 4f       	sbci	r31, 0xFF	; 255
    4274:	91 83       	std	Z+1, r25	; 0x01
    4276:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4278:	de 01       	movw	r26, r28
    427a:	a7 5a       	subi	r26, 0xA7	; 167
    427c:	bf 4f       	sbci	r27, 0xFF	; 255
    427e:	fe 01       	movw	r30, r28
    4280:	e7 5a       	subi	r30, 0xA7	; 167
    4282:	ff 4f       	sbci	r31, 0xFF	; 255
    4284:	80 81       	ld	r24, Z
    4286:	91 81       	ldd	r25, Z+1	; 0x01
    4288:	01 97       	sbiw	r24, 0x01	; 1
    428a:	11 96       	adiw	r26, 0x01	; 1
    428c:	9c 93       	st	X, r25
    428e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4290:	fe 01       	movw	r30, r28
    4292:	e7 5a       	subi	r30, 0xA7	; 167
    4294:	ff 4f       	sbci	r31, 0xFF	; 255
    4296:	80 81       	ld	r24, Z
    4298:	91 81       	ldd	r25, Z+1	; 0x01
    429a:	00 97       	sbiw	r24, 0x00	; 0
    429c:	d1 f6       	brne	.-76     	; 0x4252 <main+0x1f8e>
    429e:	27 c0       	rjmp	.+78     	; 0x42ee <main+0x202a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42a0:	8e 01       	movw	r16, r28
    42a2:	07 5a       	subi	r16, 0xA7	; 167
    42a4:	1f 4f       	sbci	r17, 0xFF	; 255
    42a6:	fe 01       	movw	r30, r28
    42a8:	e5 5a       	subi	r30, 0xA5	; 165
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	f8 01       	movw	r30, r16
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
    42c2:	de 01       	movw	r26, r28
    42c4:	ab 5a       	subi	r26, 0xAB	; 171
    42c6:	bf 4f       	sbci	r27, 0xFF	; 255
    42c8:	fe 01       	movw	r30, r28
    42ca:	e7 5a       	subi	r30, 0xA7	; 167
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 81       	ld	r24, Z
    42d0:	91 81       	ldd	r25, Z+1	; 0x01
    42d2:	8d 93       	st	X+, r24
    42d4:	9c 93       	st	X, r25
    42d6:	fe 01       	movw	r30, r28
    42d8:	eb 5a       	subi	r30, 0xAB	; 171
    42da:	ff 4f       	sbci	r31, 0xFF	; 255
    42dc:	80 81       	ld	r24, Z
    42de:	91 81       	ldd	r25, Z+1	; 0x01
    42e0:	01 97       	sbiw	r24, 0x01	; 1
    42e2:	f1 f7       	brne	.-4      	; 0x42e0 <main+0x201c>
    42e4:	fe 01       	movw	r30, r28
    42e6:	eb 5a       	subi	r30, 0xAB	; 171
    42e8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ea:	91 83       	std	Z+1, r25	; 0x01
    42ec:	80 83       	st	Z, r24
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    42ee:	81 e0       	ldi	r24, 0x01	; 1
    42f0:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,heavyload3)==0){
    42f4:	84 e3       	ldi	r24, 0x34	; 52
    42f6:	93 e0       	ldi	r25, 0x03	; 3
    42f8:	2b ea       	ldi	r18, 0xAB	; 171
    42fa:	32 e0       	ldi	r19, 0x02	; 2
    42fc:	b9 01       	movw	r22, r18
    42fe:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    4302:	00 97       	sbiw	r24, 0x00	; 0
    4304:	09 f0       	breq	.+2      	; 0x4308 <main+0x2044>
    4306:	ca c0       	rjmp	.+404    	; 0x449c <main+0x21d8>
           LCD_Send_String("Heavy load 3");
    4308:	8c e3       	ldi	r24, 0x3C	; 60
    430a:	91 e0       	ldi	r25, 0x01	; 1
    430c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    4310:	80 e0       	ldi	r24, 0x00	; 0
    4312:	61 e0       	ldi	r22, 0x01	; 1
    4314:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("Switched");
    4318:	86 e2       	ldi	r24, 0x26	; 38
    431a:	91 e0       	ldi	r25, 0x01	; 1
    431c:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           TOG_BIT(PORTB,7);
    4320:	a8 e3       	ldi	r26, 0x38	; 56
    4322:	b0 e0       	ldi	r27, 0x00	; 0
    4324:	e8 e3       	ldi	r30, 0x38	; 56
    4326:	f0 e0       	ldi	r31, 0x00	; 0
    4328:	90 81       	ld	r25, Z
    432a:	80 e8       	ldi	r24, 0x80	; 128
    432c:	89 27       	eor	r24, r25
    432e:	8c 93       	st	X, r24
    4330:	fe 01       	movw	r30, r28
    4332:	ef 5a       	subi	r30, 0xAF	; 175
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	80 e0       	ldi	r24, 0x00	; 0
    4338:	90 e0       	ldi	r25, 0x00	; 0
    433a:	aa e7       	ldi	r26, 0x7A	; 122
    433c:	b4 e4       	ldi	r27, 0x44	; 68
    433e:	80 83       	st	Z, r24
    4340:	91 83       	std	Z+1, r25	; 0x01
    4342:	a2 83       	std	Z+2, r26	; 0x02
    4344:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4346:	8e 01       	movw	r16, r28
    4348:	03 5b       	subi	r16, 0xB3	; 179
    434a:	1f 4f       	sbci	r17, 0xFF	; 255
    434c:	fe 01       	movw	r30, r28
    434e:	ef 5a       	subi	r30, 0xAF	; 175
    4350:	ff 4f       	sbci	r31, 0xFF	; 255
    4352:	60 81       	ld	r22, Z
    4354:	71 81       	ldd	r23, Z+1	; 0x01
    4356:	82 81       	ldd	r24, Z+2	; 0x02
    4358:	93 81       	ldd	r25, Z+3	; 0x03
    435a:	20 e0       	ldi	r18, 0x00	; 0
    435c:	30 e0       	ldi	r19, 0x00	; 0
    435e:	4a ef       	ldi	r20, 0xFA	; 250
    4360:	54 e4       	ldi	r21, 0x44	; 68
    4362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4366:	dc 01       	movw	r26, r24
    4368:	cb 01       	movw	r24, r22
    436a:	f8 01       	movw	r30, r16
    436c:	80 83       	st	Z, r24
    436e:	91 83       	std	Z+1, r25	; 0x01
    4370:	a2 83       	std	Z+2, r26	; 0x02
    4372:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4374:	fe 01       	movw	r30, r28
    4376:	e3 5b       	subi	r30, 0xB3	; 179
    4378:	ff 4f       	sbci	r31, 0xFF	; 255
    437a:	60 81       	ld	r22, Z
    437c:	71 81       	ldd	r23, Z+1	; 0x01
    437e:	82 81       	ldd	r24, Z+2	; 0x02
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	40 e8       	ldi	r20, 0x80	; 128
    4388:	5f e3       	ldi	r21, 0x3F	; 63
    438a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    438e:	88 23       	and	r24, r24
    4390:	44 f4       	brge	.+16     	; 0x43a2 <main+0x20de>
		__ticks = 1;
    4392:	fe 01       	movw	r30, r28
    4394:	e5 5b       	subi	r30, 0xB5	; 181
    4396:	ff 4f       	sbci	r31, 0xFF	; 255
    4398:	81 e0       	ldi	r24, 0x01	; 1
    439a:	90 e0       	ldi	r25, 0x00	; 0
    439c:	91 83       	std	Z+1, r25	; 0x01
    439e:	80 83       	st	Z, r24
    43a0:	64 c0       	rjmp	.+200    	; 0x446a <main+0x21a6>
	else if (__tmp > 65535)
    43a2:	fe 01       	movw	r30, r28
    43a4:	e3 5b       	subi	r30, 0xB3	; 179
    43a6:	ff 4f       	sbci	r31, 0xFF	; 255
    43a8:	60 81       	ld	r22, Z
    43aa:	71 81       	ldd	r23, Z+1	; 0x01
    43ac:	82 81       	ldd	r24, Z+2	; 0x02
    43ae:	93 81       	ldd	r25, Z+3	; 0x03
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	3f ef       	ldi	r19, 0xFF	; 255
    43b4:	4f e7       	ldi	r20, 0x7F	; 127
    43b6:	57 e4       	ldi	r21, 0x47	; 71
    43b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43bc:	18 16       	cp	r1, r24
    43be:	0c f0       	brlt	.+2      	; 0x43c2 <main+0x20fe>
    43c0:	43 c0       	rjmp	.+134    	; 0x4448 <main+0x2184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c2:	fe 01       	movw	r30, r28
    43c4:	ef 5a       	subi	r30, 0xAF	; 175
    43c6:	ff 4f       	sbci	r31, 0xFF	; 255
    43c8:	60 81       	ld	r22, Z
    43ca:	71 81       	ldd	r23, Z+1	; 0x01
    43cc:	82 81       	ldd	r24, Z+2	; 0x02
    43ce:	93 81       	ldd	r25, Z+3	; 0x03
    43d0:	20 e0       	ldi	r18, 0x00	; 0
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	40 e2       	ldi	r20, 0x20	; 32
    43d6:	51 e4       	ldi	r21, 0x41	; 65
    43d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43dc:	dc 01       	movw	r26, r24
    43de:	cb 01       	movw	r24, r22
    43e0:	8e 01       	movw	r16, r28
    43e2:	05 5b       	subi	r16, 0xB5	; 181
    43e4:	1f 4f       	sbci	r17, 0xFF	; 255
    43e6:	bc 01       	movw	r22, r24
    43e8:	cd 01       	movw	r24, r26
    43ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	f8 01       	movw	r30, r16
    43f4:	91 83       	std	Z+1, r25	; 0x01
    43f6:	80 83       	st	Z, r24
    43f8:	1f c0       	rjmp	.+62     	; 0x4438 <main+0x2174>
    43fa:	fe 01       	movw	r30, r28
    43fc:	e7 5b       	subi	r30, 0xB7	; 183
    43fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4400:	88 ec       	ldi	r24, 0xC8	; 200
    4402:	90 e0       	ldi	r25, 0x00	; 0
    4404:	91 83       	std	Z+1, r25	; 0x01
    4406:	80 83       	st	Z, r24
    4408:	fe 01       	movw	r30, r28
    440a:	e7 5b       	subi	r30, 0xB7	; 183
    440c:	ff 4f       	sbci	r31, 0xFF	; 255
    440e:	80 81       	ld	r24, Z
    4410:	91 81       	ldd	r25, Z+1	; 0x01
    4412:	01 97       	sbiw	r24, 0x01	; 1
    4414:	f1 f7       	brne	.-4      	; 0x4412 <main+0x214e>
    4416:	fe 01       	movw	r30, r28
    4418:	e7 5b       	subi	r30, 0xB7	; 183
    441a:	ff 4f       	sbci	r31, 0xFF	; 255
    441c:	91 83       	std	Z+1, r25	; 0x01
    441e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4420:	de 01       	movw	r26, r28
    4422:	a5 5b       	subi	r26, 0xB5	; 181
    4424:	bf 4f       	sbci	r27, 0xFF	; 255
    4426:	fe 01       	movw	r30, r28
    4428:	e5 5b       	subi	r30, 0xB5	; 181
    442a:	ff 4f       	sbci	r31, 0xFF	; 255
    442c:	80 81       	ld	r24, Z
    442e:	91 81       	ldd	r25, Z+1	; 0x01
    4430:	01 97       	sbiw	r24, 0x01	; 1
    4432:	11 96       	adiw	r26, 0x01	; 1
    4434:	9c 93       	st	X, r25
    4436:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4438:	fe 01       	movw	r30, r28
    443a:	e5 5b       	subi	r30, 0xB5	; 181
    443c:	ff 4f       	sbci	r31, 0xFF	; 255
    443e:	80 81       	ld	r24, Z
    4440:	91 81       	ldd	r25, Z+1	; 0x01
    4442:	00 97       	sbiw	r24, 0x00	; 0
    4444:	d1 f6       	brne	.-76     	; 0x43fa <main+0x2136>
    4446:	27 c0       	rjmp	.+78     	; 0x4496 <main+0x21d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4448:	8e 01       	movw	r16, r28
    444a:	05 5b       	subi	r16, 0xB5	; 181
    444c:	1f 4f       	sbci	r17, 0xFF	; 255
    444e:	fe 01       	movw	r30, r28
    4450:	e3 5b       	subi	r30, 0xB3	; 179
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	60 81       	ld	r22, Z
    4456:	71 81       	ldd	r23, Z+1	; 0x01
    4458:	82 81       	ldd	r24, Z+2	; 0x02
    445a:	93 81       	ldd	r25, Z+3	; 0x03
    445c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4460:	dc 01       	movw	r26, r24
    4462:	cb 01       	movw	r24, r22
    4464:	f8 01       	movw	r30, r16
    4466:	91 83       	std	Z+1, r25	; 0x01
    4468:	80 83       	st	Z, r24
    446a:	de 01       	movw	r26, r28
    446c:	a9 5b       	subi	r26, 0xB9	; 185
    446e:	bf 4f       	sbci	r27, 0xFF	; 255
    4470:	fe 01       	movw	r30, r28
    4472:	e5 5b       	subi	r30, 0xB5	; 181
    4474:	ff 4f       	sbci	r31, 0xFF	; 255
    4476:	80 81       	ld	r24, Z
    4478:	91 81       	ldd	r25, Z+1	; 0x01
    447a:	8d 93       	st	X+, r24
    447c:	9c 93       	st	X, r25
    447e:	fe 01       	movw	r30, r28
    4480:	e9 5b       	subi	r30, 0xB9	; 185
    4482:	ff 4f       	sbci	r31, 0xFF	; 255
    4484:	80 81       	ld	r24, Z
    4486:	91 81       	ldd	r25, Z+1	; 0x01
    4488:	01 97       	sbiw	r24, 0x01	; 1
    448a:	f1 f7       	brne	.-4      	; 0x4488 <main+0x21c4>
    448c:	fe 01       	movw	r30, r28
    448e:	e9 5b       	subi	r30, 0xB9	; 185
    4490:	ff 4f       	sbci	r31, 0xFF	; 255
    4492:	91 83       	std	Z+1, r25	; 0x01
    4494:	80 83       	st	Z, r24
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,heavyload4)==0){
    449c:	84 e3       	ldi	r24, 0x34	; 52
    449e:	93 e0       	ldi	r25, 0x03	; 3
    44a0:	20 eb       	ldi	r18, 0xB0	; 176
    44a2:	32 e0       	ldi	r19, 0x02	; 2
    44a4:	b9 01       	movw	r22, r18
    44a6:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    44aa:	00 97       	sbiw	r24, 0x00	; 0
    44ac:	09 f0       	breq	.+2      	; 0x44b0 <main+0x21ec>
    44ae:	9c c0       	rjmp	.+312    	; 0x45e8 <main+0x2324>
           LCD_Send_String("Heavy load");
    44b0:	89 e4       	ldi	r24, 0x49	; 73
    44b2:	91 e0       	ldi	r25, 0x01	; 1
    44b4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	61 e0       	ldi	r22, 0x01	; 1
    44bc:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("Switched");
    44c0:	86 e2       	ldi	r24, 0x26	; 38
    44c2:	91 e0       	ldi	r25, 0x01	; 1
    44c4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           TOG_BIT(PORTD,4);
    44c8:	a2 e3       	ldi	r26, 0x32	; 50
    44ca:	b0 e0       	ldi	r27, 0x00	; 0
    44cc:	e2 e3       	ldi	r30, 0x32	; 50
    44ce:	f0 e0       	ldi	r31, 0x00	; 0
    44d0:	90 81       	ld	r25, Z
    44d2:	80 e1       	ldi	r24, 0x10	; 16
    44d4:	89 27       	eor	r24, r25
    44d6:	8c 93       	st	X, r24
    44d8:	fe 01       	movw	r30, r28
    44da:	ed 5b       	subi	r30, 0xBD	; 189
    44dc:	ff 4f       	sbci	r31, 0xFF	; 255
    44de:	80 e0       	ldi	r24, 0x00	; 0
    44e0:	90 e0       	ldi	r25, 0x00	; 0
    44e2:	aa e7       	ldi	r26, 0x7A	; 122
    44e4:	b4 e4       	ldi	r27, 0x44	; 68
    44e6:	80 83       	st	Z, r24
    44e8:	91 83       	std	Z+1, r25	; 0x01
    44ea:	a2 83       	std	Z+2, r26	; 0x02
    44ec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ee:	8e 01       	movw	r16, r28
    44f0:	01 5c       	subi	r16, 0xC1	; 193
    44f2:	1f 4f       	sbci	r17, 0xFF	; 255
    44f4:	fe 01       	movw	r30, r28
    44f6:	ed 5b       	subi	r30, 0xBD	; 189
    44f8:	ff 4f       	sbci	r31, 0xFF	; 255
    44fa:	60 81       	ld	r22, Z
    44fc:	71 81       	ldd	r23, Z+1	; 0x01
    44fe:	82 81       	ldd	r24, Z+2	; 0x02
    4500:	93 81       	ldd	r25, Z+3	; 0x03
    4502:	20 e0       	ldi	r18, 0x00	; 0
    4504:	30 e0       	ldi	r19, 0x00	; 0
    4506:	4a ef       	ldi	r20, 0xFA	; 250
    4508:	54 e4       	ldi	r21, 0x44	; 68
    450a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    450e:	dc 01       	movw	r26, r24
    4510:	cb 01       	movw	r24, r22
    4512:	f8 01       	movw	r30, r16
    4514:	80 83       	st	Z, r24
    4516:	91 83       	std	Z+1, r25	; 0x01
    4518:	a2 83       	std	Z+2, r26	; 0x02
    451a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    451c:	fe 01       	movw	r30, r28
    451e:	ff 96       	adiw	r30, 0x3f	; 63
    4520:	60 81       	ld	r22, Z
    4522:	71 81       	ldd	r23, Z+1	; 0x01
    4524:	82 81       	ldd	r24, Z+2	; 0x02
    4526:	93 81       	ldd	r25, Z+3	; 0x03
    4528:	20 e0       	ldi	r18, 0x00	; 0
    452a:	30 e0       	ldi	r19, 0x00	; 0
    452c:	40 e8       	ldi	r20, 0x80	; 128
    452e:	5f e3       	ldi	r21, 0x3F	; 63
    4530:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4534:	88 23       	and	r24, r24
    4536:	2c f4       	brge	.+10     	; 0x4542 <main+0x227e>
		__ticks = 1;
    4538:	81 e0       	ldi	r24, 0x01	; 1
    453a:	90 e0       	ldi	r25, 0x00	; 0
    453c:	9e af       	std	Y+62, r25	; 0x3e
    453e:	8d af       	std	Y+61, r24	; 0x3d
    4540:	46 c0       	rjmp	.+140    	; 0x45ce <main+0x230a>
	else if (__tmp > 65535)
    4542:	fe 01       	movw	r30, r28
    4544:	ff 96       	adiw	r30, 0x3f	; 63
    4546:	60 81       	ld	r22, Z
    4548:	71 81       	ldd	r23, Z+1	; 0x01
    454a:	82 81       	ldd	r24, Z+2	; 0x02
    454c:	93 81       	ldd	r25, Z+3	; 0x03
    454e:	20 e0       	ldi	r18, 0x00	; 0
    4550:	3f ef       	ldi	r19, 0xFF	; 255
    4552:	4f e7       	ldi	r20, 0x7F	; 127
    4554:	57 e4       	ldi	r21, 0x47	; 71
    4556:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    455a:	18 16       	cp	r1, r24
    455c:	64 f5       	brge	.+88     	; 0x45b6 <main+0x22f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    455e:	fe 01       	movw	r30, r28
    4560:	ed 5b       	subi	r30, 0xBD	; 189
    4562:	ff 4f       	sbci	r31, 0xFF	; 255
    4564:	60 81       	ld	r22, Z
    4566:	71 81       	ldd	r23, Z+1	; 0x01
    4568:	82 81       	ldd	r24, Z+2	; 0x02
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	20 e0       	ldi	r18, 0x00	; 0
    456e:	30 e0       	ldi	r19, 0x00	; 0
    4570:	40 e2       	ldi	r20, 0x20	; 32
    4572:	51 e4       	ldi	r21, 0x41	; 65
    4574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4578:	dc 01       	movw	r26, r24
    457a:	cb 01       	movw	r24, r22
    457c:	bc 01       	movw	r22, r24
    457e:	cd 01       	movw	r24, r26
    4580:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	9e af       	std	Y+62, r25	; 0x3e
    458a:	8d af       	std	Y+61, r24	; 0x3d
    458c:	0f c0       	rjmp	.+30     	; 0x45ac <main+0x22e8>
    458e:	88 ec       	ldi	r24, 0xC8	; 200
    4590:	90 e0       	ldi	r25, 0x00	; 0
    4592:	9c af       	std	Y+60, r25	; 0x3c
    4594:	8b af       	std	Y+59, r24	; 0x3b
    4596:	8b ad       	ldd	r24, Y+59	; 0x3b
    4598:	9c ad       	ldd	r25, Y+60	; 0x3c
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	f1 f7       	brne	.-4      	; 0x459a <main+0x22d6>
    459e:	9c af       	std	Y+60, r25	; 0x3c
    45a0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a2:	8d ad       	ldd	r24, Y+61	; 0x3d
    45a4:	9e ad       	ldd	r25, Y+62	; 0x3e
    45a6:	01 97       	sbiw	r24, 0x01	; 1
    45a8:	9e af       	std	Y+62, r25	; 0x3e
    45aa:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    45ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    45b0:	00 97       	sbiw	r24, 0x00	; 0
    45b2:	69 f7       	brne	.-38     	; 0x458e <main+0x22ca>
    45b4:	16 c0       	rjmp	.+44     	; 0x45e2 <main+0x231e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45b6:	fe 01       	movw	r30, r28
    45b8:	ff 96       	adiw	r30, 0x3f	; 63
    45ba:	60 81       	ld	r22, Z
    45bc:	71 81       	ldd	r23, Z+1	; 0x01
    45be:	82 81       	ldd	r24, Z+2	; 0x02
    45c0:	93 81       	ldd	r25, Z+3	; 0x03
    45c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	9e af       	std	Y+62, r25	; 0x3e
    45cc:	8d af       	std	Y+61, r24	; 0x3d
    45ce:	8d ad       	ldd	r24, Y+61	; 0x3d
    45d0:	9e ad       	ldd	r25, Y+62	; 0x3e
    45d2:	9a af       	std	Y+58, r25	; 0x3a
    45d4:	89 af       	std	Y+57, r24	; 0x39
    45d6:	89 ad       	ldd	r24, Y+57	; 0x39
    45d8:	9a ad       	ldd	r25, Y+58	; 0x3a
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <main+0x2316>
    45de:	9a af       	std	Y+58, r25	; 0x3a
    45e0:	89 af       	std	Y+57, r24	; 0x39
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        if(strcmp(command,heavyloadALLOFF)==0){
    45e8:	84 e3       	ldi	r24, 0x34	; 52
    45ea:	93 e0       	ldi	r25, 0x03	; 3
    45ec:	25 eb       	ldi	r18, 0xB5	; 181
    45ee:	32 e0       	ldi	r19, 0x02	; 2
    45f0:	b9 01       	movw	r22, r18
    45f2:	0e 94 e1 26 	call	0x4dc2	; 0x4dc2 <strcmp>
    45f6:	00 97       	sbiw	r24, 0x00	; 0
    45f8:	09 f0       	breq	.+2      	; 0x45fc <main+0x2338>
    45fa:	9d c0       	rjmp	.+314    	; 0x4736 <main+0x2472>
           LCD_Send_String("Heavy loads");
    45fc:	84 e5       	ldi	r24, 0x54	; 84
    45fe:	91 e0       	ldi	r25, 0x01	; 1
    4600:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           LCD_GOTOXY(0,1);
    4604:	80 e0       	ldi	r24, 0x00	; 0
    4606:	61 e0       	ldi	r22, 0x01	; 1
    4608:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
           LCD_Send_String("are OFF");
    460c:	80 e6       	ldi	r24, 0x60	; 96
    460e:	91 e0       	ldi	r25, 0x01	; 1
    4610:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
           CLR_BIT(PORTB,2);
    4614:	a8 e3       	ldi	r26, 0x38	; 56
    4616:	b0 e0       	ldi	r27, 0x00	; 0
    4618:	e8 e3       	ldi	r30, 0x38	; 56
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	80 81       	ld	r24, Z
    461e:	8b 7f       	andi	r24, 0xFB	; 251
    4620:	8c 93       	st	X, r24
           CLR_BIT(PORTD,6);
    4622:	a2 e3       	ldi	r26, 0x32	; 50
    4624:	b0 e0       	ldi	r27, 0x00	; 0
    4626:	e2 e3       	ldi	r30, 0x32	; 50
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	80 81       	ld	r24, Z
    462c:	8f 7b       	andi	r24, 0xBF	; 191
    462e:	8c 93       	st	X, r24
           CLR_BIT(PORTB,7);
    4630:	a8 e3       	ldi	r26, 0x38	; 56
    4632:	b0 e0       	ldi	r27, 0x00	; 0
    4634:	e8 e3       	ldi	r30, 0x38	; 56
    4636:	f0 e0       	ldi	r31, 0x00	; 0
    4638:	80 81       	ld	r24, Z
    463a:	8f 77       	andi	r24, 0x7F	; 127
    463c:	8c 93       	st	X, r24
           CLR_BIT(PORTD,4);
    463e:	a2 e3       	ldi	r26, 0x32	; 50
    4640:	b0 e0       	ldi	r27, 0x00	; 0
    4642:	e2 e3       	ldi	r30, 0x32	; 50
    4644:	f0 e0       	ldi	r31, 0x00	; 0
    4646:	80 81       	ld	r24, Z
    4648:	8f 7e       	andi	r24, 0xEF	; 239
    464a:	8c 93       	st	X, r24
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	aa e7       	ldi	r26, 0x7A	; 122
    4652:	b4 e4       	ldi	r27, 0x44	; 68
    4654:	8d ab       	std	Y+53, r24	; 0x35
    4656:	9e ab       	std	Y+54, r25	; 0x36
    4658:	af ab       	std	Y+55, r26	; 0x37
    465a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465c:	6d a9       	ldd	r22, Y+53	; 0x35
    465e:	7e a9       	ldd	r23, Y+54	; 0x36
    4660:	8f a9       	ldd	r24, Y+55	; 0x37
    4662:	98 ad       	ldd	r25, Y+56	; 0x38
    4664:	20 e0       	ldi	r18, 0x00	; 0
    4666:	30 e0       	ldi	r19, 0x00	; 0
    4668:	4a ef       	ldi	r20, 0xFA	; 250
    466a:	54 e4       	ldi	r21, 0x44	; 68
    466c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4670:	dc 01       	movw	r26, r24
    4672:	cb 01       	movw	r24, r22
    4674:	89 ab       	std	Y+49, r24	; 0x31
    4676:	9a ab       	std	Y+50, r25	; 0x32
    4678:	ab ab       	std	Y+51, r26	; 0x33
    467a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    467c:	69 a9       	ldd	r22, Y+49	; 0x31
    467e:	7a a9       	ldd	r23, Y+50	; 0x32
    4680:	8b a9       	ldd	r24, Y+51	; 0x33
    4682:	9c a9       	ldd	r25, Y+52	; 0x34
    4684:	20 e0       	ldi	r18, 0x00	; 0
    4686:	30 e0       	ldi	r19, 0x00	; 0
    4688:	40 e8       	ldi	r20, 0x80	; 128
    468a:	5f e3       	ldi	r21, 0x3F	; 63
    468c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4690:	88 23       	and	r24, r24
    4692:	2c f4       	brge	.+10     	; 0x469e <main+0x23da>
		__ticks = 1;
    4694:	81 e0       	ldi	r24, 0x01	; 1
    4696:	90 e0       	ldi	r25, 0x00	; 0
    4698:	98 ab       	std	Y+48, r25	; 0x30
    469a:	8f a7       	std	Y+47, r24	; 0x2f
    469c:	3f c0       	rjmp	.+126    	; 0x471c <main+0x2458>
	else if (__tmp > 65535)
    469e:	69 a9       	ldd	r22, Y+49	; 0x31
    46a0:	7a a9       	ldd	r23, Y+50	; 0x32
    46a2:	8b a9       	ldd	r24, Y+51	; 0x33
    46a4:	9c a9       	ldd	r25, Y+52	; 0x34
    46a6:	20 e0       	ldi	r18, 0x00	; 0
    46a8:	3f ef       	ldi	r19, 0xFF	; 255
    46aa:	4f e7       	ldi	r20, 0x7F	; 127
    46ac:	57 e4       	ldi	r21, 0x47	; 71
    46ae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46b2:	18 16       	cp	r1, r24
    46b4:	4c f5       	brge	.+82     	; 0x4708 <main+0x2444>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b6:	6d a9       	ldd	r22, Y+53	; 0x35
    46b8:	7e a9       	ldd	r23, Y+54	; 0x36
    46ba:	8f a9       	ldd	r24, Y+55	; 0x37
    46bc:	98 ad       	ldd	r25, Y+56	; 0x38
    46be:	20 e0       	ldi	r18, 0x00	; 0
    46c0:	30 e0       	ldi	r19, 0x00	; 0
    46c2:	40 e2       	ldi	r20, 0x20	; 32
    46c4:	51 e4       	ldi	r21, 0x41	; 65
    46c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46ca:	dc 01       	movw	r26, r24
    46cc:	cb 01       	movw	r24, r22
    46ce:	bc 01       	movw	r22, r24
    46d0:	cd 01       	movw	r24, r26
    46d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d6:	dc 01       	movw	r26, r24
    46d8:	cb 01       	movw	r24, r22
    46da:	98 ab       	std	Y+48, r25	; 0x30
    46dc:	8f a7       	std	Y+47, r24	; 0x2f
    46de:	0f c0       	rjmp	.+30     	; 0x46fe <main+0x243a>
    46e0:	88 ec       	ldi	r24, 0xC8	; 200
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	9e a7       	std	Y+46, r25	; 0x2e
    46e6:	8d a7       	std	Y+45, r24	; 0x2d
    46e8:	8d a5       	ldd	r24, Y+45	; 0x2d
    46ea:	9e a5       	ldd	r25, Y+46	; 0x2e
    46ec:	01 97       	sbiw	r24, 0x01	; 1
    46ee:	f1 f7       	brne	.-4      	; 0x46ec <main+0x2428>
    46f0:	9e a7       	std	Y+46, r25	; 0x2e
    46f2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f4:	8f a5       	ldd	r24, Y+47	; 0x2f
    46f6:	98 a9       	ldd	r25, Y+48	; 0x30
    46f8:	01 97       	sbiw	r24, 0x01	; 1
    46fa:	98 ab       	std	Y+48, r25	; 0x30
    46fc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fe:	8f a5       	ldd	r24, Y+47	; 0x2f
    4700:	98 a9       	ldd	r25, Y+48	; 0x30
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	69 f7       	brne	.-38     	; 0x46e0 <main+0x241c>
    4706:	14 c0       	rjmp	.+40     	; 0x4730 <main+0x246c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4708:	69 a9       	ldd	r22, Y+49	; 0x31
    470a:	7a a9       	ldd	r23, Y+50	; 0x32
    470c:	8b a9       	ldd	r24, Y+51	; 0x33
    470e:	9c a9       	ldd	r25, Y+52	; 0x34
    4710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4714:	dc 01       	movw	r26, r24
    4716:	cb 01       	movw	r24, r22
    4718:	98 ab       	std	Y+48, r25	; 0x30
    471a:	8f a7       	std	Y+47, r24	; 0x2f
    471c:	8f a5       	ldd	r24, Y+47	; 0x2f
    471e:	98 a9       	ldd	r25, Y+48	; 0x30
    4720:	9c a7       	std	Y+44, r25	; 0x2c
    4722:	8b a7       	std	Y+43, r24	; 0x2b
    4724:	8b a5       	ldd	r24, Y+43	; 0x2b
    4726:	9c a5       	ldd	r25, Y+44	; 0x2c
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <main+0x2464>
    472c:	9c a7       	std	Y+44, r25	; 0x2c
    472e:	8b a7       	std	Y+43, r24	; 0x2b
           _delay_ms(1000);
           LCD8Bit_Send_Command(0x01);
    4730:	81 e0       	ldi	r24, 0x01	; 1
    4732:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
           }
        }

    	//Temperature
        if(lm35_reading > MAX_TEMP){
    4736:	80 91 22 03 	lds	r24, 0x0322
    473a:	90 91 23 03 	lds	r25, 0x0323
    473e:	8e 32       	cpi	r24, 0x2E	; 46
    4740:	91 05       	cpc	r25, r1
    4742:	20 f0       	brcs	.+8      	; 0x474c <main+0x2488>
        	BuzzerTOGGLE(1000);
    4744:	88 ee       	ldi	r24, 0xE8	; 232
    4746:	93 e0       	ldi	r25, 0x03	; 3
    4748:	0e 94 d0 10 	call	0x21a0	; 0x21a0 <BuzzerTOGGLE>
        }
        //Light System
        if(photoresistor_reading < MIN_LIGHT){
    474c:	80 91 26 03 	lds	r24, 0x0326
    4750:	90 91 27 03 	lds	r25, 0x0327
    4754:	f2 e0       	ldi	r31, 0x02	; 2
    4756:	88 35       	cpi	r24, 0x58	; 88
    4758:	9f 07       	cpc	r25, r31
    475a:	28 f4       	brcc	.+10     	; 0x4766 <main+0x24a2>
        	DIO_SetPin_Value(lamp220PORT,lamp220PIN,LOW);
    475c:	81 e0       	ldi	r24, 0x01	; 1
    475e:	65 e0       	ldi	r22, 0x05	; 5
    4760:	40 e0       	ldi	r20, 0x00	; 0
    4762:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
        }
        if(photoresistor_reading >= MIN_LIGHT){
    4766:	80 91 26 03 	lds	r24, 0x0326
    476a:	90 91 27 03 	lds	r25, 0x0327
    476e:	22 e0       	ldi	r18, 0x02	; 2
    4770:	88 35       	cpi	r24, 0x58	; 88
    4772:	92 07       	cpc	r25, r18
    4774:	28 f0       	brcs	.+10     	; 0x4780 <main+0x24bc>
        	DIO_SetPin_Value(lamp220PORT,lamp220PIN,HIGH);
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	65 e0       	ldi	r22, 0x05	; 5
    477a:	41 e0       	ldi	r20, 0x01	; 1
    477c:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	90 e0       	ldi	r25, 0x00	; 0
    4784:	a0 e8       	ldi	r26, 0x80	; 128
    4786:	bf e3       	ldi	r27, 0x3F	; 63
    4788:	8f a3       	std	Y+39, r24	; 0x27
    478a:	98 a7       	std	Y+40, r25	; 0x28
    478c:	a9 a7       	std	Y+41, r26	; 0x29
    478e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4790:	6f a1       	ldd	r22, Y+39	; 0x27
    4792:	78 a5       	ldd	r23, Y+40	; 0x28
    4794:	89 a5       	ldd	r24, Y+41	; 0x29
    4796:	9a a5       	ldd	r25, Y+42	; 0x2a
    4798:	20 e0       	ldi	r18, 0x00	; 0
    479a:	30 e0       	ldi	r19, 0x00	; 0
    479c:	4a ef       	ldi	r20, 0xFA	; 250
    479e:	54 e4       	ldi	r21, 0x44	; 68
    47a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47a4:	dc 01       	movw	r26, r24
    47a6:	cb 01       	movw	r24, r22
    47a8:	8b a3       	std	Y+35, r24	; 0x23
    47aa:	9c a3       	std	Y+36, r25	; 0x24
    47ac:	ad a3       	std	Y+37, r26	; 0x25
    47ae:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    47b0:	6b a1       	ldd	r22, Y+35	; 0x23
    47b2:	7c a1       	ldd	r23, Y+36	; 0x24
    47b4:	8d a1       	ldd	r24, Y+37	; 0x25
    47b6:	9e a1       	ldd	r25, Y+38	; 0x26
    47b8:	20 e0       	ldi	r18, 0x00	; 0
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	40 e8       	ldi	r20, 0x80	; 128
    47be:	5f e3       	ldi	r21, 0x3F	; 63
    47c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    47c4:	88 23       	and	r24, r24
    47c6:	2c f4       	brge	.+10     	; 0x47d2 <main+0x250e>
		__ticks = 1;
    47c8:	81 e0       	ldi	r24, 0x01	; 1
    47ca:	90 e0       	ldi	r25, 0x00	; 0
    47cc:	9a a3       	std	Y+34, r25	; 0x22
    47ce:	89 a3       	std	Y+33, r24	; 0x21
    47d0:	3f c0       	rjmp	.+126    	; 0x4850 <main+0x258c>
	else if (__tmp > 65535)
    47d2:	6b a1       	ldd	r22, Y+35	; 0x23
    47d4:	7c a1       	ldd	r23, Y+36	; 0x24
    47d6:	8d a1       	ldd	r24, Y+37	; 0x25
    47d8:	9e a1       	ldd	r25, Y+38	; 0x26
    47da:	20 e0       	ldi	r18, 0x00	; 0
    47dc:	3f ef       	ldi	r19, 0xFF	; 255
    47de:	4f e7       	ldi	r20, 0x7F	; 127
    47e0:	57 e4       	ldi	r21, 0x47	; 71
    47e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    47e6:	18 16       	cp	r1, r24
    47e8:	4c f5       	brge	.+82     	; 0x483c <main+0x2578>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    47ea:	6f a1       	ldd	r22, Y+39	; 0x27
    47ec:	78 a5       	ldd	r23, Y+40	; 0x28
    47ee:	89 a5       	ldd	r24, Y+41	; 0x29
    47f0:	9a a5       	ldd	r25, Y+42	; 0x2a
    47f2:	20 e0       	ldi	r18, 0x00	; 0
    47f4:	30 e0       	ldi	r19, 0x00	; 0
    47f6:	40 e2       	ldi	r20, 0x20	; 32
    47f8:	51 e4       	ldi	r21, 0x41	; 65
    47fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47fe:	dc 01       	movw	r26, r24
    4800:	cb 01       	movw	r24, r22
    4802:	bc 01       	movw	r22, r24
    4804:	cd 01       	movw	r24, r26
    4806:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	9a a3       	std	Y+34, r25	; 0x22
    4810:	89 a3       	std	Y+33, r24	; 0x21
    4812:	0f c0       	rjmp	.+30     	; 0x4832 <main+0x256e>
    4814:	88 ec       	ldi	r24, 0xC8	; 200
    4816:	90 e0       	ldi	r25, 0x00	; 0
    4818:	98 a3       	std	Y+32, r25	; 0x20
    481a:	8f 8f       	std	Y+31, r24	; 0x1f
    481c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    481e:	98 a1       	ldd	r25, Y+32	; 0x20
    4820:	01 97       	sbiw	r24, 0x01	; 1
    4822:	f1 f7       	brne	.-4      	; 0x4820 <main+0x255c>
    4824:	98 a3       	std	Y+32, r25	; 0x20
    4826:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4828:	89 a1       	ldd	r24, Y+33	; 0x21
    482a:	9a a1       	ldd	r25, Y+34	; 0x22
    482c:	01 97       	sbiw	r24, 0x01	; 1
    482e:	9a a3       	std	Y+34, r25	; 0x22
    4830:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4832:	89 a1       	ldd	r24, Y+33	; 0x21
    4834:	9a a1       	ldd	r25, Y+34	; 0x22
    4836:	00 97       	sbiw	r24, 0x00	; 0
    4838:	69 f7       	brne	.-38     	; 0x4814 <main+0x2550>
    483a:	14 c0       	rjmp	.+40     	; 0x4864 <main+0x25a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    483c:	6b a1       	ldd	r22, Y+35	; 0x23
    483e:	7c a1       	ldd	r23, Y+36	; 0x24
    4840:	8d a1       	ldd	r24, Y+37	; 0x25
    4842:	9e a1       	ldd	r25, Y+38	; 0x26
    4844:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4848:	dc 01       	movw	r26, r24
    484a:	cb 01       	movw	r24, r22
    484c:	9a a3       	std	Y+34, r25	; 0x22
    484e:	89 a3       	std	Y+33, r24	; 0x21
    4850:	89 a1       	ldd	r24, Y+33	; 0x21
    4852:	9a a1       	ldd	r25, Y+34	; 0x22
    4854:	9e 8f       	std	Y+30, r25	; 0x1e
    4856:	8d 8f       	std	Y+29, r24	; 0x1d
    4858:	8d 8d       	ldd	r24, Y+29	; 0x1d
    485a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    485c:	01 97       	sbiw	r24, 0x01	; 1
    485e:	f1 f7       	brne	.-4      	; 0x485c <main+0x2598>
    4860:	9e 8f       	std	Y+30, r25	; 0x1e
    4862:	8d 8f       	std	Y+29, r24	; 0x1d
        //Emergency
        /*Emergency is done by interrupt*/
        _delay_ms(1);

        //Set motor fan of lm35
        if(lm35_reading>=30 )
    4864:	80 91 22 03 	lds	r24, 0x0322
    4868:	90 91 23 03 	lds	r25, 0x0323
    486c:	8e 31       	cpi	r24, 0x1E	; 30
    486e:	91 05       	cpc	r25, r1
    4870:	28 f0       	brcs	.+10     	; 0x487c <main+0x25b8>
             DIO_SetPin_Value(GroupB,PB3,HIGH);
    4872:	81 e0       	ldi	r24, 0x01	; 1
    4874:	63 e0       	ldi	r22, 0x03	; 3
    4876:	41 e0       	ldi	r20, 0x01	; 1
    4878:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
        if(lm35_reading<30 )
    487c:	80 91 22 03 	lds	r24, 0x0322
    4880:	90 91 23 03 	lds	r25, 0x0323
    4884:	8e 31       	cpi	r24, 0x1E	; 30
    4886:	91 05       	cpc	r25, r1
    4888:	28 f4       	brcc	.+10     	; 0x4894 <main+0x25d0>
             DIO_SetPin_Value(GroupB,PB3,LOW);
    488a:	81 e0       	ldi	r24, 0x01	; 1
    488c:	63 e0       	ldi	r22, 0x03	; 3
    488e:	40 e0       	ldi	r20, 0x00	; 0
    4890:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>



        //Set motor fan by Variable Resitor
        OCR2_REG = potentiometer_reading*60UL;
    4894:	03 e4       	ldi	r16, 0x43	; 67
    4896:	10 e0       	ldi	r17, 0x00	; 0
    4898:	80 91 24 03 	lds	r24, 0x0324
    489c:	90 91 25 03 	lds	r25, 0x0325
    48a0:	cc 01       	movw	r24, r24
    48a2:	a0 e0       	ldi	r26, 0x00	; 0
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	2c e3       	ldi	r18, 0x3C	; 60
    48a8:	30 e0       	ldi	r19, 0x00	; 0
    48aa:	40 e0       	ldi	r20, 0x00	; 0
    48ac:	50 e0       	ldi	r21, 0x00	; 0
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <__mulsi3>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	f8 01       	movw	r30, r16
    48bc:	80 83       	st	Z, r24


    	/***********************************************************/
    	/******************   Display Readings   *******************/
    	/***********************************************************/
        LCD_Send_String("Temperature:");
    48be:	88 e6       	ldi	r24, 0x68	; 104
    48c0:	91 e0       	ldi	r25, 0x01	; 1
    48c2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	    LCD_Send_Int(lm35_reading);
    48c6:	80 91 22 03 	lds	r24, 0x0322
    48ca:	90 91 23 03 	lds	r25, 0x0323
    48ce:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
	    LCD_GOTOXY(0,1);
    48d2:	80 e0       	ldi	r24, 0x00	; 0
    48d4:	61 e0       	ldi	r22, 0x01	; 1
    48d6:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
        LCD_Send_String("Fan Speed:");
    48da:	85 e7       	ldi	r24, 0x75	; 117
    48dc:	91 e0       	ldi	r25, 0x01	; 1
    48de:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	    LCD_Send_Int(potentiometer_reading);
    48e2:	80 91 24 03 	lds	r24, 0x0324
    48e6:	90 91 25 03 	lds	r25, 0x0325
    48ea:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	90 e0       	ldi	r25, 0x00	; 0
    48f2:	aa e7       	ldi	r26, 0x7A	; 122
    48f4:	b4 e4       	ldi	r27, 0x44	; 68
    48f6:	89 8f       	std	Y+25, r24	; 0x19
    48f8:	9a 8f       	std	Y+26, r25	; 0x1a
    48fa:	ab 8f       	std	Y+27, r26	; 0x1b
    48fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    48fe:	69 8d       	ldd	r22, Y+25	; 0x19
    4900:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4906:	20 e0       	ldi	r18, 0x00	; 0
    4908:	30 e0       	ldi	r19, 0x00	; 0
    490a:	4a ef       	ldi	r20, 0xFA	; 250
    490c:	54 e4       	ldi	r21, 0x44	; 68
    490e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4912:	dc 01       	movw	r26, r24
    4914:	cb 01       	movw	r24, r22
    4916:	8d 8b       	std	Y+21, r24	; 0x15
    4918:	9e 8b       	std	Y+22, r25	; 0x16
    491a:	af 8b       	std	Y+23, r26	; 0x17
    491c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    491e:	6d 89       	ldd	r22, Y+21	; 0x15
    4920:	7e 89       	ldd	r23, Y+22	; 0x16
    4922:	8f 89       	ldd	r24, Y+23	; 0x17
    4924:	98 8d       	ldd	r25, Y+24	; 0x18
    4926:	20 e0       	ldi	r18, 0x00	; 0
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	40 e8       	ldi	r20, 0x80	; 128
    492c:	5f e3       	ldi	r21, 0x3F	; 63
    492e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4932:	88 23       	and	r24, r24
    4934:	2c f4       	brge	.+10     	; 0x4940 <main+0x267c>
		__ticks = 1;
    4936:	81 e0       	ldi	r24, 0x01	; 1
    4938:	90 e0       	ldi	r25, 0x00	; 0
    493a:	9c 8b       	std	Y+20, r25	; 0x14
    493c:	8b 8b       	std	Y+19, r24	; 0x13
    493e:	3f c0       	rjmp	.+126    	; 0x49be <main+0x26fa>
	else if (__tmp > 65535)
    4940:	6d 89       	ldd	r22, Y+21	; 0x15
    4942:	7e 89       	ldd	r23, Y+22	; 0x16
    4944:	8f 89       	ldd	r24, Y+23	; 0x17
    4946:	98 8d       	ldd	r25, Y+24	; 0x18
    4948:	20 e0       	ldi	r18, 0x00	; 0
    494a:	3f ef       	ldi	r19, 0xFF	; 255
    494c:	4f e7       	ldi	r20, 0x7F	; 127
    494e:	57 e4       	ldi	r21, 0x47	; 71
    4950:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4954:	18 16       	cp	r1, r24
    4956:	4c f5       	brge	.+82     	; 0x49aa <main+0x26e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4958:	69 8d       	ldd	r22, Y+25	; 0x19
    495a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    495c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    495e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4960:	20 e0       	ldi	r18, 0x00	; 0
    4962:	30 e0       	ldi	r19, 0x00	; 0
    4964:	40 e2       	ldi	r20, 0x20	; 32
    4966:	51 e4       	ldi	r21, 0x41	; 65
    4968:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    496c:	dc 01       	movw	r26, r24
    496e:	cb 01       	movw	r24, r22
    4970:	bc 01       	movw	r22, r24
    4972:	cd 01       	movw	r24, r26
    4974:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4978:	dc 01       	movw	r26, r24
    497a:	cb 01       	movw	r24, r22
    497c:	9c 8b       	std	Y+20, r25	; 0x14
    497e:	8b 8b       	std	Y+19, r24	; 0x13
    4980:	0f c0       	rjmp	.+30     	; 0x49a0 <main+0x26dc>
    4982:	88 ec       	ldi	r24, 0xC8	; 200
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	9a 8b       	std	Y+18, r25	; 0x12
    4988:	89 8b       	std	Y+17, r24	; 0x11
    498a:	89 89       	ldd	r24, Y+17	; 0x11
    498c:	9a 89       	ldd	r25, Y+18	; 0x12
    498e:	01 97       	sbiw	r24, 0x01	; 1
    4990:	f1 f7       	brne	.-4      	; 0x498e <main+0x26ca>
    4992:	9a 8b       	std	Y+18, r25	; 0x12
    4994:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4996:	8b 89       	ldd	r24, Y+19	; 0x13
    4998:	9c 89       	ldd	r25, Y+20	; 0x14
    499a:	01 97       	sbiw	r24, 0x01	; 1
    499c:	9c 8b       	std	Y+20, r25	; 0x14
    499e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    49a0:	8b 89       	ldd	r24, Y+19	; 0x13
    49a2:	9c 89       	ldd	r25, Y+20	; 0x14
    49a4:	00 97       	sbiw	r24, 0x00	; 0
    49a6:	69 f7       	brne	.-38     	; 0x4982 <main+0x26be>
    49a8:	14 c0       	rjmp	.+40     	; 0x49d2 <main+0x270e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    49aa:	6d 89       	ldd	r22, Y+21	; 0x15
    49ac:	7e 89       	ldd	r23, Y+22	; 0x16
    49ae:	8f 89       	ldd	r24, Y+23	; 0x17
    49b0:	98 8d       	ldd	r25, Y+24	; 0x18
    49b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49b6:	dc 01       	movw	r26, r24
    49b8:	cb 01       	movw	r24, r22
    49ba:	9c 8b       	std	Y+20, r25	; 0x14
    49bc:	8b 8b       	std	Y+19, r24	; 0x13
    49be:	8b 89       	ldd	r24, Y+19	; 0x13
    49c0:	9c 89       	ldd	r25, Y+20	; 0x14
    49c2:	98 8b       	std	Y+16, r25	; 0x10
    49c4:	8f 87       	std	Y+15, r24	; 0x0f
    49c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    49c8:	98 89       	ldd	r25, Y+16	; 0x10
    49ca:	01 97       	sbiw	r24, 0x01	; 1
    49cc:	f1 f7       	brne	.-4      	; 0x49ca <main+0x2706>
    49ce:	98 8b       	std	Y+16, r25	; 0x10
    49d0:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(1000);
	    LCD8Bit_Send_Command(0x01);
    49d2:	81 e0       	ldi	r24, 0x01	; 1
    49d4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
        LCD_Send_String("LDR:");
    49d8:	80 e8       	ldi	r24, 0x80	; 128
    49da:	91 e0       	ldi	r25, 0x01	; 1
    49dc:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	    LCD_Send_Int(photoresistor_reading);
    49e0:	80 91 26 03 	lds	r24, 0x0326
    49e4:	90 91 27 03 	lds	r25, 0x0327
    49e8:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
	    LCD_GOTOXY(0,1);
    49ec:	80 e0       	ldi	r24, 0x00	; 0
    49ee:	61 e0       	ldi	r22, 0x01	; 1
    49f0:	0e 94 40 10 	call	0x2080	; 0x2080 <LCD_GOTOXY>
        LCD_Send_String("Infrared:");
    49f4:	85 e8       	ldi	r24, 0x85	; 133
    49f6:	91 e0       	ldi	r25, 0x01	; 1
    49f8:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <LCD_Send_String>
	    LCD_Send_Int(infrared_reading);
    49fc:	80 91 28 03 	lds	r24, 0x0328
    4a00:	90 91 29 03 	lds	r25, 0x0329
    4a04:	0e 94 1d 10 	call	0x203a	; 0x203a <LCD_Send_Int>
    4a08:	80 e0       	ldi	r24, 0x00	; 0
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	aa e7       	ldi	r26, 0x7A	; 122
    4a0e:	b4 e4       	ldi	r27, 0x44	; 68
    4a10:	8b 87       	std	Y+11, r24	; 0x0b
    4a12:	9c 87       	std	Y+12, r25	; 0x0c
    4a14:	ad 87       	std	Y+13, r26	; 0x0d
    4a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a20:	20 e0       	ldi	r18, 0x00	; 0
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	4a ef       	ldi	r20, 0xFA	; 250
    4a26:	54 e4       	ldi	r21, 0x44	; 68
    4a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a2c:	dc 01       	movw	r26, r24
    4a2e:	cb 01       	movw	r24, r22
    4a30:	8f 83       	std	Y+7, r24	; 0x07
    4a32:	98 87       	std	Y+8, r25	; 0x08
    4a34:	a9 87       	std	Y+9, r26	; 0x09
    4a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4a38:	6f 81       	ldd	r22, Y+7	; 0x07
    4a3a:	78 85       	ldd	r23, Y+8	; 0x08
    4a3c:	89 85       	ldd	r24, Y+9	; 0x09
    4a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a40:	20 e0       	ldi	r18, 0x00	; 0
    4a42:	30 e0       	ldi	r19, 0x00	; 0
    4a44:	40 e8       	ldi	r20, 0x80	; 128
    4a46:	5f e3       	ldi	r21, 0x3F	; 63
    4a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4a4c:	88 23       	and	r24, r24
    4a4e:	2c f4       	brge	.+10     	; 0x4a5a <main+0x2796>
		__ticks = 1;
    4a50:	81 e0       	ldi	r24, 0x01	; 1
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	9e 83       	std	Y+6, r25	; 0x06
    4a56:	8d 83       	std	Y+5, r24	; 0x05
    4a58:	3f c0       	rjmp	.+126    	; 0x4ad8 <main+0x2814>
	else if (__tmp > 65535)
    4a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    4a5c:	78 85       	ldd	r23, Y+8	; 0x08
    4a5e:	89 85       	ldd	r24, Y+9	; 0x09
    4a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a62:	20 e0       	ldi	r18, 0x00	; 0
    4a64:	3f ef       	ldi	r19, 0xFF	; 255
    4a66:	4f e7       	ldi	r20, 0x7F	; 127
    4a68:	57 e4       	ldi	r21, 0x47	; 71
    4a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4a6e:	18 16       	cp	r1, r24
    4a70:	4c f5       	brge	.+82     	; 0x4ac4 <main+0x2800>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    4a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    4a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    4a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    4a7a:	20 e0       	ldi	r18, 0x00	; 0
    4a7c:	30 e0       	ldi	r19, 0x00	; 0
    4a7e:	40 e2       	ldi	r20, 0x20	; 32
    4a80:	51 e4       	ldi	r21, 0x41	; 65
    4a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a86:	dc 01       	movw	r26, r24
    4a88:	cb 01       	movw	r24, r22
    4a8a:	bc 01       	movw	r22, r24
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a92:	dc 01       	movw	r26, r24
    4a94:	cb 01       	movw	r24, r22
    4a96:	9e 83       	std	Y+6, r25	; 0x06
    4a98:	8d 83       	std	Y+5, r24	; 0x05
    4a9a:	0f c0       	rjmp	.+30     	; 0x4aba <main+0x27f6>
    4a9c:	88 ec       	ldi	r24, 0xC8	; 200
    4a9e:	90 e0       	ldi	r25, 0x00	; 0
    4aa0:	9c 83       	std	Y+4, r25	; 0x04
    4aa2:	8b 83       	std	Y+3, r24	; 0x03
    4aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    4aa8:	01 97       	sbiw	r24, 0x01	; 1
    4aaa:	f1 f7       	brne	.-4      	; 0x4aa8 <main+0x27e4>
    4aac:	9c 83       	std	Y+4, r25	; 0x04
    4aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    4ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    4ab4:	01 97       	sbiw	r24, 0x01	; 1
    4ab6:	9e 83       	std	Y+6, r25	; 0x06
    4ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4aba:	8d 81       	ldd	r24, Y+5	; 0x05
    4abc:	9e 81       	ldd	r25, Y+6	; 0x06
    4abe:	00 97       	sbiw	r24, 0x00	; 0
    4ac0:	69 f7       	brne	.-38     	; 0x4a9c <main+0x27d8>
    4ac2:	14 c0       	rjmp	.+40     	; 0x4aec <main+0x2828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    4ac6:	78 85       	ldd	r23, Y+8	; 0x08
    4ac8:	89 85       	ldd	r24, Y+9	; 0x09
    4aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    4acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ad0:	dc 01       	movw	r26, r24
    4ad2:	cb 01       	movw	r24, r22
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
    4ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    4ada:	9e 81       	ldd	r25, Y+6	; 0x06
    4adc:	9a 83       	std	Y+2, r25	; 0x02
    4ade:	89 83       	std	Y+1, r24	; 0x01
    4ae0:	89 81       	ldd	r24, Y+1	; 0x01
    4ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ae4:	01 97       	sbiw	r24, 0x01	; 1
    4ae6:	f1 f7       	brne	.-4      	; 0x4ae4 <main+0x2820>
    4ae8:	9a 83       	std	Y+2, r25	; 0x02
    4aea:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(1000);
	    LCD8Bit_Send_Command(0x01);
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <LCD8Bit_Send_Command>
    4af2:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <main+0x1598>

00004af6 <__vector_1>:

  }

//Emergency Fire Bottom on Interrupt 0
void __vector_1 (void) __attribute__((signal));
void __vector_1(void){
    4af6:	1f 92       	push	r1
    4af8:	0f 92       	push	r0
    4afa:	0f b6       	in	r0, 0x3f	; 63
    4afc:	0f 92       	push	r0
    4afe:	11 24       	eor	r1, r1
    4b00:	2f 93       	push	r18
    4b02:	3f 93       	push	r19
    4b04:	4f 93       	push	r20
    4b06:	5f 93       	push	r21
    4b08:	6f 93       	push	r22
    4b0a:	7f 93       	push	r23
    4b0c:	8f 93       	push	r24
    4b0e:	9f 93       	push	r25
    4b10:	af 93       	push	r26
    4b12:	bf 93       	push	r27
    4b14:	ef 93       	push	r30
    4b16:	ff 93       	push	r31
    4b18:	df 93       	push	r29
    4b1a:	cf 93       	push	r28
    4b1c:	cd b7       	in	r28, 0x3d	; 61
    4b1e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,HIGH);
    4b20:	81 e0       	ldi	r24, 0x01	; 1
    4b22:	66 e0       	ldi	r22, 0x06	; 6
    4b24:	41 e0       	ldi	r20, 0x01	; 1
    4b26:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	BuzzerON();
    4b2a:	0e 94 b8 10 	call	0x2170	; 0x2170 <BuzzerON>


}
    4b2e:	cf 91       	pop	r28
    4b30:	df 91       	pop	r29
    4b32:	ff 91       	pop	r31
    4b34:	ef 91       	pop	r30
    4b36:	bf 91       	pop	r27
    4b38:	af 91       	pop	r26
    4b3a:	9f 91       	pop	r25
    4b3c:	8f 91       	pop	r24
    4b3e:	7f 91       	pop	r23
    4b40:	6f 91       	pop	r22
    4b42:	5f 91       	pop	r21
    4b44:	4f 91       	pop	r20
    4b46:	3f 91       	pop	r19
    4b48:	2f 91       	pop	r18
    4b4a:	0f 90       	pop	r0
    4b4c:	0f be       	out	0x3f, r0	; 63
    4b4e:	0f 90       	pop	r0
    4b50:	1f 90       	pop	r1
    4b52:	18 95       	reti

00004b54 <__vector_2>:
//Emergency Stop Bottom on Interrupt 1
void __vector_2 (void) __attribute__((signal));
void __vector_2 (void){
    4b54:	1f 92       	push	r1
    4b56:	0f 92       	push	r0
    4b58:	0f b6       	in	r0, 0x3f	; 63
    4b5a:	0f 92       	push	r0
    4b5c:	11 24       	eor	r1, r1
    4b5e:	2f 93       	push	r18
    4b60:	3f 93       	push	r19
    4b62:	4f 93       	push	r20
    4b64:	5f 93       	push	r21
    4b66:	6f 93       	push	r22
    4b68:	7f 93       	push	r23
    4b6a:	8f 93       	push	r24
    4b6c:	9f 93       	push	r25
    4b6e:	af 93       	push	r26
    4b70:	bf 93       	push	r27
    4b72:	ef 93       	push	r30
    4b74:	ff 93       	push	r31
    4b76:	df 93       	push	r29
    4b78:	cf 93       	push	r28
    4b7a:	cd b7       	in	r28, 0x3d	; 61
    4b7c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPin_Value(EmergencyLEDPORT,EmergencyLEDPIN,LOW);
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	66 e0       	ldi	r22, 0x06	; 6
    4b82:	40 e0       	ldi	r20, 0x00	; 0
    4b84:	0e 94 45 09 	call	0x128a	; 0x128a <DIO_SetPin_Value>
	BuzzerOFF();
    4b88:	0e 94 c4 10 	call	0x2188	; 0x2188 <BuzzerOFF>


}
    4b8c:	cf 91       	pop	r28
    4b8e:	df 91       	pop	r29
    4b90:	ff 91       	pop	r31
    4b92:	ef 91       	pop	r30
    4b94:	bf 91       	pop	r27
    4b96:	af 91       	pop	r26
    4b98:	9f 91       	pop	r25
    4b9a:	8f 91       	pop	r24
    4b9c:	7f 91       	pop	r23
    4b9e:	6f 91       	pop	r22
    4ba0:	5f 91       	pop	r21
    4ba2:	4f 91       	pop	r20
    4ba4:	3f 91       	pop	r19
    4ba6:	2f 91       	pop	r18
    4ba8:	0f 90       	pop	r0
    4baa:	0f be       	out	0x3f, r0	; 63
    4bac:	0f 90       	pop	r0
    4bae:	1f 90       	pop	r1
    4bb0:	18 95       	reti

00004bb2 <BluetoothRead>:

void BluetoothRead(char *array){
    4bb2:	df 93       	push	r29
    4bb4:	cf 93       	push	r28
    4bb6:	00 d0       	rcall	.+0      	; 0x4bb8 <BluetoothRead+0x6>
    4bb8:	00 d0       	rcall	.+0      	; 0x4bba <BluetoothRead+0x8>
    4bba:	cd b7       	in	r28, 0x3d	; 61
    4bbc:	de b7       	in	r29, 0x3e	; 62
    4bbe:	9c 83       	std	Y+4, r25	; 0x04
    4bc0:	8b 83       	std	Y+3, r24	; 0x03
	    u8 i = 0;
    4bc2:	1a 82       	std	Y+2, r1	; 0x02
	    ca = '/';
    4bc4:	8f e2       	ldi	r24, 0x2F	; 47
    4bc6:	80 93 39 03 	sts	0x0339, r24
    4bca:	35 c0       	rjmp	.+106    	; 0x4c36 <BluetoothRead+0x84>
		while (ca!='*') {
		ca = UART_Receive();
    4bcc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <UART_Receive>
    4bd0:	80 93 39 03 	sts	0x0339, r24

		if (ca >= '1' && ca <= 'z'){
    4bd4:	80 91 39 03 	lds	r24, 0x0339
    4bd8:	81 33       	cpi	r24, 0x31	; 49
    4bda:	b0 f0       	brcs	.+44     	; 0x4c08 <BluetoothRead+0x56>
    4bdc:	80 91 39 03 	lds	r24, 0x0339
    4be0:	8b 37       	cpi	r24, 0x7B	; 123
    4be2:	90 f4       	brcc	.+36     	; 0x4c08 <BluetoothRead+0x56>
		LCD8Bit_Send_Data(ca);
    4be4:	80 91 39 03 	lds	r24, 0x0339
    4be8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
		array[i] = ca;
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	28 2f       	mov	r18, r24
    4bf0:	30 e0       	ldi	r19, 0x00	; 0
    4bf2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf4:	9c 81       	ldd	r25, Y+4	; 0x04
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	e2 0f       	add	r30, r18
    4bfa:	f3 1f       	adc	r31, r19
    4bfc:	80 91 39 03 	lds	r24, 0x0339
    4c00:	80 83       	st	Z, r24
        i++;
    4c02:	8a 81       	ldd	r24, Y+2	; 0x02
    4c04:	8f 5f       	subi	r24, 0xFF	; 255
    4c06:	8a 83       	std	Y+2, r24	; 0x02
		}
		if(ca == '*'){
    4c08:	80 91 39 03 	lds	r24, 0x0339
    4c0c:	8a 32       	cpi	r24, 0x2A	; 42
    4c0e:	99 f4       	brne	.+38     	; 0x4c36 <BluetoothRead+0x84>
		for(u8 i =0;i<4;i++)
    4c10:	19 82       	std	Y+1, r1	; 0x01
    4c12:	0e c0       	rjmp	.+28     	; 0x4c30 <BluetoothRead+0x7e>
			LCD8Bit_Send_Data(array[i]);
    4c14:	89 81       	ldd	r24, Y+1	; 0x01
    4c16:	28 2f       	mov	r18, r24
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	9c 81       	ldd	r25, Y+4	; 0x04
    4c1e:	fc 01       	movw	r30, r24
    4c20:	e2 0f       	add	r30, r18
    4c22:	f3 1f       	adc	r31, r19
    4c24:	80 81       	ld	r24, Z
    4c26:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <LCD8Bit_Send_Data>
		LCD8Bit_Send_Data(ca);
		array[i] = ca;
        i++;
		}
		if(ca == '*'){
		for(u8 i =0;i<4;i++)
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	8f 5f       	subi	r24, 0xFF	; 255
    4c2e:	89 83       	std	Y+1, r24	; 0x01
    4c30:	89 81       	ldd	r24, Y+1	; 0x01
    4c32:	84 30       	cpi	r24, 0x04	; 4
    4c34:	78 f3       	brcs	.-34     	; 0x4c14 <BluetoothRead+0x62>
}

void BluetoothRead(char *array){
	    u8 i = 0;
	    ca = '/';
		while (ca!='*') {
    4c36:	80 91 39 03 	lds	r24, 0x0339
    4c3a:	8a 32       	cpi	r24, 0x2A	; 42
    4c3c:	39 f6       	brne	.-114    	; 0x4bcc <BluetoothRead+0x1a>
		for(u8 i =0;i<4;i++)
			LCD8Bit_Send_Data(array[i]);

		}
    }
}
    4c3e:	0f 90       	pop	r0
    4c40:	0f 90       	pop	r0
    4c42:	0f 90       	pop	r0
    4c44:	0f 90       	pop	r0
    4c46:	cf 91       	pop	r28
    4c48:	df 91       	pop	r29
    4c4a:	08 95       	ret

00004c4c <ServoAngle>:

void ServoAngle(s8 angle){
    4c4c:	0f 93       	push	r16
    4c4e:	1f 93       	push	r17
    4c50:	df 93       	push	r29
    4c52:	cf 93       	push	r28
    4c54:	0f 92       	push	r0
    4c56:	cd b7       	in	r28, 0x3d	; 61
    4c58:	de b7       	in	r29, 0x3e	; 62
    4c5a:	89 83       	std	Y+1, r24	; 0x01
	if(angle>= -90 && angle <= 90)
    4c5c:	89 81       	ldd	r24, Y+1	; 0x01
    4c5e:	86 3a       	cpi	r24, 0xA6	; 166
    4c60:	c4 f1       	brlt	.+112    	; 0x4cd2 <ServoAngle+0x86>
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	8b 35       	cpi	r24, 0x5B	; 91
    4c66:	ac f5       	brge	.+106    	; 0x4cd2 <ServoAngle+0x86>
    OCR1A = ((1000/180.0)*(angle+90.0))+1000.0;
    4c68:	0a e4       	ldi	r16, 0x4A	; 74
    4c6a:	10 e0       	ldi	r17, 0x00	; 0
    4c6c:	89 81       	ldd	r24, Y+1	; 0x01
    4c6e:	99 27       	eor	r25, r25
    4c70:	87 fd       	sbrc	r24, 7
    4c72:	90 95       	com	r25
    4c74:	a9 2f       	mov	r26, r25
    4c76:	b9 2f       	mov	r27, r25
    4c78:	bc 01       	movw	r22, r24
    4c7a:	cd 01       	movw	r24, r26
    4c7c:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    4c80:	dc 01       	movw	r26, r24
    4c82:	cb 01       	movw	r24, r22
    4c84:	bc 01       	movw	r22, r24
    4c86:	cd 01       	movw	r24, r26
    4c88:	20 e0       	ldi	r18, 0x00	; 0
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	44 eb       	ldi	r20, 0xB4	; 180
    4c8e:	52 e4       	ldi	r21, 0x42	; 66
    4c90:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4c94:	dc 01       	movw	r26, r24
    4c96:	cb 01       	movw	r24, r22
    4c98:	bc 01       	movw	r22, r24
    4c9a:	cd 01       	movw	r24, r26
    4c9c:	2c e1       	ldi	r18, 0x1C	; 28
    4c9e:	37 ec       	ldi	r19, 0xC7	; 199
    4ca0:	41 eb       	ldi	r20, 0xB1	; 177
    4ca2:	50 e4       	ldi	r21, 0x40	; 64
    4ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ca8:	dc 01       	movw	r26, r24
    4caa:	cb 01       	movw	r24, r22
    4cac:	bc 01       	movw	r22, r24
    4cae:	cd 01       	movw	r24, r26
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	4a e7       	ldi	r20, 0x7A	; 122
    4cb6:	54 e4       	ldi	r21, 0x44	; 68
    4cb8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	cb 01       	movw	r24, r22
    4cc0:	bc 01       	movw	r22, r24
    4cc2:	cd 01       	movw	r24, r26
    4cc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4cc8:	dc 01       	movw	r26, r24
    4cca:	cb 01       	movw	r24, r22
    4ccc:	f8 01       	movw	r30, r16
    4cce:	91 83       	std	Z+1, r25	; 0x01
    4cd0:	80 83       	st	Z, r24
    if(OCR1A == 2000)
    4cd2:	ea e4       	ldi	r30, 0x4A	; 74
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	80 81       	ld	r24, Z
    4cd8:	91 81       	ldd	r25, Z+1	; 0x01
    4cda:	f7 e0       	ldi	r31, 0x07	; 7
    4cdc:	80 3d       	cpi	r24, 0xD0	; 208
    4cde:	9f 07       	cpc	r25, r31
    4ce0:	31 f4       	brne	.+12     	; 0x4cee <ServoAngle+0xa2>
    	OCR1A = 1999;
    4ce2:	ea e4       	ldi	r30, 0x4A	; 74
    4ce4:	f0 e0       	ldi	r31, 0x00	; 0
    4ce6:	8f ec       	ldi	r24, 0xCF	; 207
    4ce8:	97 e0       	ldi	r25, 0x07	; 7
    4cea:	91 83       	std	Z+1, r25	; 0x01
    4cec:	80 83       	st	Z, r24
    if(OCR1A == -90)
    4cee:	ea e4       	ldi	r30, 0x4A	; 74
    4cf0:	f0 e0       	ldi	r31, 0x00	; 0
    4cf2:	80 81       	ld	r24, Z
    4cf4:	91 81       	ldd	r25, Z+1	; 0x01
    4cf6:	2f ef       	ldi	r18, 0xFF	; 255
    4cf8:	86 3a       	cpi	r24, 0xA6	; 166
    4cfa:	92 07       	cpc	r25, r18
    4cfc:	31 f4       	brne	.+12     	; 0x4d0a <ServoAngle+0xbe>
    	OCR1A = 1001;
    4cfe:	ea e4       	ldi	r30, 0x4A	; 74
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	89 ee       	ldi	r24, 0xE9	; 233
    4d04:	93 e0       	ldi	r25, 0x03	; 3
    4d06:	91 83       	std	Z+1, r25	; 0x01
    4d08:	80 83       	st	Z, r24


}
    4d0a:	0f 90       	pop	r0
    4d0c:	cf 91       	pop	r28
    4d0e:	df 91       	pop	r29
    4d10:	1f 91       	pop	r17
    4d12:	0f 91       	pop	r16
    4d14:	08 95       	ret

00004d16 <__mulsi3>:
    4d16:	62 9f       	mul	r22, r18
    4d18:	d0 01       	movw	r26, r0
    4d1a:	73 9f       	mul	r23, r19
    4d1c:	f0 01       	movw	r30, r0
    4d1e:	82 9f       	mul	r24, r18
    4d20:	e0 0d       	add	r30, r0
    4d22:	f1 1d       	adc	r31, r1
    4d24:	64 9f       	mul	r22, r20
    4d26:	e0 0d       	add	r30, r0
    4d28:	f1 1d       	adc	r31, r1
    4d2a:	92 9f       	mul	r25, r18
    4d2c:	f0 0d       	add	r31, r0
    4d2e:	83 9f       	mul	r24, r19
    4d30:	f0 0d       	add	r31, r0
    4d32:	74 9f       	mul	r23, r20
    4d34:	f0 0d       	add	r31, r0
    4d36:	65 9f       	mul	r22, r21
    4d38:	f0 0d       	add	r31, r0
    4d3a:	99 27       	eor	r25, r25
    4d3c:	72 9f       	mul	r23, r18
    4d3e:	b0 0d       	add	r27, r0
    4d40:	e1 1d       	adc	r30, r1
    4d42:	f9 1f       	adc	r31, r25
    4d44:	63 9f       	mul	r22, r19
    4d46:	b0 0d       	add	r27, r0
    4d48:	e1 1d       	adc	r30, r1
    4d4a:	f9 1f       	adc	r31, r25
    4d4c:	bd 01       	movw	r22, r26
    4d4e:	cf 01       	movw	r24, r30
    4d50:	11 24       	eor	r1, r1
    4d52:	08 95       	ret

00004d54 <__prologue_saves__>:
    4d54:	2f 92       	push	r2
    4d56:	3f 92       	push	r3
    4d58:	4f 92       	push	r4
    4d5a:	5f 92       	push	r5
    4d5c:	6f 92       	push	r6
    4d5e:	7f 92       	push	r7
    4d60:	8f 92       	push	r8
    4d62:	9f 92       	push	r9
    4d64:	af 92       	push	r10
    4d66:	bf 92       	push	r11
    4d68:	cf 92       	push	r12
    4d6a:	df 92       	push	r13
    4d6c:	ef 92       	push	r14
    4d6e:	ff 92       	push	r15
    4d70:	0f 93       	push	r16
    4d72:	1f 93       	push	r17
    4d74:	cf 93       	push	r28
    4d76:	df 93       	push	r29
    4d78:	cd b7       	in	r28, 0x3d	; 61
    4d7a:	de b7       	in	r29, 0x3e	; 62
    4d7c:	ca 1b       	sub	r28, r26
    4d7e:	db 0b       	sbc	r29, r27
    4d80:	0f b6       	in	r0, 0x3f	; 63
    4d82:	f8 94       	cli
    4d84:	de bf       	out	0x3e, r29	; 62
    4d86:	0f be       	out	0x3f, r0	; 63
    4d88:	cd bf       	out	0x3d, r28	; 61
    4d8a:	09 94       	ijmp

00004d8c <__epilogue_restores__>:
    4d8c:	2a 88       	ldd	r2, Y+18	; 0x12
    4d8e:	39 88       	ldd	r3, Y+17	; 0x11
    4d90:	48 88       	ldd	r4, Y+16	; 0x10
    4d92:	5f 84       	ldd	r5, Y+15	; 0x0f
    4d94:	6e 84       	ldd	r6, Y+14	; 0x0e
    4d96:	7d 84       	ldd	r7, Y+13	; 0x0d
    4d98:	8c 84       	ldd	r8, Y+12	; 0x0c
    4d9a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4d9c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4d9e:	b9 84       	ldd	r11, Y+9	; 0x09
    4da0:	c8 84       	ldd	r12, Y+8	; 0x08
    4da2:	df 80       	ldd	r13, Y+7	; 0x07
    4da4:	ee 80       	ldd	r14, Y+6	; 0x06
    4da6:	fd 80       	ldd	r15, Y+5	; 0x05
    4da8:	0c 81       	ldd	r16, Y+4	; 0x04
    4daa:	1b 81       	ldd	r17, Y+3	; 0x03
    4dac:	aa 81       	ldd	r26, Y+2	; 0x02
    4dae:	b9 81       	ldd	r27, Y+1	; 0x01
    4db0:	ce 0f       	add	r28, r30
    4db2:	d1 1d       	adc	r29, r1
    4db4:	0f b6       	in	r0, 0x3f	; 63
    4db6:	f8 94       	cli
    4db8:	de bf       	out	0x3e, r29	; 62
    4dba:	0f be       	out	0x3f, r0	; 63
    4dbc:	cd bf       	out	0x3d, r28	; 61
    4dbe:	ed 01       	movw	r28, r26
    4dc0:	08 95       	ret

00004dc2 <strcmp>:
    4dc2:	fb 01       	movw	r30, r22
    4dc4:	dc 01       	movw	r26, r24
    4dc6:	8d 91       	ld	r24, X+
    4dc8:	01 90       	ld	r0, Z+
    4dca:	80 19       	sub	r24, r0
    4dcc:	01 10       	cpse	r0, r1
    4dce:	d9 f3       	breq	.-10     	; 0x4dc6 <strcmp+0x4>
    4dd0:	99 0b       	sbc	r25, r25
    4dd2:	08 95       	ret

00004dd4 <itoa>:
    4dd4:	fb 01       	movw	r30, r22
    4dd6:	9f 01       	movw	r18, r30
    4dd8:	e8 94       	clt
    4dda:	42 30       	cpi	r20, 0x02	; 2
    4ddc:	c4 f0       	brlt	.+48     	; 0x4e0e <itoa+0x3a>
    4dde:	45 32       	cpi	r20, 0x25	; 37
    4de0:	b4 f4       	brge	.+44     	; 0x4e0e <itoa+0x3a>
    4de2:	4a 30       	cpi	r20, 0x0A	; 10
    4de4:	29 f4       	brne	.+10     	; 0x4df0 <itoa+0x1c>
    4de6:	97 fb       	bst	r25, 7
    4de8:	1e f4       	brtc	.+6      	; 0x4df0 <itoa+0x1c>
    4dea:	90 95       	com	r25
    4dec:	81 95       	neg	r24
    4dee:	9f 4f       	sbci	r25, 0xFF	; 255
    4df0:	64 2f       	mov	r22, r20
    4df2:	77 27       	eor	r23, r23
    4df4:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <__udivmodhi4>
    4df8:	80 5d       	subi	r24, 0xD0	; 208
    4dfa:	8a 33       	cpi	r24, 0x3A	; 58
    4dfc:	0c f0       	brlt	.+2      	; 0x4e00 <itoa+0x2c>
    4dfe:	89 5d       	subi	r24, 0xD9	; 217
    4e00:	81 93       	st	Z+, r24
    4e02:	cb 01       	movw	r24, r22
    4e04:	00 97       	sbiw	r24, 0x00	; 0
    4e06:	a1 f7       	brne	.-24     	; 0x4df0 <itoa+0x1c>
    4e08:	16 f4       	brtc	.+4      	; 0x4e0e <itoa+0x3a>
    4e0a:	5d e2       	ldi	r21, 0x2D	; 45
    4e0c:	51 93       	st	Z+, r21
    4e0e:	10 82       	st	Z, r1
    4e10:	c9 01       	movw	r24, r18
    4e12:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <strrev>

00004e16 <strrev>:
    4e16:	dc 01       	movw	r26, r24
    4e18:	fc 01       	movw	r30, r24
    4e1a:	67 2f       	mov	r22, r23
    4e1c:	71 91       	ld	r23, Z+
    4e1e:	77 23       	and	r23, r23
    4e20:	e1 f7       	brne	.-8      	; 0x4e1a <strrev+0x4>
    4e22:	32 97       	sbiw	r30, 0x02	; 2
    4e24:	04 c0       	rjmp	.+8      	; 0x4e2e <strrev+0x18>
    4e26:	7c 91       	ld	r23, X
    4e28:	6d 93       	st	X+, r22
    4e2a:	70 83       	st	Z, r23
    4e2c:	62 91       	ld	r22, -Z
    4e2e:	ae 17       	cp	r26, r30
    4e30:	bf 07       	cpc	r27, r31
    4e32:	c8 f3       	brcs	.-14     	; 0x4e26 <strrev+0x10>
    4e34:	08 95       	ret

00004e36 <__udivmodhi4>:
    4e36:	aa 1b       	sub	r26, r26
    4e38:	bb 1b       	sub	r27, r27
    4e3a:	51 e1       	ldi	r21, 0x11	; 17
    4e3c:	07 c0       	rjmp	.+14     	; 0x4e4c <__udivmodhi4_ep>

00004e3e <__udivmodhi4_loop>:
    4e3e:	aa 1f       	adc	r26, r26
    4e40:	bb 1f       	adc	r27, r27
    4e42:	a6 17       	cp	r26, r22
    4e44:	b7 07       	cpc	r27, r23
    4e46:	10 f0       	brcs	.+4      	; 0x4e4c <__udivmodhi4_ep>
    4e48:	a6 1b       	sub	r26, r22
    4e4a:	b7 0b       	sbc	r27, r23

00004e4c <__udivmodhi4_ep>:
    4e4c:	88 1f       	adc	r24, r24
    4e4e:	99 1f       	adc	r25, r25
    4e50:	5a 95       	dec	r21
    4e52:	a9 f7       	brne	.-22     	; 0x4e3e <__udivmodhi4_loop>
    4e54:	80 95       	com	r24
    4e56:	90 95       	com	r25
    4e58:	bc 01       	movw	r22, r24
    4e5a:	cd 01       	movw	r24, r26
    4e5c:	08 95       	ret

00004e5e <_exit>:
    4e5e:	f8 94       	cli

00004e60 <__stop_program>:
    4e60:	ff cf       	rjmp	.-2      	; 0x4e60 <__stop_program>
